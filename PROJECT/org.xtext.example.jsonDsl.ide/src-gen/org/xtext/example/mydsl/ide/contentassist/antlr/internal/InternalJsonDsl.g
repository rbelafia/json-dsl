/*
 * generated by Xtext 2.23.0
 */
grammar InternalJsonDsl;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.example.mydsl.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.example.mydsl.services.JsonDslGrammarAccess;

}
@parser::members {
	private JsonDslGrammarAccess grammarAccess;

	public void setGrammarAccess(JsonDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getStmtsAssignment()); }
		(rule__Model__StmtsAssignment)*
		{ after(grammarAccess.getModelAccess().getStmtsAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSimpleStatement
entryRuleSimpleStatement
:
{ before(grammarAccess.getSimpleStatementRule()); }
	 ruleSimpleStatement
{ after(grammarAccess.getSimpleStatementRule()); } 
	 EOF 
;

// Rule SimpleStatement
ruleSimpleStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSimpleStatementAccess().getGroup()); }
		(rule__SimpleStatement__Group__0)
		{ after(grammarAccess.getSimpleStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAssignment
entryRuleAssignment
:
{ before(grammarAccess.getAssignmentRule()); }
	 ruleAssignment
{ after(grammarAccess.getAssignmentRule()); } 
	 EOF 
;

// Rule Assignment
ruleAssignment 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAssignmentAccess().getGroup()); }
		(rule__Assignment__Group__0)
		{ after(grammarAccess.getAssignmentAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpression
entryRuleExpression
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpressionAccess().getBinaryExpressionParserRuleCall()); }
		ruleBinaryExpression
		{ after(grammarAccess.getExpressionAccess().getBinaryExpressionParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBinaryExpression
entryRuleBinaryExpression
:
{ before(grammarAccess.getBinaryExpressionRule()); }
	 ruleBinaryExpression
{ after(grammarAccess.getBinaryExpressionRule()); } 
	 EOF 
;

// Rule BinaryExpression
ruleBinaryExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBinaryExpressionAccess().getOrExpressionParserRuleCall()); }
		ruleOrExpression
		{ after(grammarAccess.getBinaryExpressionAccess().getOrExpressionParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOrExpression
entryRuleOrExpression
:
{ before(grammarAccess.getOrExpressionRule()); }
	 ruleOrExpression
{ after(grammarAccess.getOrExpressionRule()); } 
	 EOF 
;

// Rule OrExpression
ruleOrExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOrExpressionAccess().getGroup()); }
		(rule__OrExpression__Group__0)
		{ after(grammarAccess.getOrExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAndExpression
entryRuleAndExpression
:
{ before(grammarAccess.getAndExpressionRule()); }
	 ruleAndExpression
{ after(grammarAccess.getAndExpressionRule()); } 
	 EOF 
;

// Rule AndExpression
ruleAndExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAndExpressionAccess().getGroup()); }
		(rule__AndExpression__Group__0)
		{ after(grammarAccess.getAndExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEqExpression
entryRuleEqExpression
:
{ before(grammarAccess.getEqExpressionRule()); }
	 ruleEqExpression
{ after(grammarAccess.getEqExpressionRule()); } 
	 EOF 
;

// Rule EqExpression
ruleEqExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEqExpressionAccess().getGroup()); }
		(rule__EqExpression__Group__0)
		{ after(grammarAccess.getEqExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCompExpression
entryRuleCompExpression
:
{ before(grammarAccess.getCompExpressionRule()); }
	 ruleCompExpression
{ after(grammarAccess.getCompExpressionRule()); } 
	 EOF 
;

// Rule CompExpression
ruleCompExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCompExpressionAccess().getGroup()); }
		(rule__CompExpression__Group__0)
		{ after(grammarAccess.getCompExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAddExpression
entryRuleAddExpression
:
{ before(grammarAccess.getAddExpressionRule()); }
	 ruleAddExpression
{ after(grammarAccess.getAddExpressionRule()); } 
	 EOF 
;

// Rule AddExpression
ruleAddExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAddExpressionAccess().getGroup()); }
		(rule__AddExpression__Group__0)
		{ after(grammarAccess.getAddExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMultExpression
entryRuleMultExpression
:
{ before(grammarAccess.getMultExpressionRule()); }
	 ruleMultExpression
{ after(grammarAccess.getMultExpressionRule()); } 
	 EOF 
;

// Rule MultExpression
ruleMultExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMultExpressionAccess().getGroup()); }
		(rule__MultExpression__Group__0)
		{ after(grammarAccess.getMultExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleUnaryMinusExpression
entryRuleUnaryMinusExpression
:
{ before(grammarAccess.getUnaryMinusExpressionRule()); }
	 ruleUnaryMinusExpression
{ after(grammarAccess.getUnaryMinusExpressionRule()); } 
	 EOF 
;

// Rule UnaryMinusExpression
ruleUnaryMinusExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getUnaryMinusExpressionAccess().getAlternatives()); }
		(rule__UnaryMinusExpression__Alternatives)
		{ after(grammarAccess.getUnaryMinusExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNegationExpression
entryRuleNegationExpression
:
{ before(grammarAccess.getNegationExpressionRule()); }
	 ruleNegationExpression
{ after(grammarAccess.getNegationExpressionRule()); } 
	 EOF 
;

// Rule NegationExpression
ruleNegationExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNegationExpressionAccess().getAlternatives()); }
		(rule__NegationExpression__Alternatives)
		{ after(grammarAccess.getNegationExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression
:
{ before(grammarAccess.getPrimaryExpressionRule()); }
	 rulePrimaryExpression
{ after(grammarAccess.getPrimaryExpressionRule()); } 
	 EOF 
;

// Rule PrimaryExpression
rulePrimaryExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getAlternatives()); }
		(rule__PrimaryExpression__Alternatives)
		{ after(grammarAccess.getPrimaryExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFieldInvoquer
entryRuleFieldInvoquer
:
{ before(grammarAccess.getFieldInvoquerRule()); }
	 ruleFieldInvoquer
{ after(grammarAccess.getFieldInvoquerRule()); } 
	 EOF 
;

// Rule FieldInvoquer
ruleFieldInvoquer 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFieldInvoquerAccess().getFieldAssignment()); }
		(rule__FieldInvoquer__FieldAssignment)
		{ after(grammarAccess.getFieldInvoquerAccess().getFieldAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePointer
entryRulePointer
:
{ before(grammarAccess.getPointerRule()); }
	 rulePointer
{ after(grammarAccess.getPointerRule()); } 
	 EOF 
;

// Rule Pointer
rulePointer 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPointerAccess().getQuestionMarkKeyword()); }
		'?'
		{ after(grammarAccess.getPointerAccess().getQuestionMarkKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVariableCall
entryRuleVariableCall
:
{ before(grammarAccess.getVariableCallRule()); }
	 ruleVariableCall
{ after(grammarAccess.getVariableCallRule()); } 
	 EOF 
;

// Rule VariableCall
ruleVariableCall 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVariableCallAccess().getGroup()); }
		(rule__VariableCall__Group__0)
		{ after(grammarAccess.getVariableCallAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAuxiliarCaller
entryRuleAuxiliarCaller
:
{ before(grammarAccess.getAuxiliarCallerRule()); }
	 ruleAuxiliarCaller
{ after(grammarAccess.getAuxiliarCallerRule()); } 
	 EOF 
;

// Rule AuxiliarCaller
ruleAuxiliarCaller 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAuxiliarCallerAccess().getAlternatives()); }
		(rule__AuxiliarCaller__Alternatives)
		{ after(grammarAccess.getAuxiliarCallerAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFieldCaller
entryRuleFieldCaller
:
{ before(grammarAccess.getFieldCallerRule()); }
	 ruleFieldCaller
{ after(grammarAccess.getFieldCallerRule()); } 
	 EOF 
;

// Rule FieldCaller
ruleFieldCaller 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFieldCallerAccess().getGroup()); }
		(rule__FieldCaller__Group__0)
		{ after(grammarAccess.getFieldCallerAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleArrayCaller
entryRuleArrayCaller
:
{ before(grammarAccess.getArrayCallerRule()); }
	 ruleArrayCaller
{ after(grammarAccess.getArrayCallerRule()); } 
	 EOF 
;

// Rule ArrayCaller
ruleArrayCaller 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getArrayCallerAccess().getGroup()); }
		(rule__ArrayCaller__Group__0)
		{ after(grammarAccess.getArrayCallerAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFunctionCall
entryRuleFunctionCall
:
{ before(grammarAccess.getFunctionCallRule()); }
	 ruleFunctionCall
{ after(grammarAccess.getFunctionCallRule()); } 
	 EOF 
;

// Rule FunctionCall
ruleFunctionCall 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunctionCallAccess().getAlternatives()); }
		(rule__FunctionCall__Alternatives)
		{ after(grammarAccess.getFunctionCallAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLoad
entryRuleLoad
:
{ before(grammarAccess.getLoadRule()); }
	 ruleLoad
{ after(grammarAccess.getLoadRule()); } 
	 EOF 
;

// Rule Load
ruleLoad 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLoadAccess().getGroup()); }
		(rule__Load__Group__0)
		{ after(grammarAccess.getLoadAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStore
entryRuleStore
:
{ before(grammarAccess.getStoreRule()); }
	 ruleStore
{ after(grammarAccess.getStoreRule()); } 
	 EOF 
;

// Rule Store
ruleStore 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStoreAccess().getGroup()); }
		(rule__Store__Group__0)
		{ after(grammarAccess.getStoreAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExport
entryRuleExport
:
{ before(grammarAccess.getExportRule()); }
	 ruleExport
{ after(grammarAccess.getExportRule()); } 
	 EOF 
;

// Rule Export
ruleExport 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExportAccess().getGroup()); }
		(rule__Export__Group__0)
		{ after(grammarAccess.getExportAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleProcCall
entryRuleProcCall
:
{ before(grammarAccess.getProcCallRule()); }
	 ruleProcCall
{ after(grammarAccess.getProcCallRule()); } 
	 EOF 
;

// Rule ProcCall
ruleProcCall 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getProcCallAccess().getGroup()); }
		(rule__ProcCall__Group__0)
		{ after(grammarAccess.getProcCallAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDepth
entryRuleDepth
:
{ before(grammarAccess.getDepthRule()); }
	 ruleDepth
{ after(grammarAccess.getDepthRule()); } 
	 EOF 
;

// Rule Depth
ruleDepth 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDepthAccess().getGroup()); }
		(rule__Depth__Group__0)
		{ after(grammarAccess.getDepthAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFieldInfo
entryRuleFieldInfo
:
{ before(grammarAccess.getFieldInfoRule()); }
	 ruleFieldInfo
{ after(grammarAccess.getFieldInfoRule()); } 
	 EOF 
;

// Rule FieldInfo
ruleFieldInfo 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFieldInfoAccess().getGroup()); }
		(rule__FieldInfo__Group__0)
		{ after(grammarAccess.getFieldInfoAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExtract
entryRuleExtract
:
{ before(grammarAccess.getExtractRule()); }
	 ruleExtract
{ after(grammarAccess.getExtractRule()); } 
	 EOF 
;

// Rule Extract
ruleExtract 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExtractAccess().getGroup()); }
		(rule__Extract__Group__0)
		{ after(grammarAccess.getExtractAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSelect
entryRuleSelect
:
{ before(grammarAccess.getSelectRule()); }
	 ruleSelect
{ after(grammarAccess.getSelectRule()); } 
	 EOF 
;

// Rule Select
ruleSelect 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSelectAccess().getGroup()); }
		(rule__Select__Group__0)
		{ after(grammarAccess.getSelectAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConcat
entryRuleConcat
:
{ before(grammarAccess.getConcatRule()); }
	 ruleConcat
{ after(grammarAccess.getConcatRule()); } 
	 EOF 
;

// Rule Concat
ruleConcat 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConcatAccess().getGroup()); }
		(rule__Concat__Group__0)
		{ after(grammarAccess.getConcatAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSum
entryRuleSum
:
{ before(grammarAccess.getSumRule()); }
	 ruleSum
{ after(grammarAccess.getSumRule()); } 
	 EOF 
;

// Rule Sum
ruleSum 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSumAccess().getGroup()); }
		(rule__Sum__Group__0)
		{ after(grammarAccess.getSumAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleProduct
entryRuleProduct
:
{ before(grammarAccess.getProductRule()); }
	 ruleProduct
{ after(grammarAccess.getProductRule()); } 
	 EOF 
;

// Rule Product
ruleProduct 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getProductAccess().getGroup()); }
		(rule__Product__Group__0)
		{ after(grammarAccess.getProductAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMean
entryRuleMean
:
{ before(grammarAccess.getMeanRule()); }
	 ruleMean
{ after(grammarAccess.getMeanRule()); } 
	 EOF 
;

// Rule Mean
ruleMean 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMeanAccess().getGroup()); }
		(rule__Mean__Group__0)
		{ after(grammarAccess.getMeanAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleArithmeticAuxiliar
entryRuleArithmeticAuxiliar
:
{ before(grammarAccess.getArithmeticAuxiliarRule()); }
	 ruleArithmeticAuxiliar
{ after(grammarAccess.getArithmeticAuxiliarRule()); } 
	 EOF 
;

// Rule ArithmeticAuxiliar
ruleArithmeticAuxiliar 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getArithmeticAuxiliarAccess().getGroup()); }
		(rule__ArithmeticAuxiliar__Group__0)
		{ after(grammarAccess.getArithmeticAuxiliarAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAdd
entryRuleAdd
:
{ before(grammarAccess.getAddRule()); }
	 ruleAdd
{ after(grammarAccess.getAddRule()); } 
	 EOF 
;

// Rule Add
ruleAdd 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAddAccess().getGroup()); }
		(rule__Add__Group__0)
		{ after(grammarAccess.getAddAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleInsert
entryRuleInsert
:
{ before(grammarAccess.getInsertRule()); }
	 ruleInsert
{ after(grammarAccess.getInsertRule()); } 
	 EOF 
;

// Rule Insert
ruleInsert 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getInsertAccess().getGroup()); }
		(rule__Insert__Group__0)
		{ after(grammarAccess.getInsertAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRename
entryRuleRename
:
{ before(grammarAccess.getRenameRule()); }
	 ruleRename
{ after(grammarAccess.getRenameRule()); } 
	 EOF 
;

// Rule Rename
ruleRename 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRenameAccess().getGroup()); }
		(rule__Rename__Group__0)
		{ after(grammarAccess.getRenameAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleErase
entryRuleErase
:
{ before(grammarAccess.getEraseRule()); }
	 ruleErase
{ after(grammarAccess.getEraseRule()); } 
	 EOF 
;

// Rule Erase
ruleErase 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEraseAccess().getGroup()); }
		(rule__Erase__Group__0)
		{ after(grammarAccess.getEraseAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDelete
entryRuleDelete
:
{ before(grammarAccess.getDeleteRule()); }
	 ruleDelete
{ after(grammarAccess.getDeleteRule()); } 
	 EOF 
;

// Rule Delete
ruleDelete 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDeleteAccess().getGroup()); }
		(rule__Delete__Group__0)
		{ after(grammarAccess.getDeleteAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRemove
entryRuleRemove
:
{ before(grammarAccess.getRemoveRule()); }
	 ruleRemove
{ after(grammarAccess.getRemoveRule()); } 
	 EOF 
;

// Rule Remove
ruleRemove 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRemoveAccess().getGroup()); }
		(rule__Remove__Group__0)
		{ after(grammarAccess.getRemoveAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleArraySpecifier
entryRuleArraySpecifier
:
{ before(grammarAccess.getArraySpecifierRule()); }
	 ruleArraySpecifier
{ after(grammarAccess.getArraySpecifierRule()); } 
	 EOF 
;

// Rule ArraySpecifier
ruleArraySpecifier 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getArraySpecifierAccess().getGroup()); }
		(rule__ArraySpecifier__Group__0)
		{ after(grammarAccess.getArraySpecifierAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConstant
entryRuleConstant
:
{ before(grammarAccess.getConstantRule()); }
	 ruleConstant
{ after(grammarAccess.getConstantRule()); } 
	 EOF 
;

// Rule Constant
ruleConstant 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConstantAccess().getAlternatives()); }
		(rule__Constant__Alternatives)
		{ after(grammarAccess.getConstantAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrimitive
entryRulePrimitive
:
{ before(grammarAccess.getPrimitiveRule()); }
	 rulePrimitive
{ after(grammarAccess.getPrimitiveRule()); } 
	 EOF 
;

// Rule Primitive
rulePrimitive 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrimitiveAccess().getAlternatives()); }
		(rule__Primitive__Alternatives)
		{ after(grammarAccess.getPrimitiveAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleArray
entryRuleArray
:
{ before(grammarAccess.getArrayRule()); }
	 ruleArray
{ after(grammarAccess.getArrayRule()); } 
	 EOF 
;

// Rule Array
ruleArray 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getArrayAccess().getGroup()); }
		(rule__Array__Group__0)
		{ after(grammarAccess.getArrayAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleObject
entryRuleObject
:
{ before(grammarAccess.getObjectRule()); }
	 ruleObject
{ after(grammarAccess.getObjectRule()); } 
	 EOF 
;

// Rule Object
ruleObject 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getObjectAccess().getGroup()); }
		(rule__Object__Group__0)
		{ after(grammarAccess.getObjectAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleField
entryRuleField
:
{ before(grammarAccess.getFieldRule()); }
	 ruleField
{ after(grammarAccess.getFieldRule()); } 
	 EOF 
;

// Rule Field
ruleField 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFieldAccess().getGroup()); }
		(rule__Field__Group__0)
		{ after(grammarAccess.getFieldAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleStatement__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSimpleStatementAccess().getAssignmentParserRuleCall_0_0()); }
		ruleAssignment
		{ after(grammarAccess.getSimpleStatementAccess().getAssignmentParserRuleCall_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getSimpleStatementAccess().getExpressionParserRuleCall_0_1()); }
		ruleExpression
		{ after(grammarAccess.getSimpleStatementAccess().getExpressionParserRuleCall_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getSimpleStatementAccess().getProcCallParserRuleCall_0_2()); }
		ruleProcCall
		{ after(grammarAccess.getSimpleStatementAccess().getProcCallParserRuleCall_0_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EqExpression__Alternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEqExpressionAccess().getEqualsSignEqualsSignKeyword_1_0_0()); }
		'=='
		{ after(grammarAccess.getEqExpressionAccess().getEqualsSignEqualsSignKeyword_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getEqExpressionAccess().getExclamationMarkEqualsSignKeyword_1_0_1()); }
		'!='
		{ after(grammarAccess.getEqExpressionAccess().getExclamationMarkEqualsSignKeyword_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompExpression__Alternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCompExpressionAccess().getGreaterThanSignKeyword_1_0_0()); }
		'>'
		{ after(grammarAccess.getCompExpressionAccess().getGreaterThanSignKeyword_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getCompExpressionAccess().getGreaterThanSignEqualsSignKeyword_1_0_1()); }
		'>='
		{ after(grammarAccess.getCompExpressionAccess().getGreaterThanSignEqualsSignKeyword_1_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getCompExpressionAccess().getLessThanSignKeyword_1_0_2()); }
		'<'
		{ after(grammarAccess.getCompExpressionAccess().getLessThanSignKeyword_1_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getCompExpressionAccess().getLessThanSignEqualsSignKeyword_1_0_3()); }
		'<='
		{ after(grammarAccess.getCompExpressionAccess().getLessThanSignEqualsSignKeyword_1_0_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AddExpression__Alternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAddExpressionAccess().getPlusSignKeyword_1_0_0()); }
		'+'
		{ after(grammarAccess.getAddExpressionAccess().getPlusSignKeyword_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getAddExpressionAccess().getHyphenMinusKeyword_1_0_1()); }
		'-'
		{ after(grammarAccess.getAddExpressionAccess().getHyphenMinusKeyword_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultExpression__Alternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultExpressionAccess().getAsteriskKeyword_1_0_0()); }
		'*'
		{ after(grammarAccess.getMultExpressionAccess().getAsteriskKeyword_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getMultExpressionAccess().getSolidusKeyword_1_0_1()); }
		'/'
		{ after(grammarAccess.getMultExpressionAccess().getSolidusKeyword_1_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getMultExpressionAccess().getPercentSignKeyword_1_0_2()); }
		'%'
		{ after(grammarAccess.getMultExpressionAccess().getPercentSignKeyword_1_0_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryMinusExpression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnaryMinusExpressionAccess().getGroup_0()); }
		(rule__UnaryMinusExpression__Group_0__0)
		{ after(grammarAccess.getUnaryMinusExpressionAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getUnaryMinusExpressionAccess().getValueAssignment_1()); }
		(rule__UnaryMinusExpression__ValueAssignment_1)
		{ after(grammarAccess.getUnaryMinusExpressionAccess().getValueAssignment_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NegationExpression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNegationExpressionAccess().getGroup_0()); }
		(rule__NegationExpression__Group_0__0)
		{ after(grammarAccess.getNegationExpressionAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getNegationExpressionAccess().getValueAssignment_1()); }
		(rule__NegationExpression__ValueAssignment_1)
		{ after(grammarAccess.getNegationExpressionAccess().getValueAssignment_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getVariableCallParserRuleCall_0()); }
		ruleVariableCall
		{ after(grammarAccess.getPrimaryExpressionAccess().getVariableCallParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getConstantParserRuleCall_1()); }
		ruleConstant
		{ after(grammarAccess.getPrimaryExpressionAccess().getConstantParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getFunctionCallParserRuleCall_2()); }
		ruleFunctionCall
		{ after(grammarAccess.getPrimaryExpressionAccess().getFunctionCallParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getGroup_3()); }
		(rule__PrimaryExpression__Group_3__0)
		{ after(grammarAccess.getPrimaryExpressionAccess().getGroup_3()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getFieldInvoquerParserRuleCall_4()); }
		ruleFieldInvoquer
		{ after(grammarAccess.getPrimaryExpressionAccess().getFieldInvoquerParserRuleCall_4()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getGroup_5()); }
		(rule__PrimaryExpression__Group_5__0)
		{ after(grammarAccess.getPrimaryExpressionAccess().getGroup_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AuxiliarCaller__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAuxiliarCallerAccess().getFieldCallerParserRuleCall_0()); }
		ruleFieldCaller
		{ after(grammarAccess.getAuxiliarCallerAccess().getFieldCallerParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getAuxiliarCallerAccess().getArrayCallerParserRuleCall_1()); }
		ruleArrayCaller
		{ after(grammarAccess.getAuxiliarCallerAccess().getArrayCallerParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionCallAccess().getLoadParserRuleCall_0()); }
		ruleLoad
		{ after(grammarAccess.getFunctionCallAccess().getLoadParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getFunctionCallAccess().getStoreParserRuleCall_1()); }
		ruleStore
		{ after(grammarAccess.getFunctionCallAccess().getStoreParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getFunctionCallAccess().getExportParserRuleCall_2()); }
		ruleExport
		{ after(grammarAccess.getFunctionCallAccess().getExportParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getFunctionCallAccess().getDepthParserRuleCall_3()); }
		ruleDepth
		{ after(grammarAccess.getFunctionCallAccess().getDepthParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getFunctionCallAccess().getFieldInfoParserRuleCall_4()); }
		ruleFieldInfo
		{ after(grammarAccess.getFunctionCallAccess().getFieldInfoParserRuleCall_4()); }
	)
	|
	(
		{ before(grammarAccess.getFunctionCallAccess().getExtractParserRuleCall_5()); }
		ruleExtract
		{ after(grammarAccess.getFunctionCallAccess().getExtractParserRuleCall_5()); }
	)
	|
	(
		{ before(grammarAccess.getFunctionCallAccess().getSelectParserRuleCall_6()); }
		ruleSelect
		{ after(grammarAccess.getFunctionCallAccess().getSelectParserRuleCall_6()); }
	)
	|
	(
		{ before(grammarAccess.getFunctionCallAccess().getConcatParserRuleCall_7()); }
		ruleConcat
		{ after(grammarAccess.getFunctionCallAccess().getConcatParserRuleCall_7()); }
	)
	|
	(
		{ before(grammarAccess.getFunctionCallAccess().getSumParserRuleCall_8()); }
		ruleSum
		{ after(grammarAccess.getFunctionCallAccess().getSumParserRuleCall_8()); }
	)
	|
	(
		{ before(grammarAccess.getFunctionCallAccess().getProductParserRuleCall_9()); }
		ruleProduct
		{ after(grammarAccess.getFunctionCallAccess().getProductParserRuleCall_9()); }
	)
	|
	(
		{ before(grammarAccess.getFunctionCallAccess().getMeanParserRuleCall_10()); }
		ruleMean
		{ after(grammarAccess.getFunctionCallAccess().getMeanParserRuleCall_10()); }
	)
	|
	(
		{ before(grammarAccess.getFunctionCallAccess().getAddParserRuleCall_11()); }
		ruleAdd
		{ after(grammarAccess.getFunctionCallAccess().getAddParserRuleCall_11()); }
	)
	|
	(
		{ before(grammarAccess.getFunctionCallAccess().getInsertParserRuleCall_12()); }
		ruleInsert
		{ after(grammarAccess.getFunctionCallAccess().getInsertParserRuleCall_12()); }
	)
	|
	(
		{ before(grammarAccess.getFunctionCallAccess().getRenameParserRuleCall_13()); }
		ruleRename
		{ after(grammarAccess.getFunctionCallAccess().getRenameParserRuleCall_13()); }
	)
	|
	(
		{ before(grammarAccess.getFunctionCallAccess().getRemoveParserRuleCall_14()); }
		ruleRemove
		{ after(grammarAccess.getFunctionCallAccess().getRemoveParserRuleCall_14()); }
	)
	|
	(
		{ before(grammarAccess.getFunctionCallAccess().getEraseParserRuleCall_15()); }
		ruleErase
		{ after(grammarAccess.getFunctionCallAccess().getEraseParserRuleCall_15()); }
	)
	|
	(
		{ before(grammarAccess.getFunctionCallAccess().getDeleteParserRuleCall_16()); }
		ruleDelete
		{ after(grammarAccess.getFunctionCallAccess().getDeleteParserRuleCall_16()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstantAccess().getGroup_0()); }
		(rule__Constant__Group_0__0)
		{ after(grammarAccess.getConstantAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getConstantAccess().getArrayParserRuleCall_1()); }
		ruleArray
		{ after(grammarAccess.getConstantAccess().getArrayParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getConstantAccess().getObjectParserRuleCall_2()); }
		ruleObject
		{ after(grammarAccess.getConstantAccess().getObjectParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primitive__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimitiveAccess().getSTRINGTerminalRuleCall_0()); }
		RULE_STRING
		{ after(grammarAccess.getPrimitiveAccess().getSTRINGTerminalRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getPrimitiveAccess().getNUMBERTerminalRuleCall_1()); }
		RULE_NUMBER
		{ after(grammarAccess.getPrimitiveAccess().getNUMBERTerminalRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getPrimitiveAccess().getBOOLTerminalRuleCall_2()); }
		RULE_BOOL
		{ after(grammarAccess.getPrimitiveAccess().getBOOLTerminalRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getPrimitiveAccess().getNULLTerminalRuleCall_3()); }
		RULE_NULL
		{ after(grammarAccess.getPrimitiveAccess().getNULLTerminalRuleCall_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleStatement__Group__0__Impl
	rule__SimpleStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleStatementAccess().getAlternatives_0()); }
	(rule__SimpleStatement__Alternatives_0)
	{ after(grammarAccess.getSimpleStatementAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleStatement__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleStatementAccess().getSemicolonKeyword_1()); }
	';'
	{ after(grammarAccess.getSimpleStatementAccess().getSemicolonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Assignment__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assignment__Group__0__Impl
	rule__Assignment__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignmentAccess().getLeftHandSideAssignment_0()); }
	(rule__Assignment__LeftHandSideAssignment_0)
	{ after(grammarAccess.getAssignmentAccess().getLeftHandSideAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assignment__Group__1__Impl
	rule__Assignment__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignmentAccess().getEqualsSignKeyword_1()); }
	'='
	{ after(grammarAccess.getAssignmentAccess().getEqualsSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assignment__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignmentAccess().getRightHandSideAssignment_2()); }
	(rule__Assignment__RightHandSideAssignment_2)
	{ after(grammarAccess.getAssignmentAccess().getRightHandSideAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrExpression__Group__0__Impl
	rule__OrExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrExpressionAccess().getValuesAssignment_0()); }
	(rule__OrExpression__ValuesAssignment_0)
	{ after(grammarAccess.getOrExpressionAccess().getValuesAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrExpressionAccess().getGroup_1()); }
	(rule__OrExpression__Group_1__0)*
	{ after(grammarAccess.getOrExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrExpression__Group_1__0__Impl
	rule__OrExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrExpressionAccess().getORKeyword_1_0()); }
	'OR'
	{ after(grammarAccess.getOrExpressionAccess().getORKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrExpressionAccess().getValuesAssignment_1_1()); }
	(rule__OrExpression__ValuesAssignment_1_1)
	{ after(grammarAccess.getOrExpressionAccess().getValuesAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndExpression__Group__0__Impl
	rule__AndExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndExpressionAccess().getValuesAssignment_0()); }
	(rule__AndExpression__ValuesAssignment_0)
	{ after(grammarAccess.getAndExpressionAccess().getValuesAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndExpressionAccess().getGroup_1()); }
	(rule__AndExpression__Group_1__0)*
	{ after(grammarAccess.getAndExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndExpression__Group_1__0__Impl
	rule__AndExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndExpressionAccess().getANDKeyword_1_0()); }
	'AND'
	{ after(grammarAccess.getAndExpressionAccess().getANDKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndExpressionAccess().getValuesAssignment_1_1()); }
	(rule__AndExpression__ValuesAssignment_1_1)
	{ after(grammarAccess.getAndExpressionAccess().getValuesAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EqExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EqExpression__Group__0__Impl
	rule__EqExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EqExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqExpressionAccess().getValuesAssignment_0()); }
	(rule__EqExpression__ValuesAssignment_0)
	{ after(grammarAccess.getEqExpressionAccess().getValuesAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EqExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EqExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EqExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqExpressionAccess().getGroup_1()); }
	(rule__EqExpression__Group_1__0)*
	{ after(grammarAccess.getEqExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EqExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EqExpression__Group_1__0__Impl
	rule__EqExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EqExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqExpressionAccess().getAlternatives_1_0()); }
	(rule__EqExpression__Alternatives_1_0)
	{ after(grammarAccess.getEqExpressionAccess().getAlternatives_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EqExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EqExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EqExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqExpressionAccess().getValuesAssignment_1_1()); }
	(rule__EqExpression__ValuesAssignment_1_1)
	{ after(grammarAccess.getEqExpressionAccess().getValuesAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CompExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CompExpression__Group__0__Impl
	rule__CompExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CompExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompExpressionAccess().getValuesAssignment_0()); }
	(rule__CompExpression__ValuesAssignment_0)
	{ after(grammarAccess.getCompExpressionAccess().getValuesAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CompExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CompExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompExpressionAccess().getGroup_1()); }
	(rule__CompExpression__Group_1__0)*
	{ after(grammarAccess.getCompExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CompExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CompExpression__Group_1__0__Impl
	rule__CompExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CompExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompExpressionAccess().getAlternatives_1_0()); }
	(rule__CompExpression__Alternatives_1_0)
	{ after(grammarAccess.getCompExpressionAccess().getAlternatives_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CompExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CompExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompExpressionAccess().getValuesAssignment_1_1()); }
	(rule__CompExpression__ValuesAssignment_1_1)
	{ after(grammarAccess.getCompExpressionAccess().getValuesAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AddExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AddExpression__Group__0__Impl
	rule__AddExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AddExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAddExpressionAccess().getValuesAssignment_0()); }
	(rule__AddExpression__ValuesAssignment_0)
	{ after(grammarAccess.getAddExpressionAccess().getValuesAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AddExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AddExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AddExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAddExpressionAccess().getGroup_1()); }
	(rule__AddExpression__Group_1__0)*
	{ after(grammarAccess.getAddExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AddExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AddExpression__Group_1__0__Impl
	rule__AddExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AddExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAddExpressionAccess().getAlternatives_1_0()); }
	(rule__AddExpression__Alternatives_1_0)
	{ after(grammarAccess.getAddExpressionAccess().getAlternatives_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AddExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AddExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AddExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAddExpressionAccess().getValuesAssignment_1_1()); }
	(rule__AddExpression__ValuesAssignment_1_1)
	{ after(grammarAccess.getAddExpressionAccess().getValuesAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MultExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultExpression__Group__0__Impl
	rule__MultExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultExpressionAccess().getValuesAssignment_0()); }
	(rule__MultExpression__ValuesAssignment_0)
	{ after(grammarAccess.getMultExpressionAccess().getValuesAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultExpressionAccess().getGroup_1()); }
	(rule__MultExpression__Group_1__0)*
	{ after(grammarAccess.getMultExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MultExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultExpression__Group_1__0__Impl
	rule__MultExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultExpressionAccess().getAlternatives_1_0()); }
	(rule__MultExpression__Alternatives_1_0)
	{ after(grammarAccess.getMultExpressionAccess().getAlternatives_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultExpressionAccess().getValuesAssignment_1_1()); }
	(rule__MultExpression__ValuesAssignment_1_1)
	{ after(grammarAccess.getMultExpressionAccess().getValuesAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__UnaryMinusExpression__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UnaryMinusExpression__Group_0__0__Impl
	rule__UnaryMinusExpression__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryMinusExpression__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnaryMinusExpressionAccess().getHyphenMinusKeyword_0_0()); }
	'-'
	{ after(grammarAccess.getUnaryMinusExpressionAccess().getHyphenMinusKeyword_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryMinusExpression__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UnaryMinusExpression__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryMinusExpression__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnaryMinusExpressionAccess().getValueAssignment_0_1()); }
	(rule__UnaryMinusExpression__ValueAssignment_0_1)
	{ after(grammarAccess.getUnaryMinusExpressionAccess().getValueAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NegationExpression__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NegationExpression__Group_0__0__Impl
	rule__NegationExpression__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NegationExpression__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNegationExpressionAccess().getExclamationMarkKeyword_0_0()); }
	'!'
	{ after(grammarAccess.getNegationExpressionAccess().getExclamationMarkKeyword_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NegationExpression__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NegationExpression__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NegationExpression__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNegationExpressionAccess().getValueAssignment_0_1()); }
	(rule__NegationExpression__ValueAssignment_0_1)
	{ after(grammarAccess.getNegationExpressionAccess().getValueAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryExpression__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExpression__Group_3__0__Impl
	rule__PrimaryExpression__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_3_0()); }
	'('
	{ after(grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExpression__Group_3__1__Impl
	rule__PrimaryExpression__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExpressionAccess().getExpressionParserRuleCall_3_1()); }
	ruleExpression
	{ after(grammarAccess.getPrimaryExpressionAccess().getExpressionParserRuleCall_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_3__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExpression__Group_3__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_3__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_3_2()); }
	')'
	{ after(grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_3_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryExpression__Group_5__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExpression__Group_5__0__Impl
	rule__PrimaryExpression__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_5__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExpressionAccess().getPrimaryExpressionAction_5_0()); }
	()
	{ after(grammarAccess.getPrimaryExpressionAccess().getPrimaryExpressionAction_5_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_5__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExpression__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_5__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExpressionAccess().getPointerParserRuleCall_5_1()); }
	rulePointer
	{ after(grammarAccess.getPrimaryExpressionAccess().getPointerParserRuleCall_5_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VariableCall__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableCall__Group__0__Impl
	rule__VariableCall__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableCall__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableCallAccess().getNameAssignment_0()); }
	(rule__VariableCall__NameAssignment_0)
	{ after(grammarAccess.getVariableCallAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableCall__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableCall__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableCall__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableCallAccess().getCallerAssignment_1()); }
	(rule__VariableCall__CallerAssignment_1)*
	{ after(grammarAccess.getVariableCallAccess().getCallerAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FieldCaller__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FieldCaller__Group__0__Impl
	rule__FieldCaller__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FieldCaller__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFieldCallerAccess().getTildeKeyword_0()); }
	'~'
	{ after(grammarAccess.getFieldCallerAccess().getTildeKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FieldCaller__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FieldCaller__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FieldCaller__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFieldCallerAccess().getKeyAssignment_1()); }
	(rule__FieldCaller__KeyAssignment_1)
	{ after(grammarAccess.getFieldCallerAccess().getKeyAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayCaller__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArrayCaller__Group__0__Impl
	rule__ArrayCaller__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayCaller__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArrayCallerAccess().getLeftSquareBracketKeyword_0()); }
	'['
	{ after(grammarAccess.getArrayCallerAccess().getLeftSquareBracketKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayCaller__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArrayCaller__Group__1__Impl
	rule__ArrayCaller__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayCaller__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArrayCallerAccess().getIndexAssignment_1()); }
	(rule__ArrayCaller__IndexAssignment_1)
	{ after(grammarAccess.getArrayCallerAccess().getIndexAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayCaller__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArrayCaller__Group__2__Impl
	rule__ArrayCaller__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayCaller__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArrayCallerAccess().getGroup_2()); }
	(rule__ArrayCaller__Group_2__0)*
	{ after(grammarAccess.getArrayCallerAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayCaller__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArrayCaller__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayCaller__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArrayCallerAccess().getRightSquareBracketKeyword_3()); }
	']'
	{ after(grammarAccess.getArrayCallerAccess().getRightSquareBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayCaller__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArrayCaller__Group_2__0__Impl
	rule__ArrayCaller__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayCaller__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArrayCallerAccess().getCommaKeyword_2_0()); }
	','
	{ after(grammarAccess.getArrayCallerAccess().getCommaKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayCaller__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArrayCaller__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayCaller__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArrayCallerAccess().getIndexAssignment_2_1()); }
	(rule__ArrayCaller__IndexAssignment_2_1)
	{ after(grammarAccess.getArrayCallerAccess().getIndexAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Load__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Load__Group__0__Impl
	rule__Load__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Load__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoadAccess().getLOADKeyword_0()); }
	'LOAD'
	{ after(grammarAccess.getLoadAccess().getLOADKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Load__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Load__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Load__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoadAccess().getFileNameAssignment_1()); }
	(rule__Load__FileNameAssignment_1)
	{ after(grammarAccess.getLoadAccess().getFileNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Store__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Store__Group__0__Impl
	rule__Store__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Store__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStoreAccess().getSTOREKeyword_0()); }
	'STORE'
	{ after(grammarAccess.getStoreAccess().getSTOREKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Store__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Store__Group__1__Impl
	rule__Store__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Store__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStoreAccess().getExpressionAssignment_1()); }
	(rule__Store__ExpressionAssignment_1)
	{ after(grammarAccess.getStoreAccess().getExpressionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Store__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Store__Group__2__Impl
	rule__Store__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Store__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStoreAccess().getINKeyword_2()); }
	'IN'
	{ after(grammarAccess.getStoreAccess().getINKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Store__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Store__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Store__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStoreAccess().getFileNameAssignment_3()); }
	(rule__Store__FileNameAssignment_3)
	{ after(grammarAccess.getStoreAccess().getFileNameAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Export__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Export__Group__0__Impl
	rule__Export__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Export__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExportAccess().getEXPORT_CSVKeyword_0()); }
	'EXPORT_CSV'
	{ after(grammarAccess.getExportAccess().getEXPORT_CSVKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Export__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Export__Group__1__Impl
	rule__Export__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Export__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExportAccess().getExpressionAssignment_1()); }
	(rule__Export__ExpressionAssignment_1)
	{ after(grammarAccess.getExportAccess().getExpressionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Export__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Export__Group__2__Impl
	rule__Export__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Export__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExportAccess().getINKeyword_2()); }
	'IN'
	{ after(grammarAccess.getExportAccess().getINKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Export__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Export__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Export__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExportAccess().getFileNameAssignment_3()); }
	(rule__Export__FileNameAssignment_3)
	{ after(grammarAccess.getExportAccess().getFileNameAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ProcCall__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProcCall__Group__0__Impl
	rule__ProcCall__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcCall__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcCallAccess().getPRINTKeyword_0()); }
	'PRINT'
	{ after(grammarAccess.getProcCallAccess().getPRINTKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcCall__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProcCall__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcCall__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcCallAccess().getExpressionAssignment_1()); }
	(rule__ProcCall__ExpressionAssignment_1)
	{ after(grammarAccess.getProcCallAccess().getExpressionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Depth__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Depth__Group__0__Impl
	rule__Depth__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Depth__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDepthAccess().getGET_DEPTHKeyword_0()); }
	'GET_DEPTH'
	{ after(grammarAccess.getDepthAccess().getGET_DEPTHKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Depth__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Depth__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Depth__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDepthAccess().getExpressionAssignment_1()); }
	(rule__Depth__ExpressionAssignment_1)
	{ after(grammarAccess.getDepthAccess().getExpressionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FieldInfo__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FieldInfo__Group__0__Impl
	rule__FieldInfo__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FieldInfo__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFieldInfoAccess().getGET_INFOSKeyword_0()); }
	'GET_INFOS'
	{ after(grammarAccess.getFieldInfoAccess().getGET_INFOSKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FieldInfo__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FieldInfo__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FieldInfo__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFieldInfoAccess().getExpressionAssignment_1()); }
	(rule__FieldInfo__ExpressionAssignment_1)
	{ after(grammarAccess.getFieldInfoAccess().getExpressionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Extract__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Extract__Group__0__Impl
	rule__Extract__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Extract__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExtractAccess().getEXTRACTKeyword_0()); }
	'EXTRACT'
	{ after(grammarAccess.getExtractAccess().getEXTRACTKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Extract__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Extract__Group__1__Impl
	rule__Extract__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Extract__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExtractAccess().getValueAssignment_1()); }
	(rule__Extract__ValueAssignment_1)
	{ after(grammarAccess.getExtractAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Extract__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Extract__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Extract__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExtractAccess().getAuxiliarAssignment_2()); }
	(rule__Extract__AuxiliarAssignment_2)
	{ after(grammarAccess.getExtractAccess().getAuxiliarAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Select__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Select__Group__0__Impl
	rule__Select__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectAccess().getSELECTKeyword_0()); }
	'SELECT'
	{ after(grammarAccess.getSelectAccess().getSELECTKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Select__Group__1__Impl
	rule__Select__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectAccess().getFieldsAssignment_1()); }
	(rule__Select__FieldsAssignment_1)
	{ after(grammarAccess.getSelectAccess().getFieldsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Select__Group__2__Impl
	rule__Select__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectAccess().getGroup_2()); }
	(rule__Select__Group_2__0)*
	{ after(grammarAccess.getSelectAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Select__Group__3__Impl
	rule__Select__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectAccess().getFROMKeyword_3()); }
	'FROM'
	{ after(grammarAccess.getSelectAccess().getFROMKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Select__Group__4__Impl
	rule__Select__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectAccess().getFromAssignment_4()); }
	(rule__Select__FromAssignment_4)
	{ after(grammarAccess.getSelectAccess().getFromAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Select__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectAccess().getGroup_5()); }
	(rule__Select__Group_5__0)?
	{ after(grammarAccess.getSelectAccess().getGroup_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Select__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Select__Group_2__0__Impl
	rule__Select__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectAccess().getCommaKeyword_2_0()); }
	','
	{ after(grammarAccess.getSelectAccess().getCommaKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Select__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectAccess().getFieldsAssignment_2_1()); }
	(rule__Select__FieldsAssignment_2_1)
	{ after(grammarAccess.getSelectAccess().getFieldsAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Select__Group_5__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Select__Group_5__0__Impl
	rule__Select__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group_5__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectAccess().getWHEREKeyword_5_0()); }
	'WHERE'
	{ after(grammarAccess.getSelectAccess().getWHEREKeyword_5_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group_5__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Select__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group_5__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectAccess().getConditionAssignment_5_1()); }
	(rule__Select__ConditionAssignment_5_1)
	{ after(grammarAccess.getSelectAccess().getConditionAssignment_5_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Concat__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Concat__Group__0__Impl
	rule__Concat__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Concat__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConcatAccess().getCONCATKeyword_0()); }
	'CONCAT'
	{ after(grammarAccess.getConcatAccess().getCONCATKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Concat__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Concat__Group__1__Impl
	rule__Concat__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Concat__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConcatAccess().getFirstAssignment_1()); }
	(rule__Concat__FirstAssignment_1)
	{ after(grammarAccess.getConcatAccess().getFirstAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Concat__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Concat__Group__2__Impl
	rule__Concat__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Concat__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConcatAccess().getWITHKeyword_2()); }
	'WITH'
	{ after(grammarAccess.getConcatAccess().getWITHKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Concat__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Concat__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Concat__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConcatAccess().getSecondAssignment_3()); }
	(rule__Concat__SecondAssignment_3)
	{ after(grammarAccess.getConcatAccess().getSecondAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Sum__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sum__Group__0__Impl
	rule__Sum__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Sum__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSumAccess().getSUMKeyword_0()); }
	'SUM'
	{ after(grammarAccess.getSumAccess().getSUMKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sum__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sum__Group__1__Impl
	rule__Sum__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Sum__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSumAccess().getExpressionAssignment_1()); }
	(rule__Sum__ExpressionAssignment_1)
	{ after(grammarAccess.getSumAccess().getExpressionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sum__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sum__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Sum__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSumAccess().getAuxiliarAssignment_2()); }
	(rule__Sum__AuxiliarAssignment_2)
	{ after(grammarAccess.getSumAccess().getAuxiliarAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Product__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Product__Group__0__Impl
	rule__Product__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Product__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProductAccess().getPRODUCTKeyword_0()); }
	'PRODUCT'
	{ after(grammarAccess.getProductAccess().getPRODUCTKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Product__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Product__Group__1__Impl
	rule__Product__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Product__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProductAccess().getExpressionAssignment_1()); }
	(rule__Product__ExpressionAssignment_1)
	{ after(grammarAccess.getProductAccess().getExpressionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Product__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Product__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Product__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProductAccess().getAuxiliarAssignment_2()); }
	(rule__Product__AuxiliarAssignment_2)
	{ after(grammarAccess.getProductAccess().getAuxiliarAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Mean__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Mean__Group__0__Impl
	rule__Mean__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Mean__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMeanAccess().getMEANKeyword_0()); }
	'MEAN'
	{ after(grammarAccess.getMeanAccess().getMEANKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Mean__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Mean__Group__1__Impl
	rule__Mean__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Mean__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMeanAccess().getExpressionAssignment_1()); }
	(rule__Mean__ExpressionAssignment_1)
	{ after(grammarAccess.getMeanAccess().getExpressionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Mean__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Mean__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Mean__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMeanAccess().getAuxiliarAssignment_2()); }
	(rule__Mean__AuxiliarAssignment_2)
	{ after(grammarAccess.getMeanAccess().getAuxiliarAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ArithmeticAuxiliar__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArithmeticAuxiliar__Group__0__Impl
	rule__ArithmeticAuxiliar__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithmeticAuxiliar__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArithmeticAuxiliarAccess().getArithmeticAuxiliarAction_0()); }
	()
	{ after(grammarAccess.getArithmeticAuxiliarAccess().getArithmeticAuxiliarAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithmeticAuxiliar__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArithmeticAuxiliar__Group__1__Impl
	rule__ArithmeticAuxiliar__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithmeticAuxiliar__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArithmeticAuxiliarAccess().getGroup_1()); }
	(rule__ArithmeticAuxiliar__Group_1__0)?
	{ after(grammarAccess.getArithmeticAuxiliarAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithmeticAuxiliar__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArithmeticAuxiliar__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithmeticAuxiliar__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArithmeticAuxiliarAccess().getGroup_2()); }
	(rule__ArithmeticAuxiliar__Group_2__0)?
	{ after(grammarAccess.getArithmeticAuxiliarAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ArithmeticAuxiliar__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArithmeticAuxiliar__Group_1__0__Impl
	rule__ArithmeticAuxiliar__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithmeticAuxiliar__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArithmeticAuxiliarAccess().getONKeyword_1_0()); }
	'ON'
	{ after(grammarAccess.getArithmeticAuxiliarAccess().getONKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithmeticAuxiliar__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArithmeticAuxiliar__Group_1__1__Impl
	rule__ArithmeticAuxiliar__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithmeticAuxiliar__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArithmeticAuxiliarAccess().getFieldsAssignment_1_1()); }
	(rule__ArithmeticAuxiliar__FieldsAssignment_1_1)
	{ after(grammarAccess.getArithmeticAuxiliarAccess().getFieldsAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithmeticAuxiliar__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArithmeticAuxiliar__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithmeticAuxiliar__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArithmeticAuxiliarAccess().getGroup_1_2()); }
	(rule__ArithmeticAuxiliar__Group_1_2__0)*
	{ after(grammarAccess.getArithmeticAuxiliarAccess().getGroup_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ArithmeticAuxiliar__Group_1_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArithmeticAuxiliar__Group_1_2__0__Impl
	rule__ArithmeticAuxiliar__Group_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithmeticAuxiliar__Group_1_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArithmeticAuxiliarAccess().getCommaKeyword_1_2_0()); }
	','
	{ after(grammarAccess.getArithmeticAuxiliarAccess().getCommaKeyword_1_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithmeticAuxiliar__Group_1_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArithmeticAuxiliar__Group_1_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithmeticAuxiliar__Group_1_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArithmeticAuxiliarAccess().getFieldsAssignment_1_2_1()); }
	(rule__ArithmeticAuxiliar__FieldsAssignment_1_2_1)
	{ after(grammarAccess.getArithmeticAuxiliarAccess().getFieldsAssignment_1_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ArithmeticAuxiliar__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArithmeticAuxiliar__Group_2__0__Impl
	rule__ArithmeticAuxiliar__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithmeticAuxiliar__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArithmeticAuxiliarAccess().getWHEREKeyword_2_0()); }
	'WHERE'
	{ after(grammarAccess.getArithmeticAuxiliarAccess().getWHEREKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithmeticAuxiliar__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArithmeticAuxiliar__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithmeticAuxiliar__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArithmeticAuxiliarAccess().getConditionAssignment_2_1()); }
	(rule__ArithmeticAuxiliar__ConditionAssignment_2_1)
	{ after(grammarAccess.getArithmeticAuxiliarAccess().getConditionAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Add__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Add__Group__0__Impl
	rule__Add__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Add__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAddAccess().getADDKeyword_0()); }
	'ADD'
	{ after(grammarAccess.getAddAccess().getADDKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Add__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Add__Group__1__Impl
	rule__Add__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Add__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAddAccess().getValueAssignment_1()); }
	(rule__Add__ValueAssignment_1)
	{ after(grammarAccess.getAddAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Add__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Add__Group__2__Impl
	rule__Add__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Add__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAddAccess().getINKeyword_2()); }
	'IN'
	{ after(grammarAccess.getAddAccess().getINKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Add__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Add__Group__3__Impl
	rule__Add__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Add__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAddAccess().getVariableAssignment_3()); }
	(rule__Add__VariableAssignment_3)
	{ after(grammarAccess.getAddAccess().getVariableAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Add__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Add__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Add__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAddAccess().getGroup_4()); }
	(rule__Add__Group_4__0)?
	{ after(grammarAccess.getAddAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Add__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Add__Group_4__0__Impl
	rule__Add__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Add__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAddAccess().getONKeyword_4_0()); }
	'ON'
	{ after(grammarAccess.getAddAccess().getONKeyword_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Add__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Add__Group_4__1__Impl
	rule__Add__Group_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Add__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAddAccess().getFieldsAssignment_4_1()); }
	(rule__Add__FieldsAssignment_4_1)
	{ after(grammarAccess.getAddAccess().getFieldsAssignment_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Add__Group_4__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Add__Group_4__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Add__Group_4__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAddAccess().getGroup_4_2()); }
	(rule__Add__Group_4_2__0)*
	{ after(grammarAccess.getAddAccess().getGroup_4_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Add__Group_4_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Add__Group_4_2__0__Impl
	rule__Add__Group_4_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Add__Group_4_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAddAccess().getCommaKeyword_4_2_0()); }
	','
	{ after(grammarAccess.getAddAccess().getCommaKeyword_4_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Add__Group_4_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Add__Group_4_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Add__Group_4_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAddAccess().getFieldsAssignment_4_2_1()); }
	(rule__Add__FieldsAssignment_4_2_1)
	{ after(grammarAccess.getAddAccess().getFieldsAssignment_4_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Insert__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Insert__Group__0__Impl
	rule__Insert__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Insert__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInsertAccess().getINSERTKeyword_0()); }
	'INSERT'
	{ after(grammarAccess.getInsertAccess().getINSERTKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Insert__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Insert__Group__1__Impl
	rule__Insert__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Insert__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInsertAccess().getValueAssignment_1()); }
	(rule__Insert__ValueAssignment_1)
	{ after(grammarAccess.getInsertAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Insert__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Insert__Group__2__Impl
	rule__Insert__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Insert__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInsertAccess().getINKeyword_2()); }
	'IN'
	{ after(grammarAccess.getInsertAccess().getINKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Insert__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Insert__Group__3__Impl
	rule__Insert__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Insert__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInsertAccess().getVariableAssignment_3()); }
	(rule__Insert__VariableAssignment_3)
	{ after(grammarAccess.getInsertAccess().getVariableAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Insert__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Insert__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Insert__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInsertAccess().getSpecifierAssignment_4()); }
	(rule__Insert__SpecifierAssignment_4)
	{ after(grammarAccess.getInsertAccess().getSpecifierAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Rename__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rename__Group__0__Impl
	rule__Rename__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Rename__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRenameAccess().getRENAMEKeyword_0()); }
	'RENAME'
	{ after(grammarAccess.getRenameAccess().getRENAMEKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rename__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rename__Group__1__Impl
	rule__Rename__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Rename__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRenameAccess().getCallAssignment_1()); }
	(rule__Rename__CallAssignment_1)
	{ after(grammarAccess.getRenameAccess().getCallAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rename__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rename__Group__2__Impl
	rule__Rename__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Rename__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRenameAccess().getONKeyword_2()); }
	'ON'
	{ after(grammarAccess.getRenameAccess().getONKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rename__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rename__Group__3__Impl
	rule__Rename__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Rename__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRenameAccess().getFieldsAssignment_3()); }
	(rule__Rename__FieldsAssignment_3)
	{ after(grammarAccess.getRenameAccess().getFieldsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rename__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rename__Group__4__Impl
	rule__Rename__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Rename__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRenameAccess().getGroup_4()); }
	(rule__Rename__Group_4__0)*
	{ after(grammarAccess.getRenameAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rename__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rename__Group__5__Impl
	rule__Rename__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Rename__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRenameAccess().getTOKeyword_5()); }
	'TO'
	{ after(grammarAccess.getRenameAccess().getTOKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rename__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rename__Group__6__Impl
	rule__Rename__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Rename__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRenameAccess().getNfieldsAssignment_6()); }
	(rule__Rename__NfieldsAssignment_6)
	{ after(grammarAccess.getRenameAccess().getNfieldsAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rename__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rename__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Rename__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRenameAccess().getGroup_7()); }
	(rule__Rename__Group_7__0)*
	{ after(grammarAccess.getRenameAccess().getGroup_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Rename__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rename__Group_4__0__Impl
	rule__Rename__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Rename__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRenameAccess().getCommaKeyword_4_0()); }
	','
	{ after(grammarAccess.getRenameAccess().getCommaKeyword_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rename__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rename__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Rename__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRenameAccess().getFieldsAssignment_4_1()); }
	(rule__Rename__FieldsAssignment_4_1)
	{ after(grammarAccess.getRenameAccess().getFieldsAssignment_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Rename__Group_7__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rename__Group_7__0__Impl
	rule__Rename__Group_7__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Rename__Group_7__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRenameAccess().getCommaKeyword_7_0()); }
	','
	{ after(grammarAccess.getRenameAccess().getCommaKeyword_7_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rename__Group_7__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rename__Group_7__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Rename__Group_7__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRenameAccess().getNfieldsAssignment_7_1()); }
	(rule__Rename__NfieldsAssignment_7_1)
	{ after(grammarAccess.getRenameAccess().getNfieldsAssignment_7_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Erase__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Erase__Group__0__Impl
	rule__Erase__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Erase__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEraseAccess().getERASEKeyword_0()); }
	'ERASE'
	{ after(grammarAccess.getEraseAccess().getERASEKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Erase__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Erase__Group__1__Impl
	rule__Erase__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Erase__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEraseAccess().getValueAssignment_1()); }
	(rule__Erase__ValueAssignment_1)
	{ after(grammarAccess.getEraseAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Erase__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Erase__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Erase__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEraseAccess().getGroup_2()); }
	(rule__Erase__Group_2__0)?
	{ after(grammarAccess.getEraseAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Erase__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Erase__Group_2__0__Impl
	rule__Erase__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Erase__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEraseAccess().getONKeyword_2_0()); }
	'ON'
	{ after(grammarAccess.getEraseAccess().getONKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Erase__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Erase__Group_2__1__Impl
	rule__Erase__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Erase__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEraseAccess().getFieldsAssignment_2_1()); }
	(rule__Erase__FieldsAssignment_2_1)
	{ after(grammarAccess.getEraseAccess().getFieldsAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Erase__Group_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Erase__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Erase__Group_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEraseAccess().getGroup_2_2()); }
	(rule__Erase__Group_2_2__0)*
	{ after(grammarAccess.getEraseAccess().getGroup_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Erase__Group_2_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Erase__Group_2_2__0__Impl
	rule__Erase__Group_2_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Erase__Group_2_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEraseAccess().getCommaKeyword_2_2_0()); }
	','
	{ after(grammarAccess.getEraseAccess().getCommaKeyword_2_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Erase__Group_2_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Erase__Group_2_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Erase__Group_2_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEraseAccess().getFieldsAssignment_2_2_1()); }
	(rule__Erase__FieldsAssignment_2_2_1)
	{ after(grammarAccess.getEraseAccess().getFieldsAssignment_2_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Delete__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Delete__Group__0__Impl
	rule__Delete__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Delete__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeleteAccess().getDELETEKeyword_0()); }
	'DELETE'
	{ after(grammarAccess.getDeleteAccess().getDELETEKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Delete__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Delete__Group__1__Impl
	rule__Delete__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Delete__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeleteAccess().getFieldsAssignment_1()); }
	(rule__Delete__FieldsAssignment_1)
	{ after(grammarAccess.getDeleteAccess().getFieldsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Delete__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Delete__Group__2__Impl
	rule__Delete__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Delete__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeleteAccess().getGroup_2()); }
	(rule__Delete__Group_2__0)*
	{ after(grammarAccess.getDeleteAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Delete__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Delete__Group__3__Impl
	rule__Delete__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Delete__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeleteAccess().getFROMKeyword_3()); }
	'FROM'
	{ after(grammarAccess.getDeleteAccess().getFROMKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Delete__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Delete__Group__4__Impl
	rule__Delete__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Delete__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeleteAccess().getFromAssignment_4()); }
	(rule__Delete__FromAssignment_4)
	{ after(grammarAccess.getDeleteAccess().getFromAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Delete__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Delete__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Delete__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeleteAccess().getGroup_5()); }
	(rule__Delete__Group_5__0)?
	{ after(grammarAccess.getDeleteAccess().getGroup_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Delete__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Delete__Group_2__0__Impl
	rule__Delete__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Delete__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeleteAccess().getCommaKeyword_2_0()); }
	','
	{ after(grammarAccess.getDeleteAccess().getCommaKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Delete__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Delete__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Delete__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeleteAccess().getFieldsAssignment_2_1()); }
	(rule__Delete__FieldsAssignment_2_1)
	{ after(grammarAccess.getDeleteAccess().getFieldsAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Delete__Group_5__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Delete__Group_5__0__Impl
	rule__Delete__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Delete__Group_5__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeleteAccess().getWHEREKeyword_5_0()); }
	'WHERE'
	{ after(grammarAccess.getDeleteAccess().getWHEREKeyword_5_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Delete__Group_5__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Delete__Group_5__1__Impl
	rule__Delete__Group_5__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Delete__Group_5__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeleteAccess().getLeftParenthesisKeyword_5_1()); }
	'('
	{ after(grammarAccess.getDeleteAccess().getLeftParenthesisKeyword_5_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Delete__Group_5__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Delete__Group_5__2__Impl
	rule__Delete__Group_5__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Delete__Group_5__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeleteAccess().getConditionAssignment_5_2()); }
	(rule__Delete__ConditionAssignment_5_2)
	{ after(grammarAccess.getDeleteAccess().getConditionAssignment_5_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Delete__Group_5__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Delete__Group_5__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Delete__Group_5__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeleteAccess().getRightParenthesisKeyword_5_3()); }
	')'
	{ after(grammarAccess.getDeleteAccess().getRightParenthesisKeyword_5_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Remove__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Remove__Group__0__Impl
	rule__Remove__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Remove__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRemoveAccess().getREMOVEKeyword_0()); }
	'REMOVE'
	{ after(grammarAccess.getRemoveAccess().getREMOVEKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Remove__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Remove__Group__1__Impl
	rule__Remove__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Remove__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRemoveAccess().getVariableAssignment_1()); }
	(rule__Remove__VariableAssignment_1)
	{ after(grammarAccess.getRemoveAccess().getVariableAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Remove__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Remove__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Remove__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRemoveAccess().getSpecifierAssignment_2()); }
	(rule__Remove__SpecifierAssignment_2)
	{ after(grammarAccess.getRemoveAccess().getSpecifierAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ArraySpecifier__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArraySpecifier__Group__0__Impl
	rule__ArraySpecifier__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArraySpecifier__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArraySpecifierAccess().getArraySpecifierAction_0()); }
	()
	{ after(grammarAccess.getArraySpecifierAccess().getArraySpecifierAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArraySpecifier__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArraySpecifier__Group__1__Impl
	rule__ArraySpecifier__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ArraySpecifier__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArraySpecifierAccess().getGroup_1()); }
	(rule__ArraySpecifier__Group_1__0)?
	{ after(grammarAccess.getArraySpecifierAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArraySpecifier__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArraySpecifier__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArraySpecifier__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArraySpecifierAccess().getGroup_2()); }
	(rule__ArraySpecifier__Group_2__0)?
	{ after(grammarAccess.getArraySpecifierAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ArraySpecifier__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArraySpecifier__Group_1__0__Impl
	rule__ArraySpecifier__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArraySpecifier__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArraySpecifierAccess().getATKeyword_1_0()); }
	'AT'
	{ after(grammarAccess.getArraySpecifierAccess().getATKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArraySpecifier__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArraySpecifier__Group_1__1__Impl
	rule__ArraySpecifier__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ArraySpecifier__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArraySpecifierAccess().getIndexAssignment_1_1()); }
	(rule__ArraySpecifier__IndexAssignment_1_1)
	{ after(grammarAccess.getArraySpecifierAccess().getIndexAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArraySpecifier__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArraySpecifier__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArraySpecifier__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArraySpecifierAccess().getGroup_1_2()); }
	(rule__ArraySpecifier__Group_1_2__0)*
	{ after(grammarAccess.getArraySpecifierAccess().getGroup_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ArraySpecifier__Group_1_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArraySpecifier__Group_1_2__0__Impl
	rule__ArraySpecifier__Group_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArraySpecifier__Group_1_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArraySpecifierAccess().getCommaKeyword_1_2_0()); }
	','
	{ after(grammarAccess.getArraySpecifierAccess().getCommaKeyword_1_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArraySpecifier__Group_1_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArraySpecifier__Group_1_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArraySpecifier__Group_1_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArraySpecifierAccess().getFieldsAssignment_1_2_1()); }
	(rule__ArraySpecifier__FieldsAssignment_1_2_1)
	{ after(grammarAccess.getArraySpecifierAccess().getFieldsAssignment_1_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ArraySpecifier__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArraySpecifier__Group_2__0__Impl
	rule__ArraySpecifier__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArraySpecifier__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArraySpecifierAccess().getWHEREKeyword_2_0()); }
	'WHERE'
	{ after(grammarAccess.getArraySpecifierAccess().getWHEREKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArraySpecifier__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArraySpecifier__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArraySpecifier__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArraySpecifierAccess().getConditionAssignment_2_1()); }
	(rule__ArraySpecifier__ConditionAssignment_2_1)
	{ after(grammarAccess.getArraySpecifierAccess().getConditionAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Constant__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constant__Group_0__0__Impl
	rule__Constant__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstantAccess().getConstantAction_0_0()); }
	()
	{ after(grammarAccess.getConstantAccess().getConstantAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constant__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstantAccess().getPrimitiveParserRuleCall_0_1()); }
	rulePrimitive
	{ after(grammarAccess.getConstantAccess().getPrimitiveParserRuleCall_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Array__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Array__Group__0__Impl
	rule__Array__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Array__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArrayAccess().getArrayAction_0()); }
	()
	{ after(grammarAccess.getArrayAccess().getArrayAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Array__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Array__Group__1__Impl
	rule__Array__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Array__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArrayAccess().getLeftSquareBracketKeyword_1()); }
	'['
	{ after(grammarAccess.getArrayAccess().getLeftSquareBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Array__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Array__Group__2__Impl
	rule__Array__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Array__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArrayAccess().getGroup_2()); }
	(rule__Array__Group_2__0)?
	{ after(grammarAccess.getArrayAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Array__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Array__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Array__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArrayAccess().getRightSquareBracketKeyword_3()); }
	']'
	{ after(grammarAccess.getArrayAccess().getRightSquareBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Array__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Array__Group_2__0__Impl
	rule__Array__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Array__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArrayAccess().getValuesAssignment_2_0()); }
	(rule__Array__ValuesAssignment_2_0)
	{ after(grammarAccess.getArrayAccess().getValuesAssignment_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Array__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Array__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Array__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArrayAccess().getGroup_2_1()); }
	(rule__Array__Group_2_1__0)*
	{ after(grammarAccess.getArrayAccess().getGroup_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Array__Group_2_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Array__Group_2_1__0__Impl
	rule__Array__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Array__Group_2_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArrayAccess().getCommaKeyword_2_1_0()); }
	','
	{ after(grammarAccess.getArrayAccess().getCommaKeyword_2_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Array__Group_2_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Array__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Array__Group_2_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArrayAccess().getValuesAssignment_2_1_1()); }
	(rule__Array__ValuesAssignment_2_1_1)
	{ after(grammarAccess.getArrayAccess().getValuesAssignment_2_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Object__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Object__Group__0__Impl
	rule__Object__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Object__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjectAccess().getObjectAction_0()); }
	()
	{ after(grammarAccess.getObjectAccess().getObjectAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Object__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Object__Group__1__Impl
	rule__Object__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Object__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjectAccess().getLeftCurlyBracketKeyword_1()); }
	'{'
	{ after(grammarAccess.getObjectAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Object__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Object__Group__2__Impl
	rule__Object__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Object__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjectAccess().getGroup_2()); }
	(rule__Object__Group_2__0)?
	{ after(grammarAccess.getObjectAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Object__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Object__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Object__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjectAccess().getRightCurlyBracketKeyword_3()); }
	'}'
	{ after(grammarAccess.getObjectAccess().getRightCurlyBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Object__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Object__Group_2__0__Impl
	rule__Object__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Object__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjectAccess().getFieldsAssignment_2_0()); }
	(rule__Object__FieldsAssignment_2_0)
	{ after(grammarAccess.getObjectAccess().getFieldsAssignment_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Object__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Object__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Object__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjectAccess().getGroup_2_1()); }
	(rule__Object__Group_2_1__0)*
	{ after(grammarAccess.getObjectAccess().getGroup_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Object__Group_2_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Object__Group_2_1__0__Impl
	rule__Object__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Object__Group_2_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjectAccess().getCommaKeyword_2_1_0()); }
	','
	{ after(grammarAccess.getObjectAccess().getCommaKeyword_2_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Object__Group_2_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Object__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Object__Group_2_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjectAccess().getFieldsAssignment_2_1_1()); }
	(rule__Object__FieldsAssignment_2_1_1)
	{ after(grammarAccess.getObjectAccess().getFieldsAssignment_2_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Field__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Field__Group__0__Impl
	rule__Field__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Field__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFieldAccess().getKeyAssignment_0()); }
	(rule__Field__KeyAssignment_0)
	{ after(grammarAccess.getFieldAccess().getKeyAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Field__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Field__Group__1__Impl
	rule__Field__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Field__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFieldAccess().getColonKeyword_1()); }
	':'
	{ after(grammarAccess.getFieldAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Field__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Field__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Field__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFieldAccess().getValueAssignment_2()); }
	(rule__Field__ValueAssignment_2)
	{ after(grammarAccess.getFieldAccess().getValueAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__StmtsAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getStmtsSimpleStatementParserRuleCall_0()); }
		ruleSimpleStatement
		{ after(grammarAccess.getModelAccess().getStmtsSimpleStatementParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__LeftHandSideAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssignmentAccess().getLeftHandSideVariableCallParserRuleCall_0_0()); }
		ruleVariableCall
		{ after(grammarAccess.getAssignmentAccess().getLeftHandSideVariableCallParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__RightHandSideAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssignmentAccess().getRightHandSideExpressionParserRuleCall_2_0()); }
		ruleExpression
		{ after(grammarAccess.getAssignmentAccess().getRightHandSideExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__ValuesAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOrExpressionAccess().getValuesAndExpressionParserRuleCall_0_0()); }
		ruleAndExpression
		{ after(grammarAccess.getOrExpressionAccess().getValuesAndExpressionParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__ValuesAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOrExpressionAccess().getValuesAndExpressionParserRuleCall_1_1_0()); }
		ruleAndExpression
		{ after(grammarAccess.getOrExpressionAccess().getValuesAndExpressionParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__ValuesAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAndExpressionAccess().getValuesEqExpressionParserRuleCall_0_0()); }
		ruleEqExpression
		{ after(grammarAccess.getAndExpressionAccess().getValuesEqExpressionParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__ValuesAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAndExpressionAccess().getValuesEqExpressionParserRuleCall_1_1_0()); }
		ruleEqExpression
		{ after(grammarAccess.getAndExpressionAccess().getValuesEqExpressionParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EqExpression__ValuesAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEqExpressionAccess().getValuesCompExpressionParserRuleCall_0_0()); }
		ruleCompExpression
		{ after(grammarAccess.getEqExpressionAccess().getValuesCompExpressionParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EqExpression__ValuesAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEqExpressionAccess().getValuesCompExpressionParserRuleCall_1_1_0()); }
		ruleCompExpression
		{ after(grammarAccess.getEqExpressionAccess().getValuesCompExpressionParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompExpression__ValuesAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCompExpressionAccess().getValuesAddExpressionParserRuleCall_0_0()); }
		ruleAddExpression
		{ after(grammarAccess.getCompExpressionAccess().getValuesAddExpressionParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompExpression__ValuesAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCompExpressionAccess().getValuesAddExpressionParserRuleCall_1_1_0()); }
		ruleAddExpression
		{ after(grammarAccess.getCompExpressionAccess().getValuesAddExpressionParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AddExpression__ValuesAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAddExpressionAccess().getValuesMultExpressionParserRuleCall_0_0()); }
		ruleMultExpression
		{ after(grammarAccess.getAddExpressionAccess().getValuesMultExpressionParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AddExpression__ValuesAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAddExpressionAccess().getValuesMultExpressionParserRuleCall_1_1_0()); }
		ruleMultExpression
		{ after(grammarAccess.getAddExpressionAccess().getValuesMultExpressionParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultExpression__ValuesAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultExpressionAccess().getValuesUnaryMinusExpressionParserRuleCall_0_0()); }
		ruleUnaryMinusExpression
		{ after(grammarAccess.getMultExpressionAccess().getValuesUnaryMinusExpressionParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultExpression__ValuesAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultExpressionAccess().getValuesUnaryMinusExpressionParserRuleCall_1_1_0()); }
		ruleUnaryMinusExpression
		{ after(grammarAccess.getMultExpressionAccess().getValuesUnaryMinusExpressionParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryMinusExpression__ValueAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnaryMinusExpressionAccess().getValueUnaryMinusExpressionParserRuleCall_0_1_0()); }
		ruleUnaryMinusExpression
		{ after(grammarAccess.getUnaryMinusExpressionAccess().getValueUnaryMinusExpressionParserRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryMinusExpression__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnaryMinusExpressionAccess().getValueNegationExpressionParserRuleCall_1_0()); }
		ruleNegationExpression
		{ after(grammarAccess.getUnaryMinusExpressionAccess().getValueNegationExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NegationExpression__ValueAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNegationExpressionAccess().getValueNegationExpressionParserRuleCall_0_1_0()); }
		ruleNegationExpression
		{ after(grammarAccess.getNegationExpressionAccess().getValueNegationExpressionParserRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NegationExpression__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNegationExpressionAccess().getValuePrimaryExpressionParserRuleCall_1_0()); }
		rulePrimaryExpression
		{ after(grammarAccess.getNegationExpressionAccess().getValuePrimaryExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FieldInvoquer__FieldAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFieldInvoquerAccess().getFieldFIELD_NAMETerminalRuleCall_0()); }
		RULE_FIELD_NAME
		{ after(grammarAccess.getFieldInvoquerAccess().getFieldFIELD_NAMETerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableCall__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableCallAccess().getNameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getVariableCallAccess().getNameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableCall__CallerAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableCallAccess().getCallerAuxiliarCallerParserRuleCall_1_0()); }
		ruleAuxiliarCaller
		{ after(grammarAccess.getVariableCallAccess().getCallerAuxiliarCallerParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FieldCaller__KeyAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFieldCallerAccess().getKeyFIELD_NAMETerminalRuleCall_1_0()); }
		RULE_FIELD_NAME
		{ after(grammarAccess.getFieldCallerAccess().getKeyFIELD_NAMETerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayCaller__IndexAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArrayCallerAccess().getIndexNUMBERTerminalRuleCall_1_0()); }
		RULE_NUMBER
		{ after(grammarAccess.getArrayCallerAccess().getIndexNUMBERTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayCaller__IndexAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArrayCallerAccess().getIndexNUMBERTerminalRuleCall_2_1_0()); }
		RULE_NUMBER
		{ after(grammarAccess.getArrayCallerAccess().getIndexNUMBERTerminalRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Load__FileNameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLoadAccess().getFileNameSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getLoadAccess().getFileNameSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Store__ExpressionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStoreAccess().getExpressionExpressionParserRuleCall_1_0()); }
		ruleExpression
		{ after(grammarAccess.getStoreAccess().getExpressionExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Store__FileNameAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStoreAccess().getFileNameSTRINGTerminalRuleCall_3_0()); }
		RULE_STRING
		{ after(grammarAccess.getStoreAccess().getFileNameSTRINGTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Export__ExpressionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExportAccess().getExpressionExpressionParserRuleCall_1_0()); }
		ruleExpression
		{ after(grammarAccess.getExportAccess().getExpressionExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Export__FileNameAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExportAccess().getFileNameSTRINGTerminalRuleCall_3_0()); }
		RULE_STRING
		{ after(grammarAccess.getExportAccess().getFileNameSTRINGTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcCall__ExpressionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProcCallAccess().getExpressionExpressionParserRuleCall_1_0()); }
		ruleExpression
		{ after(grammarAccess.getProcCallAccess().getExpressionExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Depth__ExpressionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDepthAccess().getExpressionExpressionParserRuleCall_1_0()); }
		ruleExpression
		{ after(grammarAccess.getDepthAccess().getExpressionExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FieldInfo__ExpressionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFieldInfoAccess().getExpressionExpressionParserRuleCall_1_0()); }
		ruleExpression
		{ after(grammarAccess.getFieldInfoAccess().getExpressionExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Extract__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExtractAccess().getValueExpressionParserRuleCall_1_0()); }
		ruleExpression
		{ after(grammarAccess.getExtractAccess().getValueExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Extract__AuxiliarAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExtractAccess().getAuxiliarArithmeticAuxiliarParserRuleCall_2_0()); }
		ruleArithmeticAuxiliar
		{ after(grammarAccess.getExtractAccess().getAuxiliarArithmeticAuxiliarParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__FieldsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSelectAccess().getFieldsFIELD_NAMETerminalRuleCall_1_0()); }
		RULE_FIELD_NAME
		{ after(grammarAccess.getSelectAccess().getFieldsFIELD_NAMETerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__FieldsAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSelectAccess().getFieldsFIELD_NAMETerminalRuleCall_2_1_0()); }
		RULE_FIELD_NAME
		{ after(grammarAccess.getSelectAccess().getFieldsFIELD_NAMETerminalRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__FromAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSelectAccess().getFromExpressionParserRuleCall_4_0()); }
		ruleExpression
		{ after(grammarAccess.getSelectAccess().getFromExpressionParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__ConditionAssignment_5_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSelectAccess().getConditionExpressionParserRuleCall_5_1_0()); }
		ruleExpression
		{ after(grammarAccess.getSelectAccess().getConditionExpressionParserRuleCall_5_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Concat__FirstAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConcatAccess().getFirstExpressionParserRuleCall_1_0()); }
		ruleExpression
		{ after(grammarAccess.getConcatAccess().getFirstExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Concat__SecondAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConcatAccess().getSecondExpressionParserRuleCall_3_0()); }
		ruleExpression
		{ after(grammarAccess.getConcatAccess().getSecondExpressionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sum__ExpressionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSumAccess().getExpressionExpressionParserRuleCall_1_0()); }
		ruleExpression
		{ after(grammarAccess.getSumAccess().getExpressionExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sum__AuxiliarAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSumAccess().getAuxiliarArithmeticAuxiliarParserRuleCall_2_0()); }
		ruleArithmeticAuxiliar
		{ after(grammarAccess.getSumAccess().getAuxiliarArithmeticAuxiliarParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Product__ExpressionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProductAccess().getExpressionExpressionParserRuleCall_1_0()); }
		ruleExpression
		{ after(grammarAccess.getProductAccess().getExpressionExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Product__AuxiliarAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProductAccess().getAuxiliarArithmeticAuxiliarParserRuleCall_2_0()); }
		ruleArithmeticAuxiliar
		{ after(grammarAccess.getProductAccess().getAuxiliarArithmeticAuxiliarParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Mean__ExpressionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMeanAccess().getExpressionExpressionParserRuleCall_1_0()); }
		ruleExpression
		{ after(grammarAccess.getMeanAccess().getExpressionExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Mean__AuxiliarAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMeanAccess().getAuxiliarArithmeticAuxiliarParserRuleCall_2_0()); }
		ruleArithmeticAuxiliar
		{ after(grammarAccess.getMeanAccess().getAuxiliarArithmeticAuxiliarParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithmeticAuxiliar__FieldsAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArithmeticAuxiliarAccess().getFieldsFIELD_NAMETerminalRuleCall_1_1_0()); }
		RULE_FIELD_NAME
		{ after(grammarAccess.getArithmeticAuxiliarAccess().getFieldsFIELD_NAMETerminalRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithmeticAuxiliar__FieldsAssignment_1_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArithmeticAuxiliarAccess().getFieldsFIELD_NAMETerminalRuleCall_1_2_1_0()); }
		RULE_FIELD_NAME
		{ after(grammarAccess.getArithmeticAuxiliarAccess().getFieldsFIELD_NAMETerminalRuleCall_1_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithmeticAuxiliar__ConditionAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArithmeticAuxiliarAccess().getConditionExpressionParserRuleCall_2_1_0()); }
		ruleExpression
		{ after(grammarAccess.getArithmeticAuxiliarAccess().getConditionExpressionParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Add__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAddAccess().getValueExpressionParserRuleCall_1_0()); }
		ruleExpression
		{ after(grammarAccess.getAddAccess().getValueExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Add__VariableAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAddAccess().getVariableExpressionParserRuleCall_3_0()); }
		ruleExpression
		{ after(grammarAccess.getAddAccess().getVariableExpressionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Add__FieldsAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAddAccess().getFieldsFIELD_NAMETerminalRuleCall_4_1_0()); }
		RULE_FIELD_NAME
		{ after(grammarAccess.getAddAccess().getFieldsFIELD_NAMETerminalRuleCall_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Add__FieldsAssignment_4_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAddAccess().getFieldsFIELD_NAMETerminalRuleCall_4_2_1_0()); }
		RULE_FIELD_NAME
		{ after(grammarAccess.getAddAccess().getFieldsFIELD_NAMETerminalRuleCall_4_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Insert__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInsertAccess().getValueExpressionParserRuleCall_1_0()); }
		ruleExpression
		{ after(grammarAccess.getInsertAccess().getValueExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Insert__VariableAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInsertAccess().getVariableExpressionParserRuleCall_3_0()); }
		ruleExpression
		{ after(grammarAccess.getInsertAccess().getVariableExpressionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Insert__SpecifierAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInsertAccess().getSpecifierArraySpecifierParserRuleCall_4_0()); }
		ruleArraySpecifier
		{ after(grammarAccess.getInsertAccess().getSpecifierArraySpecifierParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rename__CallAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRenameAccess().getCallVariableCallParserRuleCall_1_0()); }
		ruleVariableCall
		{ after(grammarAccess.getRenameAccess().getCallVariableCallParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rename__FieldsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRenameAccess().getFieldsFIELD_NAMETerminalRuleCall_3_0()); }
		RULE_FIELD_NAME
		{ after(grammarAccess.getRenameAccess().getFieldsFIELD_NAMETerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rename__FieldsAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRenameAccess().getFieldsFIELD_NAMETerminalRuleCall_4_1_0()); }
		RULE_FIELD_NAME
		{ after(grammarAccess.getRenameAccess().getFieldsFIELD_NAMETerminalRuleCall_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rename__NfieldsAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRenameAccess().getNfieldsFIELD_NAMETerminalRuleCall_6_0()); }
		RULE_FIELD_NAME
		{ after(grammarAccess.getRenameAccess().getNfieldsFIELD_NAMETerminalRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rename__NfieldsAssignment_7_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRenameAccess().getNfieldsFIELD_NAMETerminalRuleCall_7_1_0()); }
		RULE_FIELD_NAME
		{ after(grammarAccess.getRenameAccess().getNfieldsFIELD_NAMETerminalRuleCall_7_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Erase__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEraseAccess().getValueExpressionParserRuleCall_1_0()); }
		ruleExpression
		{ after(grammarAccess.getEraseAccess().getValueExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Erase__FieldsAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEraseAccess().getFieldsFIELD_NAMETerminalRuleCall_2_1_0()); }
		RULE_FIELD_NAME
		{ after(grammarAccess.getEraseAccess().getFieldsFIELD_NAMETerminalRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Erase__FieldsAssignment_2_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEraseAccess().getFieldsFIELD_NAMETerminalRuleCall_2_2_1_0()); }
		RULE_FIELD_NAME
		{ after(grammarAccess.getEraseAccess().getFieldsFIELD_NAMETerminalRuleCall_2_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Delete__FieldsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDeleteAccess().getFieldsFIELD_NAMETerminalRuleCall_1_0()); }
		RULE_FIELD_NAME
		{ after(grammarAccess.getDeleteAccess().getFieldsFIELD_NAMETerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Delete__FieldsAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDeleteAccess().getFieldsFIELD_NAMETerminalRuleCall_2_1_0()); }
		RULE_FIELD_NAME
		{ after(grammarAccess.getDeleteAccess().getFieldsFIELD_NAMETerminalRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Delete__FromAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDeleteAccess().getFromExpressionParserRuleCall_4_0()); }
		ruleExpression
		{ after(grammarAccess.getDeleteAccess().getFromExpressionParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Delete__ConditionAssignment_5_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDeleteAccess().getConditionExpressionParserRuleCall_5_2_0()); }
		ruleExpression
		{ after(grammarAccess.getDeleteAccess().getConditionExpressionParserRuleCall_5_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Remove__VariableAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRemoveAccess().getVariableVariableCallParserRuleCall_1_0()); }
		ruleVariableCall
		{ after(grammarAccess.getRemoveAccess().getVariableVariableCallParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Remove__SpecifierAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRemoveAccess().getSpecifierArraySpecifierParserRuleCall_2_0()); }
		ruleArraySpecifier
		{ after(grammarAccess.getRemoveAccess().getSpecifierArraySpecifierParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArraySpecifier__IndexAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArraySpecifierAccess().getIndexExpressionParserRuleCall_1_1_0()); }
		ruleExpression
		{ after(grammarAccess.getArraySpecifierAccess().getIndexExpressionParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArraySpecifier__FieldsAssignment_1_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArraySpecifierAccess().getFieldsExpressionParserRuleCall_1_2_1_0()); }
		ruleExpression
		{ after(grammarAccess.getArraySpecifierAccess().getFieldsExpressionParserRuleCall_1_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArraySpecifier__ConditionAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArraySpecifierAccess().getConditionExpressionParserRuleCall_2_1_0()); }
		ruleExpression
		{ after(grammarAccess.getArraySpecifierAccess().getConditionExpressionParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Array__ValuesAssignment_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArrayAccess().getValuesExpressionParserRuleCall_2_0_0()); }
		ruleExpression
		{ after(grammarAccess.getArrayAccess().getValuesExpressionParserRuleCall_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Array__ValuesAssignment_2_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArrayAccess().getValuesExpressionParserRuleCall_2_1_1_0()); }
		ruleExpression
		{ after(grammarAccess.getArrayAccess().getValuesExpressionParserRuleCall_2_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Object__FieldsAssignment_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getObjectAccess().getFieldsFieldParserRuleCall_2_0_0()); }
		ruleField
		{ after(grammarAccess.getObjectAccess().getFieldsFieldParserRuleCall_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Object__FieldsAssignment_2_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getObjectAccess().getFieldsFieldParserRuleCall_2_1_1_0()); }
		ruleField
		{ after(grammarAccess.getObjectAccess().getFieldsFieldParserRuleCall_2_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Field__KeyAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFieldAccess().getKeyFIELD_NAMETerminalRuleCall_0_0()); }
		RULE_FIELD_NAME
		{ after(grammarAccess.getFieldAccess().getKeyFIELD_NAMETerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Field__ValueAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFieldAccess().getValueExpressionParserRuleCall_2_0()); }
		ruleExpression
		{ after(grammarAccess.getFieldAccess().getValueExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_FIELD_NAME : '$' RULE_ID;

RULE_NULL : 'null';

RULE_BOOL : ('true'|'false');

RULE_NUMBER : (RULE_INT|RULE_DOUBLE);

fragment RULE_DOUBLE : RULE_INT+ '.' RULE_INT*;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

fragment RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
