/*
 * generated by Xtext 2.23.0
 */
package org.xtext.example.mydsl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.example.mydsl.ide.contentassist.antlr.internal.InternalJsonDslParser;
import org.xtext.example.mydsl.services.JsonDslGrammarAccess;

public class JsonDslParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(JsonDslGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, JsonDslGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getSimpleStatementAccess().getAlternatives_0(), "rule__SimpleStatement__Alternatives_0");
			builder.put(grammarAccess.getEqExpressionAccess().getAlternatives_1_0(), "rule__EqExpression__Alternatives_1_0");
			builder.put(grammarAccess.getCompExpressionAccess().getAlternatives_1_0(), "rule__CompExpression__Alternatives_1_0");
			builder.put(grammarAccess.getAddExpressionAccess().getAlternatives_1_0(), "rule__AddExpression__Alternatives_1_0");
			builder.put(grammarAccess.getMultExpressionAccess().getAlternatives_1_0(), "rule__MultExpression__Alternatives_1_0");
			builder.put(grammarAccess.getUnaryMinusExpressionAccess().getAlternatives(), "rule__UnaryMinusExpression__Alternatives");
			builder.put(grammarAccess.getNegationExpressionAccess().getAlternatives(), "rule__NegationExpression__Alternatives");
			builder.put(grammarAccess.getPrimaryExpressionAccess().getAlternatives(), "rule__PrimaryExpression__Alternatives");
			builder.put(grammarAccess.getAuxiliarCallerAccess().getAlternatives(), "rule__AuxiliarCaller__Alternatives");
			builder.put(grammarAccess.getFunctionCallAccess().getAlternatives(), "rule__FunctionCall__Alternatives");
			builder.put(grammarAccess.getConstantAccess().getAlternatives(), "rule__Constant__Alternatives");
			builder.put(grammarAccess.getPrimitiveAccess().getAlternatives(), "rule__Primitive__Alternatives");
			builder.put(grammarAccess.getSimpleStatementAccess().getGroup(), "rule__SimpleStatement__Group__0");
			builder.put(grammarAccess.getAssignmentAccess().getGroup(), "rule__Assignment__Group__0");
			builder.put(grammarAccess.getOrExpressionAccess().getGroup(), "rule__OrExpression__Group__0");
			builder.put(grammarAccess.getOrExpressionAccess().getGroup_1(), "rule__OrExpression__Group_1__0");
			builder.put(grammarAccess.getAndExpressionAccess().getGroup(), "rule__AndExpression__Group__0");
			builder.put(grammarAccess.getAndExpressionAccess().getGroup_1(), "rule__AndExpression__Group_1__0");
			builder.put(grammarAccess.getEqExpressionAccess().getGroup(), "rule__EqExpression__Group__0");
			builder.put(grammarAccess.getEqExpressionAccess().getGroup_1(), "rule__EqExpression__Group_1__0");
			builder.put(grammarAccess.getCompExpressionAccess().getGroup(), "rule__CompExpression__Group__0");
			builder.put(grammarAccess.getCompExpressionAccess().getGroup_1(), "rule__CompExpression__Group_1__0");
			builder.put(grammarAccess.getAddExpressionAccess().getGroup(), "rule__AddExpression__Group__0");
			builder.put(grammarAccess.getAddExpressionAccess().getGroup_1(), "rule__AddExpression__Group_1__0");
			builder.put(grammarAccess.getMultExpressionAccess().getGroup(), "rule__MultExpression__Group__0");
			builder.put(grammarAccess.getMultExpressionAccess().getGroup_1(), "rule__MultExpression__Group_1__0");
			builder.put(grammarAccess.getUnaryMinusExpressionAccess().getGroup_0(), "rule__UnaryMinusExpression__Group_0__0");
			builder.put(grammarAccess.getNegationExpressionAccess().getGroup_0(), "rule__NegationExpression__Group_0__0");
			builder.put(grammarAccess.getPrimaryExpressionAccess().getGroup_3(), "rule__PrimaryExpression__Group_3__0");
			builder.put(grammarAccess.getPrimaryExpressionAccess().getGroup_5(), "rule__PrimaryExpression__Group_5__0");
			builder.put(grammarAccess.getVariableCallAccess().getGroup(), "rule__VariableCall__Group__0");
			builder.put(grammarAccess.getFieldCallerAccess().getGroup(), "rule__FieldCaller__Group__0");
			builder.put(grammarAccess.getArrayCallerAccess().getGroup(), "rule__ArrayCaller__Group__0");
			builder.put(grammarAccess.getArrayCallerAccess().getGroup_2(), "rule__ArrayCaller__Group_2__0");
			builder.put(grammarAccess.getLoadAccess().getGroup(), "rule__Load__Group__0");
			builder.put(grammarAccess.getStoreAccess().getGroup(), "rule__Store__Group__0");
			builder.put(grammarAccess.getExportAccess().getGroup(), "rule__Export__Group__0");
			builder.put(grammarAccess.getProcCallAccess().getGroup(), "rule__ProcCall__Group__0");
			builder.put(grammarAccess.getDepthAccess().getGroup(), "rule__Depth__Group__0");
			builder.put(grammarAccess.getFieldInfoAccess().getGroup(), "rule__FieldInfo__Group__0");
			builder.put(grammarAccess.getExtractAccess().getGroup(), "rule__Extract__Group__0");
			builder.put(grammarAccess.getSelectAccess().getGroup(), "rule__Select__Group__0");
			builder.put(grammarAccess.getSelectAccess().getGroup_2(), "rule__Select__Group_2__0");
			builder.put(grammarAccess.getSelectAccess().getGroup_5(), "rule__Select__Group_5__0");
			builder.put(grammarAccess.getConcatAccess().getGroup(), "rule__Concat__Group__0");
			builder.put(grammarAccess.getSumAccess().getGroup(), "rule__Sum__Group__0");
			builder.put(grammarAccess.getProductAccess().getGroup(), "rule__Product__Group__0");
			builder.put(grammarAccess.getMeanAccess().getGroup(), "rule__Mean__Group__0");
			builder.put(grammarAccess.getArithmeticAuxiliarAccess().getGroup(), "rule__ArithmeticAuxiliar__Group__0");
			builder.put(grammarAccess.getArithmeticAuxiliarAccess().getGroup_1(), "rule__ArithmeticAuxiliar__Group_1__0");
			builder.put(grammarAccess.getArithmeticAuxiliarAccess().getGroup_1_2(), "rule__ArithmeticAuxiliar__Group_1_2__0");
			builder.put(grammarAccess.getArithmeticAuxiliarAccess().getGroup_2(), "rule__ArithmeticAuxiliar__Group_2__0");
			builder.put(grammarAccess.getAddAccess().getGroup(), "rule__Add__Group__0");
			builder.put(grammarAccess.getAddAccess().getGroup_4(), "rule__Add__Group_4__0");
			builder.put(grammarAccess.getAddAccess().getGroup_4_2(), "rule__Add__Group_4_2__0");
			builder.put(grammarAccess.getInsertAccess().getGroup(), "rule__Insert__Group__0");
			builder.put(grammarAccess.getRenameAccess().getGroup(), "rule__Rename__Group__0");
			builder.put(grammarAccess.getRenameAccess().getGroup_4(), "rule__Rename__Group_4__0");
			builder.put(grammarAccess.getRenameAccess().getGroup_7(), "rule__Rename__Group_7__0");
			builder.put(grammarAccess.getEraseAccess().getGroup(), "rule__Erase__Group__0");
			builder.put(grammarAccess.getEraseAccess().getGroup_2(), "rule__Erase__Group_2__0");
			builder.put(grammarAccess.getEraseAccess().getGroup_2_2(), "rule__Erase__Group_2_2__0");
			builder.put(grammarAccess.getDeleteAccess().getGroup(), "rule__Delete__Group__0");
			builder.put(grammarAccess.getDeleteAccess().getGroup_2(), "rule__Delete__Group_2__0");
			builder.put(grammarAccess.getDeleteAccess().getGroup_5(), "rule__Delete__Group_5__0");
			builder.put(grammarAccess.getRemoveAccess().getGroup(), "rule__Remove__Group__0");
			builder.put(grammarAccess.getArraySpecifierAccess().getGroup(), "rule__ArraySpecifier__Group__0");
			builder.put(grammarAccess.getArraySpecifierAccess().getGroup_1(), "rule__ArraySpecifier__Group_1__0");
			builder.put(grammarAccess.getArraySpecifierAccess().getGroup_1_2(), "rule__ArraySpecifier__Group_1_2__0");
			builder.put(grammarAccess.getArraySpecifierAccess().getGroup_2(), "rule__ArraySpecifier__Group_2__0");
			builder.put(grammarAccess.getConstantAccess().getGroup_0(), "rule__Constant__Group_0__0");
			builder.put(grammarAccess.getArrayAccess().getGroup(), "rule__Array__Group__0");
			builder.put(grammarAccess.getArrayAccess().getGroup_2(), "rule__Array__Group_2__0");
			builder.put(grammarAccess.getArrayAccess().getGroup_2_1(), "rule__Array__Group_2_1__0");
			builder.put(grammarAccess.getObjectAccess().getGroup(), "rule__Object__Group__0");
			builder.put(grammarAccess.getObjectAccess().getGroup_2(), "rule__Object__Group_2__0");
			builder.put(grammarAccess.getObjectAccess().getGroup_2_1(), "rule__Object__Group_2_1__0");
			builder.put(grammarAccess.getFieldAccess().getGroup(), "rule__Field__Group__0");
			builder.put(grammarAccess.getModelAccess().getStmtsAssignment(), "rule__Model__StmtsAssignment");
			builder.put(grammarAccess.getAssignmentAccess().getLeftHandSideAssignment_0(), "rule__Assignment__LeftHandSideAssignment_0");
			builder.put(grammarAccess.getAssignmentAccess().getRightHandSideAssignment_2(), "rule__Assignment__RightHandSideAssignment_2");
			builder.put(grammarAccess.getOrExpressionAccess().getValuesAssignment_0(), "rule__OrExpression__ValuesAssignment_0");
			builder.put(grammarAccess.getOrExpressionAccess().getValuesAssignment_1_1(), "rule__OrExpression__ValuesAssignment_1_1");
			builder.put(grammarAccess.getAndExpressionAccess().getValuesAssignment_0(), "rule__AndExpression__ValuesAssignment_0");
			builder.put(grammarAccess.getAndExpressionAccess().getValuesAssignment_1_1(), "rule__AndExpression__ValuesAssignment_1_1");
			builder.put(grammarAccess.getEqExpressionAccess().getValuesAssignment_0(), "rule__EqExpression__ValuesAssignment_0");
			builder.put(grammarAccess.getEqExpressionAccess().getValuesAssignment_1_1(), "rule__EqExpression__ValuesAssignment_1_1");
			builder.put(grammarAccess.getCompExpressionAccess().getValuesAssignment_0(), "rule__CompExpression__ValuesAssignment_0");
			builder.put(grammarAccess.getCompExpressionAccess().getValuesAssignment_1_1(), "rule__CompExpression__ValuesAssignment_1_1");
			builder.put(grammarAccess.getAddExpressionAccess().getValuesAssignment_0(), "rule__AddExpression__ValuesAssignment_0");
			builder.put(grammarAccess.getAddExpressionAccess().getValuesAssignment_1_1(), "rule__AddExpression__ValuesAssignment_1_1");
			builder.put(grammarAccess.getMultExpressionAccess().getValuesAssignment_0(), "rule__MultExpression__ValuesAssignment_0");
			builder.put(grammarAccess.getMultExpressionAccess().getValuesAssignment_1_1(), "rule__MultExpression__ValuesAssignment_1_1");
			builder.put(grammarAccess.getUnaryMinusExpressionAccess().getValueAssignment_0_1(), "rule__UnaryMinusExpression__ValueAssignment_0_1");
			builder.put(grammarAccess.getUnaryMinusExpressionAccess().getValueAssignment_1(), "rule__UnaryMinusExpression__ValueAssignment_1");
			builder.put(grammarAccess.getNegationExpressionAccess().getValueAssignment_0_1(), "rule__NegationExpression__ValueAssignment_0_1");
			builder.put(grammarAccess.getNegationExpressionAccess().getValueAssignment_1(), "rule__NegationExpression__ValueAssignment_1");
			builder.put(grammarAccess.getFieldInvoquerAccess().getFieldAssignment(), "rule__FieldInvoquer__FieldAssignment");
			builder.put(grammarAccess.getVariableCallAccess().getNameAssignment_0(), "rule__VariableCall__NameAssignment_0");
			builder.put(grammarAccess.getVariableCallAccess().getCallerAssignment_1(), "rule__VariableCall__CallerAssignment_1");
			builder.put(grammarAccess.getFieldCallerAccess().getKeyAssignment_1(), "rule__FieldCaller__KeyAssignment_1");
			builder.put(grammarAccess.getArrayCallerAccess().getIndexAssignment_1(), "rule__ArrayCaller__IndexAssignment_1");
			builder.put(grammarAccess.getArrayCallerAccess().getIndexAssignment_2_1(), "rule__ArrayCaller__IndexAssignment_2_1");
			builder.put(grammarAccess.getLoadAccess().getFileNameAssignment_1(), "rule__Load__FileNameAssignment_1");
			builder.put(grammarAccess.getStoreAccess().getExpressionAssignment_1(), "rule__Store__ExpressionAssignment_1");
			builder.put(grammarAccess.getStoreAccess().getFileNameAssignment_3(), "rule__Store__FileNameAssignment_3");
			builder.put(grammarAccess.getExportAccess().getExpressionAssignment_1(), "rule__Export__ExpressionAssignment_1");
			builder.put(grammarAccess.getExportAccess().getFileNameAssignment_3(), "rule__Export__FileNameAssignment_3");
			builder.put(grammarAccess.getProcCallAccess().getExpressionAssignment_1(), "rule__ProcCall__ExpressionAssignment_1");
			builder.put(grammarAccess.getDepthAccess().getExpressionAssignment_1(), "rule__Depth__ExpressionAssignment_1");
			builder.put(grammarAccess.getFieldInfoAccess().getExpressionAssignment_1(), "rule__FieldInfo__ExpressionAssignment_1");
			builder.put(grammarAccess.getExtractAccess().getValueAssignment_1(), "rule__Extract__ValueAssignment_1");
			builder.put(grammarAccess.getExtractAccess().getAuxiliarAssignment_2(), "rule__Extract__AuxiliarAssignment_2");
			builder.put(grammarAccess.getSelectAccess().getFieldsAssignment_1(), "rule__Select__FieldsAssignment_1");
			builder.put(grammarAccess.getSelectAccess().getFieldsAssignment_2_1(), "rule__Select__FieldsAssignment_2_1");
			builder.put(grammarAccess.getSelectAccess().getFromAssignment_4(), "rule__Select__FromAssignment_4");
			builder.put(grammarAccess.getSelectAccess().getConditionAssignment_5_1(), "rule__Select__ConditionAssignment_5_1");
			builder.put(grammarAccess.getConcatAccess().getFirstAssignment_1(), "rule__Concat__FirstAssignment_1");
			builder.put(grammarAccess.getConcatAccess().getSecondAssignment_3(), "rule__Concat__SecondAssignment_3");
			builder.put(grammarAccess.getSumAccess().getExpressionAssignment_1(), "rule__Sum__ExpressionAssignment_1");
			builder.put(grammarAccess.getSumAccess().getAuxiliarAssignment_2(), "rule__Sum__AuxiliarAssignment_2");
			builder.put(grammarAccess.getProductAccess().getExpressionAssignment_1(), "rule__Product__ExpressionAssignment_1");
			builder.put(grammarAccess.getProductAccess().getAuxiliarAssignment_2(), "rule__Product__AuxiliarAssignment_2");
			builder.put(grammarAccess.getMeanAccess().getExpressionAssignment_1(), "rule__Mean__ExpressionAssignment_1");
			builder.put(grammarAccess.getMeanAccess().getAuxiliarAssignment_2(), "rule__Mean__AuxiliarAssignment_2");
			builder.put(grammarAccess.getArithmeticAuxiliarAccess().getFieldsAssignment_1_1(), "rule__ArithmeticAuxiliar__FieldsAssignment_1_1");
			builder.put(grammarAccess.getArithmeticAuxiliarAccess().getFieldsAssignment_1_2_1(), "rule__ArithmeticAuxiliar__FieldsAssignment_1_2_1");
			builder.put(grammarAccess.getArithmeticAuxiliarAccess().getConditionAssignment_2_1(), "rule__ArithmeticAuxiliar__ConditionAssignment_2_1");
			builder.put(grammarAccess.getAddAccess().getValueAssignment_1(), "rule__Add__ValueAssignment_1");
			builder.put(grammarAccess.getAddAccess().getVariableAssignment_3(), "rule__Add__VariableAssignment_3");
			builder.put(grammarAccess.getAddAccess().getFieldsAssignment_4_1(), "rule__Add__FieldsAssignment_4_1");
			builder.put(grammarAccess.getAddAccess().getFieldsAssignment_4_2_1(), "rule__Add__FieldsAssignment_4_2_1");
			builder.put(grammarAccess.getInsertAccess().getValueAssignment_1(), "rule__Insert__ValueAssignment_1");
			builder.put(grammarAccess.getInsertAccess().getVariableAssignment_3(), "rule__Insert__VariableAssignment_3");
			builder.put(grammarAccess.getInsertAccess().getSpecifierAssignment_4(), "rule__Insert__SpecifierAssignment_4");
			builder.put(grammarAccess.getRenameAccess().getCallAssignment_1(), "rule__Rename__CallAssignment_1");
			builder.put(grammarAccess.getRenameAccess().getFieldsAssignment_3(), "rule__Rename__FieldsAssignment_3");
			builder.put(grammarAccess.getRenameAccess().getFieldsAssignment_4_1(), "rule__Rename__FieldsAssignment_4_1");
			builder.put(grammarAccess.getRenameAccess().getNfieldsAssignment_6(), "rule__Rename__NfieldsAssignment_6");
			builder.put(grammarAccess.getRenameAccess().getNfieldsAssignment_7_1(), "rule__Rename__NfieldsAssignment_7_1");
			builder.put(grammarAccess.getEraseAccess().getValueAssignment_1(), "rule__Erase__ValueAssignment_1");
			builder.put(grammarAccess.getEraseAccess().getFieldsAssignment_2_1(), "rule__Erase__FieldsAssignment_2_1");
			builder.put(grammarAccess.getEraseAccess().getFieldsAssignment_2_2_1(), "rule__Erase__FieldsAssignment_2_2_1");
			builder.put(grammarAccess.getDeleteAccess().getFieldsAssignment_1(), "rule__Delete__FieldsAssignment_1");
			builder.put(grammarAccess.getDeleteAccess().getFieldsAssignment_2_1(), "rule__Delete__FieldsAssignment_2_1");
			builder.put(grammarAccess.getDeleteAccess().getFromAssignment_4(), "rule__Delete__FromAssignment_4");
			builder.put(grammarAccess.getDeleteAccess().getConditionAssignment_5_2(), "rule__Delete__ConditionAssignment_5_2");
			builder.put(grammarAccess.getRemoveAccess().getVariableAssignment_1(), "rule__Remove__VariableAssignment_1");
			builder.put(grammarAccess.getRemoveAccess().getSpecifierAssignment_2(), "rule__Remove__SpecifierAssignment_2");
			builder.put(grammarAccess.getArraySpecifierAccess().getIndexAssignment_1_1(), "rule__ArraySpecifier__IndexAssignment_1_1");
			builder.put(grammarAccess.getArraySpecifierAccess().getFieldsAssignment_1_2_1(), "rule__ArraySpecifier__FieldsAssignment_1_2_1");
			builder.put(grammarAccess.getArraySpecifierAccess().getConditionAssignment_2_1(), "rule__ArraySpecifier__ConditionAssignment_2_1");
			builder.put(grammarAccess.getArrayAccess().getValuesAssignment_2_0(), "rule__Array__ValuesAssignment_2_0");
			builder.put(grammarAccess.getArrayAccess().getValuesAssignment_2_1_1(), "rule__Array__ValuesAssignment_2_1_1");
			builder.put(grammarAccess.getObjectAccess().getFieldsAssignment_2_0(), "rule__Object__FieldsAssignment_2_0");
			builder.put(grammarAccess.getObjectAccess().getFieldsAssignment_2_1_1(), "rule__Object__FieldsAssignment_2_1_1");
			builder.put(grammarAccess.getFieldAccess().getKeyAssignment_0(), "rule__Field__KeyAssignment_0");
			builder.put(grammarAccess.getFieldAccess().getValueAssignment_2(), "rule__Field__ValueAssignment_2");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private JsonDslGrammarAccess grammarAccess;

	@Override
	protected InternalJsonDslParser createParser() {
		InternalJsonDslParser result = new InternalJsonDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public JsonDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(JsonDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
