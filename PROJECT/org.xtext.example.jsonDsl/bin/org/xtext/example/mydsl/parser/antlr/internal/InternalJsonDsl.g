/*
 * generated by Xtext 2.23.0
 */
grammar InternalJsonDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.example.mydsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.mydsl.services.JsonDslGrammarAccess;

}

@parser::members {

 	private JsonDslGrammarAccess grammarAccess;

    public InternalJsonDslParser(TokenStream input, JsonDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected JsonDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getStmtsSimpleStatementParserRuleCall_0());
			}
			lv_stmts_0_0=ruleSimpleStatement
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				add(
					$current,
					"stmts",
					lv_stmts_0_0,
					"org.xtext.example.mydsl.JsonDsl.SimpleStatement");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleSimpleStatement
entryRuleSimpleStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSimpleStatementRule()); }
	iv_ruleSimpleStatement=ruleSimpleStatement
	{ $current=$iv_ruleSimpleStatement.current; }
	EOF;

// Rule SimpleStatement
ruleSimpleStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getSimpleStatementAccess().getAssignmentParserRuleCall_0_0());
			}
			this_Assignment_0=ruleAssignment
			{
				$current = $this_Assignment_0.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getSimpleStatementAccess().getExpressionParserRuleCall_0_1());
			}
			this_Expression_1=ruleExpression
			{
				$current = $this_Expression_1.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getSimpleStatementAccess().getProcCallParserRuleCall_0_2());
			}
			this_ProcCall_2=ruleProcCall
			{
				$current = $this_ProcCall_2.current;
				afterParserOrEnumRuleCall();
			}
		)
		otherlv_3=';'
		{
			newLeafNode(otherlv_3, grammarAccess.getSimpleStatementAccess().getSemicolonKeyword_1());
		}
	)
;

// Entry rule entryRuleAssignment
entryRuleAssignment returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAssignmentRule()); }
	iv_ruleAssignment=ruleAssignment
	{ $current=$iv_ruleAssignment.current; }
	EOF;

// Rule Assignment
ruleAssignment returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getAssignmentAccess().getLeftHandSideVariableCallParserRuleCall_0_0());
				}
				lv_leftHandSide_0_0=ruleVariableCall
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssignmentRule());
					}
					set(
						$current,
						"leftHandSide",
						lv_leftHandSide_0_0,
						"org.xtext.example.mydsl.JsonDsl.VariableCall");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getAssignmentAccess().getEqualsSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAssignmentAccess().getRightHandSideExpressionParserRuleCall_2_0());
				}
				lv_rightHandSide_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssignmentRule());
					}
					set(
						$current,
						"rightHandSide",
						lv_rightHandSide_2_0,
						"org.xtext.example.mydsl.JsonDsl.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getExpressionAccess().getBinaryExpressionParserRuleCall());
	}
	this_BinaryExpression_0=ruleBinaryExpression
	{
		$current = $this_BinaryExpression_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleBinaryExpression
entryRuleBinaryExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBinaryExpressionRule()); }
	iv_ruleBinaryExpression=ruleBinaryExpression
	{ $current=$iv_ruleBinaryExpression.current; }
	EOF;

// Rule BinaryExpression
ruleBinaryExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getBinaryExpressionAccess().getOrExpressionParserRuleCall());
	}
	this_OrExpression_0=ruleOrExpression
	{
		$current = $this_OrExpression_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleOrExpression
entryRuleOrExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOrExpressionRule()); }
	iv_ruleOrExpression=ruleOrExpression
	{ $current=$iv_ruleOrExpression.current; }
	EOF;

// Rule OrExpression
ruleOrExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getOrExpressionAccess().getValuesAndExpressionParserRuleCall_0_0());
				}
				lv_values_0_0=ruleAndExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOrExpressionRule());
					}
					add(
						$current,
						"values",
						lv_values_0_0,
						"org.xtext.example.mydsl.JsonDsl.AndExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1='OR'
			{
				newLeafNode(otherlv_1, grammarAccess.getOrExpressionAccess().getORKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getOrExpressionAccess().getValuesAndExpressionParserRuleCall_1_1_0());
					}
					lv_values_2_0=ruleAndExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOrExpressionRule());
						}
						add(
							$current,
							"values",
							lv_values_2_0,
							"org.xtext.example.mydsl.JsonDsl.AndExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleAndExpression
entryRuleAndExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAndExpressionRule()); }
	iv_ruleAndExpression=ruleAndExpression
	{ $current=$iv_ruleAndExpression.current; }
	EOF;

// Rule AndExpression
ruleAndExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getAndExpressionAccess().getValuesEqExpressionParserRuleCall_0_0());
				}
				lv_values_0_0=ruleEqExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAndExpressionRule());
					}
					add(
						$current,
						"values",
						lv_values_0_0,
						"org.xtext.example.mydsl.JsonDsl.EqExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1='AND'
			{
				newLeafNode(otherlv_1, grammarAccess.getAndExpressionAccess().getANDKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAndExpressionAccess().getValuesEqExpressionParserRuleCall_1_1_0());
					}
					lv_values_2_0=ruleEqExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAndExpressionRule());
						}
						add(
							$current,
							"values",
							lv_values_2_0,
							"org.xtext.example.mydsl.JsonDsl.EqExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleEqExpression
entryRuleEqExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEqExpressionRule()); }
	iv_ruleEqExpression=ruleEqExpression
	{ $current=$iv_ruleEqExpression.current; }
	EOF;

// Rule EqExpression
ruleEqExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getEqExpressionAccess().getValuesCompExpressionParserRuleCall_0_0());
				}
				lv_values_0_0=ruleCompExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEqExpressionRule());
					}
					add(
						$current,
						"values",
						lv_values_0_0,
						"org.xtext.example.mydsl.JsonDsl.CompExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				otherlv_1='=='
				{
					newLeafNode(otherlv_1, grammarAccess.getEqExpressionAccess().getEqualsSignEqualsSignKeyword_1_0_0());
				}
				    |
				otherlv_2='!='
				{
					newLeafNode(otherlv_2, grammarAccess.getEqExpressionAccess().getExclamationMarkEqualsSignKeyword_1_0_1());
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getEqExpressionAccess().getValuesCompExpressionParserRuleCall_1_1_0());
					}
					lv_values_3_0=ruleCompExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEqExpressionRule());
						}
						add(
							$current,
							"values",
							lv_values_3_0,
							"org.xtext.example.mydsl.JsonDsl.CompExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleCompExpression
entryRuleCompExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCompExpressionRule()); }
	iv_ruleCompExpression=ruleCompExpression
	{ $current=$iv_ruleCompExpression.current; }
	EOF;

// Rule CompExpression
ruleCompExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getCompExpressionAccess().getValuesAddExpressionParserRuleCall_0_0());
				}
				lv_values_0_0=ruleAddExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCompExpressionRule());
					}
					add(
						$current,
						"values",
						lv_values_0_0,
						"org.xtext.example.mydsl.JsonDsl.AddExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				otherlv_1='>'
				{
					newLeafNode(otherlv_1, grammarAccess.getCompExpressionAccess().getGreaterThanSignKeyword_1_0_0());
				}
				    |
				otherlv_2='>='
				{
					newLeafNode(otherlv_2, grammarAccess.getCompExpressionAccess().getGreaterThanSignEqualsSignKeyword_1_0_1());
				}
				    |
				otherlv_3='<'
				{
					newLeafNode(otherlv_3, grammarAccess.getCompExpressionAccess().getLessThanSignKeyword_1_0_2());
				}
				    |
				otherlv_4='<='
				{
					newLeafNode(otherlv_4, grammarAccess.getCompExpressionAccess().getLessThanSignEqualsSignKeyword_1_0_3());
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getCompExpressionAccess().getValuesAddExpressionParserRuleCall_1_1_0());
					}
					lv_values_5_0=ruleAddExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCompExpressionRule());
						}
						add(
							$current,
							"values",
							lv_values_5_0,
							"org.xtext.example.mydsl.JsonDsl.AddExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleAddExpression
entryRuleAddExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAddExpressionRule()); }
	iv_ruleAddExpression=ruleAddExpression
	{ $current=$iv_ruleAddExpression.current; }
	EOF;

// Rule AddExpression
ruleAddExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getAddExpressionAccess().getValuesMultExpressionParserRuleCall_0_0());
				}
				lv_values_0_0=ruleMultExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAddExpressionRule());
					}
					add(
						$current,
						"values",
						lv_values_0_0,
						"org.xtext.example.mydsl.JsonDsl.MultExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				otherlv_1='+'
				{
					newLeafNode(otherlv_1, grammarAccess.getAddExpressionAccess().getPlusSignKeyword_1_0_0());
				}
				    |
				otherlv_2='-'
				{
					newLeafNode(otherlv_2, grammarAccess.getAddExpressionAccess().getHyphenMinusKeyword_1_0_1());
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAddExpressionAccess().getValuesMultExpressionParserRuleCall_1_1_0());
					}
					lv_values_3_0=ruleMultExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAddExpressionRule());
						}
						add(
							$current,
							"values",
							lv_values_3_0,
							"org.xtext.example.mydsl.JsonDsl.MultExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleMultExpression
entryRuleMultExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMultExpressionRule()); }
	iv_ruleMultExpression=ruleMultExpression
	{ $current=$iv_ruleMultExpression.current; }
	EOF;

// Rule MultExpression
ruleMultExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getMultExpressionAccess().getValuesUnaryMinusExpressionParserRuleCall_0_0());
				}
				lv_values_0_0=ruleUnaryMinusExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMultExpressionRule());
					}
					add(
						$current,
						"values",
						lv_values_0_0,
						"org.xtext.example.mydsl.JsonDsl.UnaryMinusExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				otherlv_1='*'
				{
					newLeafNode(otherlv_1, grammarAccess.getMultExpressionAccess().getAsteriskKeyword_1_0_0());
				}
				    |
				otherlv_2='/'
				{
					newLeafNode(otherlv_2, grammarAccess.getMultExpressionAccess().getSolidusKeyword_1_0_1());
				}
				    |
				otherlv_3='%'
				{
					newLeafNode(otherlv_3, grammarAccess.getMultExpressionAccess().getPercentSignKeyword_1_0_2());
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getMultExpressionAccess().getValuesUnaryMinusExpressionParserRuleCall_1_1_0());
					}
					lv_values_4_0=ruleUnaryMinusExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMultExpressionRule());
						}
						add(
							$current,
							"values",
							lv_values_4_0,
							"org.xtext.example.mydsl.JsonDsl.UnaryMinusExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleUnaryMinusExpression
entryRuleUnaryMinusExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnaryMinusExpressionRule()); }
	iv_ruleUnaryMinusExpression=ruleUnaryMinusExpression
	{ $current=$iv_ruleUnaryMinusExpression.current; }
	EOF;

// Rule UnaryMinusExpression
ruleUnaryMinusExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='-'
			{
				newLeafNode(otherlv_0, grammarAccess.getUnaryMinusExpressionAccess().getHyphenMinusKeyword_0_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getUnaryMinusExpressionAccess().getValueUnaryMinusExpressionParserRuleCall_0_1_0());
					}
					lv_value_1_0=ruleUnaryMinusExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getUnaryMinusExpressionRule());
						}
						set(
							$current,
							"value",
							lv_value_1_0,
							"org.xtext.example.mydsl.JsonDsl.UnaryMinusExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getUnaryMinusExpressionAccess().getValueNegationExpressionParserRuleCall_1_0());
				}
				lv_value_2_0=ruleNegationExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUnaryMinusExpressionRule());
					}
					set(
						$current,
						"value",
						lv_value_2_0,
						"org.xtext.example.mydsl.JsonDsl.NegationExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleNegationExpression
entryRuleNegationExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNegationExpressionRule()); }
	iv_ruleNegationExpression=ruleNegationExpression
	{ $current=$iv_ruleNegationExpression.current; }
	EOF;

// Rule NegationExpression
ruleNegationExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='!'
			{
				newLeafNode(otherlv_0, grammarAccess.getNegationExpressionAccess().getExclamationMarkKeyword_0_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getNegationExpressionAccess().getValueNegationExpressionParserRuleCall_0_1_0());
					}
					lv_value_1_0=ruleNegationExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getNegationExpressionRule());
						}
						set(
							$current,
							"value",
							lv_value_1_0,
							"org.xtext.example.mydsl.JsonDsl.NegationExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getNegationExpressionAccess().getValuePrimaryExpressionParserRuleCall_1_0());
				}
				lv_value_2_0=rulePrimaryExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNegationExpressionRule());
					}
					set(
						$current,
						"value",
						lv_value_2_0,
						"org.xtext.example.mydsl.JsonDsl.PrimaryExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryExpressionRule()); }
	iv_rulePrimaryExpression=rulePrimaryExpression
	{ $current=$iv_rulePrimaryExpression.current; }
	EOF;

// Rule PrimaryExpression
rulePrimaryExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getVariableCallParserRuleCall_0());
		}
		this_VariableCall_0=ruleVariableCall
		{
			$current = $this_VariableCall_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getConstantParserRuleCall_1());
		}
		this_Constant_1=ruleConstant
		{
			$current = $this_Constant_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getFunctionCallParserRuleCall_2());
		}
		this_FunctionCall_2=ruleFunctionCall
		{
			$current = $this_FunctionCall_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			otherlv_3='('
			{
				newLeafNode(otherlv_3, grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_3_0());
			}
			{
				newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getExpressionParserRuleCall_3_1());
			}
			this_Expression_4=ruleExpression
			{
				$current = $this_Expression_4.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_5=')'
			{
				newLeafNode(otherlv_5, grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_3_2());
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getFieldInvoquerParserRuleCall_4());
		}
		this_FieldInvoquer_6=ruleFieldInvoquer
		{
			$current = $this_FieldInvoquer_6.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getPrimaryExpressionAccess().getPrimaryExpressionAction_5_0(),
						$current);
				}
			)
			{
				newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getPointerParserRuleCall_5_1());
			}
			rulePointer
			{
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleFieldInvoquer
entryRuleFieldInvoquer returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFieldInvoquerRule()); }
	iv_ruleFieldInvoquer=ruleFieldInvoquer
	{ $current=$iv_ruleFieldInvoquer.current; }
	EOF;

// Rule FieldInvoquer
ruleFieldInvoquer returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_field_0_0=RULE_FIELD_NAME
			{
				newLeafNode(lv_field_0_0, grammarAccess.getFieldInvoquerAccess().getFieldFIELD_NAMETerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getFieldInvoquerRule());
				}
				setWithLastConsumed(
					$current,
					"field",
					lv_field_0_0,
					"org.xtext.example.mydsl.JsonDsl.FIELD_NAME");
			}
		)
	)
;

// Entry rule entryRulePointer
entryRulePointer returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPointerRule()); }
	iv_rulePointer=rulePointer
	{ $current=$iv_rulePointer.current.getText(); }
	EOF;

// Rule Pointer
rulePointer returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='?'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getPointerAccess().getQuestionMarkKeyword());
	}
;

// Entry rule entryRuleVariableCall
entryRuleVariableCall returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableCallRule()); }
	iv_ruleVariableCall=ruleVariableCall
	{ $current=$iv_ruleVariableCall.current; }
	EOF;

// Rule VariableCall
ruleVariableCall returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getVariableCallAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVariableCallRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getVariableCallAccess().getCallerAuxiliarCallerParserRuleCall_1_0());
				}
				lv_caller_1_0=ruleAuxiliarCaller
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariableCallRule());
					}
					add(
						$current,
						"caller",
						lv_caller_1_0,
						"org.xtext.example.mydsl.JsonDsl.AuxiliarCaller");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleAuxiliarCaller
entryRuleAuxiliarCaller returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAuxiliarCallerRule()); }
	iv_ruleAuxiliarCaller=ruleAuxiliarCaller
	{ $current=$iv_ruleAuxiliarCaller.current; }
	EOF;

// Rule AuxiliarCaller
ruleAuxiliarCaller returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAuxiliarCallerAccess().getFieldCallerParserRuleCall_0());
		}
		this_FieldCaller_0=ruleFieldCaller
		{
			$current = $this_FieldCaller_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAuxiliarCallerAccess().getArrayCallerParserRuleCall_1());
		}
		this_ArrayCaller_1=ruleArrayCaller
		{
			$current = $this_ArrayCaller_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleFieldCaller
entryRuleFieldCaller returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFieldCallerRule()); }
	iv_ruleFieldCaller=ruleFieldCaller
	{ $current=$iv_ruleFieldCaller.current; }
	EOF;

// Rule FieldCaller
ruleFieldCaller returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='~'
		{
			newLeafNode(otherlv_0, grammarAccess.getFieldCallerAccess().getTildeKeyword_0());
		}
		(
			(
				lv_key_1_0=RULE_FIELD_NAME
				{
					newLeafNode(lv_key_1_0, grammarAccess.getFieldCallerAccess().getKeyFIELD_NAMETerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFieldCallerRule());
					}
					setWithLastConsumed(
						$current,
						"key",
						lv_key_1_0,
						"org.xtext.example.mydsl.JsonDsl.FIELD_NAME");
				}
			)
		)
	)
;

// Entry rule entryRuleArrayCaller
entryRuleArrayCaller returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArrayCallerRule()); }
	iv_ruleArrayCaller=ruleArrayCaller
	{ $current=$iv_ruleArrayCaller.current; }
	EOF;

// Rule ArrayCaller
ruleArrayCaller returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='['
		{
			newLeafNode(otherlv_0, grammarAccess.getArrayCallerAccess().getLeftSquareBracketKeyword_0());
		}
		(
			(
				lv_index_1_0=RULE_NUMBER
				{
					newLeafNode(lv_index_1_0, grammarAccess.getArrayCallerAccess().getIndexNUMBERTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getArrayCallerRule());
					}
					addWithLastConsumed(
						$current,
						"index",
						lv_index_1_0,
						"org.xtext.example.mydsl.JsonDsl.NUMBER");
				}
			)
		)
		(
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getArrayCallerAccess().getCommaKeyword_2_0());
			}
			(
				(
					lv_index_3_0=RULE_NUMBER
					{
						newLeafNode(lv_index_3_0, grammarAccess.getArrayCallerAccess().getIndexNUMBERTerminalRuleCall_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getArrayCallerRule());
						}
						addWithLastConsumed(
							$current,
							"index",
							lv_index_3_0,
							"org.xtext.example.mydsl.JsonDsl.NUMBER");
					}
				)
			)
		)*
		otherlv_4=']'
		{
			newLeafNode(otherlv_4, grammarAccess.getArrayCallerAccess().getRightSquareBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleFunctionCall
entryRuleFunctionCall returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionCallRule()); }
	iv_ruleFunctionCall=ruleFunctionCall
	{ $current=$iv_ruleFunctionCall.current; }
	EOF;

// Rule FunctionCall
ruleFunctionCall returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getFunctionCallAccess().getLoadParserRuleCall_0());
		}
		this_Load_0=ruleLoad
		{
			$current = $this_Load_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getFunctionCallAccess().getStoreParserRuleCall_1());
		}
		this_Store_1=ruleStore
		{
			$current = $this_Store_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getFunctionCallAccess().getExportParserRuleCall_2());
		}
		this_Export_2=ruleExport
		{
			$current = $this_Export_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getFunctionCallAccess().getDepthParserRuleCall_3());
		}
		this_Depth_3=ruleDepth
		{
			$current = $this_Depth_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getFunctionCallAccess().getFieldInfoParserRuleCall_4());
		}
		this_FieldInfo_4=ruleFieldInfo
		{
			$current = $this_FieldInfo_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getFunctionCallAccess().getExtractParserRuleCall_5());
		}
		this_Extract_5=ruleExtract
		{
			$current = $this_Extract_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getFunctionCallAccess().getSelectParserRuleCall_6());
		}
		this_Select_6=ruleSelect
		{
			$current = $this_Select_6.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getFunctionCallAccess().getConcatParserRuleCall_7());
		}
		this_Concat_7=ruleConcat
		{
			$current = $this_Concat_7.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getFunctionCallAccess().getSumParserRuleCall_8());
		}
		this_Sum_8=ruleSum
		{
			$current = $this_Sum_8.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getFunctionCallAccess().getProductParserRuleCall_9());
		}
		this_Product_9=ruleProduct
		{
			$current = $this_Product_9.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getFunctionCallAccess().getMeanParserRuleCall_10());
		}
		this_Mean_10=ruleMean
		{
			$current = $this_Mean_10.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getFunctionCallAccess().getAddParserRuleCall_11());
		}
		this_Add_11=ruleAdd
		{
			$current = $this_Add_11.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getFunctionCallAccess().getInsertParserRuleCall_12());
		}
		this_Insert_12=ruleInsert
		{
			$current = $this_Insert_12.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getFunctionCallAccess().getRenameParserRuleCall_13());
		}
		this_Rename_13=ruleRename
		{
			$current = $this_Rename_13.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getFunctionCallAccess().getRemoveParserRuleCall_14());
		}
		this_Remove_14=ruleRemove
		{
			$current = $this_Remove_14.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getFunctionCallAccess().getEraseParserRuleCall_15());
		}
		this_Erase_15=ruleErase
		{
			$current = $this_Erase_15.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getFunctionCallAccess().getDeleteParserRuleCall_16());
		}
		this_Delete_16=ruleDelete
		{
			$current = $this_Delete_16.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleLoad
entryRuleLoad returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLoadRule()); }
	iv_ruleLoad=ruleLoad
	{ $current=$iv_ruleLoad.current; }
	EOF;

// Rule Load
ruleLoad returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='LOAD'
		{
			newLeafNode(otherlv_0, grammarAccess.getLoadAccess().getLOADKeyword_0());
		}
		(
			(
				lv_fileName_1_0=RULE_STRING
				{
					newLeafNode(lv_fileName_1_0, grammarAccess.getLoadAccess().getFileNameSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLoadRule());
					}
					setWithLastConsumed(
						$current,
						"fileName",
						lv_fileName_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleStore
entryRuleStore returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStoreRule()); }
	iv_ruleStore=ruleStore
	{ $current=$iv_ruleStore.current; }
	EOF;

// Rule Store
ruleStore returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='STORE'
		{
			newLeafNode(otherlv_0, grammarAccess.getStoreAccess().getSTOREKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getStoreAccess().getExpressionExpressionParserRuleCall_1_0());
				}
				lv_expression_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStoreRule());
					}
					set(
						$current,
						"expression",
						lv_expression_1_0,
						"org.xtext.example.mydsl.JsonDsl.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='IN'
		{
			newLeafNode(otherlv_2, grammarAccess.getStoreAccess().getINKeyword_2());
		}
		(
			(
				lv_fileName_3_0=RULE_STRING
				{
					newLeafNode(lv_fileName_3_0, grammarAccess.getStoreAccess().getFileNameSTRINGTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getStoreRule());
					}
					setWithLastConsumed(
						$current,
						"fileName",
						lv_fileName_3_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleExport
entryRuleExport returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExportRule()); }
	iv_ruleExport=ruleExport
	{ $current=$iv_ruleExport.current; }
	EOF;

// Rule Export
ruleExport returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='EXPORT_CSV'
		{
			newLeafNode(otherlv_0, grammarAccess.getExportAccess().getEXPORT_CSVKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getExportAccess().getExpressionExpressionParserRuleCall_1_0());
				}
				lv_expression_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExportRule());
					}
					set(
						$current,
						"expression",
						lv_expression_1_0,
						"org.xtext.example.mydsl.JsonDsl.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='IN'
		{
			newLeafNode(otherlv_2, grammarAccess.getExportAccess().getINKeyword_2());
		}
		(
			(
				lv_fileName_3_0=RULE_STRING
				{
					newLeafNode(lv_fileName_3_0, grammarAccess.getExportAccess().getFileNameSTRINGTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getExportRule());
					}
					setWithLastConsumed(
						$current,
						"fileName",
						lv_fileName_3_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleProcCall
entryRuleProcCall returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProcCallRule()); }
	iv_ruleProcCall=ruleProcCall
	{ $current=$iv_ruleProcCall.current; }
	EOF;

// Rule ProcCall
ruleProcCall returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='PRINT'
		{
			newLeafNode(otherlv_0, grammarAccess.getProcCallAccess().getPRINTKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getProcCallAccess().getExpressionExpressionParserRuleCall_1_0());
				}
				lv_expression_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProcCallRule());
					}
					set(
						$current,
						"expression",
						lv_expression_1_0,
						"org.xtext.example.mydsl.JsonDsl.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleDepth
entryRuleDepth returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDepthRule()); }
	iv_ruleDepth=ruleDepth
	{ $current=$iv_ruleDepth.current; }
	EOF;

// Rule Depth
ruleDepth returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='GET_DEPTH'
		{
			newLeafNode(otherlv_0, grammarAccess.getDepthAccess().getGET_DEPTHKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDepthAccess().getExpressionExpressionParserRuleCall_1_0());
				}
				lv_expression_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDepthRule());
					}
					set(
						$current,
						"expression",
						lv_expression_1_0,
						"org.xtext.example.mydsl.JsonDsl.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleFieldInfo
entryRuleFieldInfo returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFieldInfoRule()); }
	iv_ruleFieldInfo=ruleFieldInfo
	{ $current=$iv_ruleFieldInfo.current; }
	EOF;

// Rule FieldInfo
ruleFieldInfo returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='GET_INFOS'
		{
			newLeafNode(otherlv_0, grammarAccess.getFieldInfoAccess().getGET_INFOSKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFieldInfoAccess().getExpressionExpressionParserRuleCall_1_0());
				}
				lv_expression_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFieldInfoRule());
					}
					set(
						$current,
						"expression",
						lv_expression_1_0,
						"org.xtext.example.mydsl.JsonDsl.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleExtract
entryRuleExtract returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExtractRule()); }
	iv_ruleExtract=ruleExtract
	{ $current=$iv_ruleExtract.current; }
	EOF;

// Rule Extract
ruleExtract returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='EXTRACT'
		{
			newLeafNode(otherlv_0, grammarAccess.getExtractAccess().getEXTRACTKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getExtractAccess().getValueExpressionParserRuleCall_1_0());
				}
				lv_value_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExtractRule());
					}
					set(
						$current,
						"value",
						lv_value_1_0,
						"org.xtext.example.mydsl.JsonDsl.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getExtractAccess().getAuxiliarArithmeticAuxiliarParserRuleCall_2_0());
				}
				lv_auxiliar_2_0=ruleArithmeticAuxiliar
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExtractRule());
					}
					set(
						$current,
						"auxiliar",
						lv_auxiliar_2_0,
						"org.xtext.example.mydsl.JsonDsl.ArithmeticAuxiliar");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleSelect
entryRuleSelect returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSelectRule()); }
	iv_ruleSelect=ruleSelect
	{ $current=$iv_ruleSelect.current; }
	EOF;

// Rule Select
ruleSelect returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='SELECT'
		{
			newLeafNode(otherlv_0, grammarAccess.getSelectAccess().getSELECTKeyword_0());
		}
		(
			(
				lv_fields_1_0=RULE_FIELD_NAME
				{
					newLeafNode(lv_fields_1_0, grammarAccess.getSelectAccess().getFieldsFIELD_NAMETerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSelectRule());
					}
					addWithLastConsumed(
						$current,
						"fields",
						lv_fields_1_0,
						"org.xtext.example.mydsl.JsonDsl.FIELD_NAME");
				}
			)
		)
		(
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getSelectAccess().getCommaKeyword_2_0());
			}
			(
				(
					lv_fields_3_0=RULE_FIELD_NAME
					{
						newLeafNode(lv_fields_3_0, grammarAccess.getSelectAccess().getFieldsFIELD_NAMETerminalRuleCall_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSelectRule());
						}
						addWithLastConsumed(
							$current,
							"fields",
							lv_fields_3_0,
							"org.xtext.example.mydsl.JsonDsl.FIELD_NAME");
					}
				)
			)
		)*
		otherlv_4='FROM'
		{
			newLeafNode(otherlv_4, grammarAccess.getSelectAccess().getFROMKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSelectAccess().getFromExpressionParserRuleCall_4_0());
				}
				lv_from_5_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSelectRule());
					}
					set(
						$current,
						"from",
						lv_from_5_0,
						"org.xtext.example.mydsl.JsonDsl.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_6='WHERE'
			{
				newLeafNode(otherlv_6, grammarAccess.getSelectAccess().getWHEREKeyword_5_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSelectAccess().getConditionExpressionParserRuleCall_5_1_0());
					}
					lv_condition_7_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSelectRule());
						}
						set(
							$current,
							"condition",
							lv_condition_7_0,
							"org.xtext.example.mydsl.JsonDsl.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleConcat
entryRuleConcat returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConcatRule()); }
	iv_ruleConcat=ruleConcat
	{ $current=$iv_ruleConcat.current; }
	EOF;

// Rule Concat
ruleConcat returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='CONCAT'
		{
			newLeafNode(otherlv_0, grammarAccess.getConcatAccess().getCONCATKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConcatAccess().getFirstExpressionParserRuleCall_1_0());
				}
				lv_first_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConcatRule());
					}
					set(
						$current,
						"first",
						lv_first_1_0,
						"org.xtext.example.mydsl.JsonDsl.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='WITH'
		{
			newLeafNode(otherlv_2, grammarAccess.getConcatAccess().getWITHKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConcatAccess().getSecondExpressionParserRuleCall_3_0());
				}
				lv_second_3_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConcatRule());
					}
					set(
						$current,
						"second",
						lv_second_3_0,
						"org.xtext.example.mydsl.JsonDsl.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleSum
entryRuleSum returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSumRule()); }
	iv_ruleSum=ruleSum
	{ $current=$iv_ruleSum.current; }
	EOF;

// Rule Sum
ruleSum returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='SUM'
		{
			newLeafNode(otherlv_0, grammarAccess.getSumAccess().getSUMKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSumAccess().getExpressionExpressionParserRuleCall_1_0());
				}
				lv_expression_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSumRule());
					}
					set(
						$current,
						"expression",
						lv_expression_1_0,
						"org.xtext.example.mydsl.JsonDsl.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getSumAccess().getAuxiliarArithmeticAuxiliarParserRuleCall_2_0());
				}
				lv_auxiliar_2_0=ruleArithmeticAuxiliar
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSumRule());
					}
					set(
						$current,
						"auxiliar",
						lv_auxiliar_2_0,
						"org.xtext.example.mydsl.JsonDsl.ArithmeticAuxiliar");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleProduct
entryRuleProduct returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProductRule()); }
	iv_ruleProduct=ruleProduct
	{ $current=$iv_ruleProduct.current; }
	EOF;

// Rule Product
ruleProduct returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='PRODUCT'
		{
			newLeafNode(otherlv_0, grammarAccess.getProductAccess().getPRODUCTKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getProductAccess().getExpressionExpressionParserRuleCall_1_0());
				}
				lv_expression_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProductRule());
					}
					set(
						$current,
						"expression",
						lv_expression_1_0,
						"org.xtext.example.mydsl.JsonDsl.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getProductAccess().getAuxiliarArithmeticAuxiliarParserRuleCall_2_0());
				}
				lv_auxiliar_2_0=ruleArithmeticAuxiliar
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProductRule());
					}
					set(
						$current,
						"auxiliar",
						lv_auxiliar_2_0,
						"org.xtext.example.mydsl.JsonDsl.ArithmeticAuxiliar");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleMean
entryRuleMean returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMeanRule()); }
	iv_ruleMean=ruleMean
	{ $current=$iv_ruleMean.current; }
	EOF;

// Rule Mean
ruleMean returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='MEAN'
		{
			newLeafNode(otherlv_0, grammarAccess.getMeanAccess().getMEANKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMeanAccess().getExpressionExpressionParserRuleCall_1_0());
				}
				lv_expression_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMeanRule());
					}
					set(
						$current,
						"expression",
						lv_expression_1_0,
						"org.xtext.example.mydsl.JsonDsl.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getMeanAccess().getAuxiliarArithmeticAuxiliarParserRuleCall_2_0());
				}
				lv_auxiliar_2_0=ruleArithmeticAuxiliar
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMeanRule());
					}
					set(
						$current,
						"auxiliar",
						lv_auxiliar_2_0,
						"org.xtext.example.mydsl.JsonDsl.ArithmeticAuxiliar");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleArithmeticAuxiliar
entryRuleArithmeticAuxiliar returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArithmeticAuxiliarRule()); }
	iv_ruleArithmeticAuxiliar=ruleArithmeticAuxiliar
	{ $current=$iv_ruleArithmeticAuxiliar.current; }
	EOF;

// Rule ArithmeticAuxiliar
ruleArithmeticAuxiliar returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getArithmeticAuxiliarAccess().getArithmeticAuxiliarAction_0(),
					$current);
			}
		)
		(
			otherlv_1='ON'
			{
				newLeafNode(otherlv_1, grammarAccess.getArithmeticAuxiliarAccess().getONKeyword_1_0());
			}
			(
				(
					lv_fields_2_0=RULE_FIELD_NAME
					{
						newLeafNode(lv_fields_2_0, grammarAccess.getArithmeticAuxiliarAccess().getFieldsFIELD_NAMETerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getArithmeticAuxiliarRule());
						}
						addWithLastConsumed(
							$current,
							"fields",
							lv_fields_2_0,
							"org.xtext.example.mydsl.JsonDsl.FIELD_NAME");
					}
				)
			)
			(
				otherlv_3=','
				{
					newLeafNode(otherlv_3, grammarAccess.getArithmeticAuxiliarAccess().getCommaKeyword_1_2_0());
				}
				(
					(
						lv_fields_4_0=RULE_FIELD_NAME
						{
							newLeafNode(lv_fields_4_0, grammarAccess.getArithmeticAuxiliarAccess().getFieldsFIELD_NAMETerminalRuleCall_1_2_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getArithmeticAuxiliarRule());
							}
							addWithLastConsumed(
								$current,
								"fields",
								lv_fields_4_0,
								"org.xtext.example.mydsl.JsonDsl.FIELD_NAME");
						}
					)
				)
			)*
		)?
		(
			otherlv_5='WHERE'
			{
				newLeafNode(otherlv_5, grammarAccess.getArithmeticAuxiliarAccess().getWHEREKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getArithmeticAuxiliarAccess().getConditionExpressionParserRuleCall_2_1_0());
					}
					lv_condition_6_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getArithmeticAuxiliarRule());
						}
						set(
							$current,
							"condition",
							lv_condition_6_0,
							"org.xtext.example.mydsl.JsonDsl.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleAdd
entryRuleAdd returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAddRule()); }
	iv_ruleAdd=ruleAdd
	{ $current=$iv_ruleAdd.current; }
	EOF;

// Rule Add
ruleAdd returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='ADD'
		{
			newLeafNode(otherlv_0, grammarAccess.getAddAccess().getADDKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAddAccess().getValueExpressionParserRuleCall_1_0());
				}
				lv_value_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAddRule());
					}
					set(
						$current,
						"value",
						lv_value_1_0,
						"org.xtext.example.mydsl.JsonDsl.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='IN'
		{
			newLeafNode(otherlv_2, grammarAccess.getAddAccess().getINKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAddAccess().getVariableExpressionParserRuleCall_3_0());
				}
				lv_variable_3_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAddRule());
					}
					set(
						$current,
						"variable",
						lv_variable_3_0,
						"org.xtext.example.mydsl.JsonDsl.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_4='ON'
			{
				newLeafNode(otherlv_4, grammarAccess.getAddAccess().getONKeyword_4_0());
			}
			(
				(
					lv_fields_5_0=RULE_FIELD_NAME
					{
						newLeafNode(lv_fields_5_0, grammarAccess.getAddAccess().getFieldsFIELD_NAMETerminalRuleCall_4_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAddRule());
						}
						addWithLastConsumed(
							$current,
							"fields",
							lv_fields_5_0,
							"org.xtext.example.mydsl.JsonDsl.FIELD_NAME");
					}
				)
			)
			(
				otherlv_6=','
				{
					newLeafNode(otherlv_6, grammarAccess.getAddAccess().getCommaKeyword_4_2_0());
				}
				(
					(
						lv_fields_7_0=RULE_FIELD_NAME
						{
							newLeafNode(lv_fields_7_0, grammarAccess.getAddAccess().getFieldsFIELD_NAMETerminalRuleCall_4_2_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getAddRule());
							}
							addWithLastConsumed(
								$current,
								"fields",
								lv_fields_7_0,
								"org.xtext.example.mydsl.JsonDsl.FIELD_NAME");
						}
					)
				)
			)*
		)?
	)
;

// Entry rule entryRuleInsert
entryRuleInsert returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInsertRule()); }
	iv_ruleInsert=ruleInsert
	{ $current=$iv_ruleInsert.current; }
	EOF;

// Rule Insert
ruleInsert returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='INSERT'
		{
			newLeafNode(otherlv_0, grammarAccess.getInsertAccess().getINSERTKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getInsertAccess().getValueExpressionParserRuleCall_1_0());
				}
				lv_value_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInsertRule());
					}
					set(
						$current,
						"value",
						lv_value_1_0,
						"org.xtext.example.mydsl.JsonDsl.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='IN'
		{
			newLeafNode(otherlv_2, grammarAccess.getInsertAccess().getINKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getInsertAccess().getVariableExpressionParserRuleCall_3_0());
				}
				lv_variable_3_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInsertRule());
					}
					set(
						$current,
						"variable",
						lv_variable_3_0,
						"org.xtext.example.mydsl.JsonDsl.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getInsertAccess().getSpecifierArraySpecifierParserRuleCall_4_0());
				}
				lv_specifier_4_0=ruleArraySpecifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInsertRule());
					}
					set(
						$current,
						"specifier",
						lv_specifier_4_0,
						"org.xtext.example.mydsl.JsonDsl.ArraySpecifier");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleRename
entryRuleRename returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRenameRule()); }
	iv_ruleRename=ruleRename
	{ $current=$iv_ruleRename.current; }
	EOF;

// Rule Rename
ruleRename returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='RENAME'
		{
			newLeafNode(otherlv_0, grammarAccess.getRenameAccess().getRENAMEKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRenameAccess().getCallVariableCallParserRuleCall_1_0());
				}
				lv_call_1_0=ruleVariableCall
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRenameRule());
					}
					set(
						$current,
						"call",
						lv_call_1_0,
						"org.xtext.example.mydsl.JsonDsl.VariableCall");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='ON'
		{
			newLeafNode(otherlv_2, grammarAccess.getRenameAccess().getONKeyword_2());
		}
		(
			(
				lv_fields_3_0=RULE_FIELD_NAME
				{
					newLeafNode(lv_fields_3_0, grammarAccess.getRenameAccess().getFieldsFIELD_NAMETerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRenameRule());
					}
					addWithLastConsumed(
						$current,
						"fields",
						lv_fields_3_0,
						"org.xtext.example.mydsl.JsonDsl.FIELD_NAME");
				}
			)
		)
		(
			otherlv_4=','
			{
				newLeafNode(otherlv_4, grammarAccess.getRenameAccess().getCommaKeyword_4_0());
			}
			(
				(
					lv_fields_5_0=RULE_FIELD_NAME
					{
						newLeafNode(lv_fields_5_0, grammarAccess.getRenameAccess().getFieldsFIELD_NAMETerminalRuleCall_4_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getRenameRule());
						}
						addWithLastConsumed(
							$current,
							"fields",
							lv_fields_5_0,
							"org.xtext.example.mydsl.JsonDsl.FIELD_NAME");
					}
				)
			)
		)*
		otherlv_6='TO'
		{
			newLeafNode(otherlv_6, grammarAccess.getRenameAccess().getTOKeyword_5());
		}
		(
			(
				lv_nfields_7_0=RULE_FIELD_NAME
				{
					newLeafNode(lv_nfields_7_0, grammarAccess.getRenameAccess().getNfieldsFIELD_NAMETerminalRuleCall_6_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRenameRule());
					}
					addWithLastConsumed(
						$current,
						"nfields",
						lv_nfields_7_0,
						"org.xtext.example.mydsl.JsonDsl.FIELD_NAME");
				}
			)
		)
		(
			otherlv_8=','
			{
				newLeafNode(otherlv_8, grammarAccess.getRenameAccess().getCommaKeyword_7_0());
			}
			(
				(
					lv_nfields_9_0=RULE_FIELD_NAME
					{
						newLeafNode(lv_nfields_9_0, grammarAccess.getRenameAccess().getNfieldsFIELD_NAMETerminalRuleCall_7_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getRenameRule());
						}
						addWithLastConsumed(
							$current,
							"nfields",
							lv_nfields_9_0,
							"org.xtext.example.mydsl.JsonDsl.FIELD_NAME");
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleErase
entryRuleErase returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEraseRule()); }
	iv_ruleErase=ruleErase
	{ $current=$iv_ruleErase.current; }
	EOF;

// Rule Erase
ruleErase returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='ERASE'
		{
			newLeafNode(otherlv_0, grammarAccess.getEraseAccess().getERASEKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEraseAccess().getValueExpressionParserRuleCall_1_0());
				}
				lv_value_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEraseRule());
					}
					set(
						$current,
						"value",
						lv_value_1_0,
						"org.xtext.example.mydsl.JsonDsl.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2='ON'
			{
				newLeafNode(otherlv_2, grammarAccess.getEraseAccess().getONKeyword_2_0());
			}
			(
				(
					lv_fields_3_0=RULE_FIELD_NAME
					{
						newLeafNode(lv_fields_3_0, grammarAccess.getEraseAccess().getFieldsFIELD_NAMETerminalRuleCall_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getEraseRule());
						}
						addWithLastConsumed(
							$current,
							"fields",
							lv_fields_3_0,
							"org.xtext.example.mydsl.JsonDsl.FIELD_NAME");
					}
				)
			)
			(
				otherlv_4=','
				{
					newLeafNode(otherlv_4, grammarAccess.getEraseAccess().getCommaKeyword_2_2_0());
				}
				(
					(
						lv_fields_5_0=RULE_FIELD_NAME
						{
							newLeafNode(lv_fields_5_0, grammarAccess.getEraseAccess().getFieldsFIELD_NAMETerminalRuleCall_2_2_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getEraseRule());
							}
							addWithLastConsumed(
								$current,
								"fields",
								lv_fields_5_0,
								"org.xtext.example.mydsl.JsonDsl.FIELD_NAME");
						}
					)
				)
			)*
		)?
	)
;

// Entry rule entryRuleDelete
entryRuleDelete returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDeleteRule()); }
	iv_ruleDelete=ruleDelete
	{ $current=$iv_ruleDelete.current; }
	EOF;

// Rule Delete
ruleDelete returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='DELETE'
		{
			newLeafNode(otherlv_0, grammarAccess.getDeleteAccess().getDELETEKeyword_0());
		}
		(
			(
				lv_fields_1_0=RULE_FIELD_NAME
				{
					newLeafNode(lv_fields_1_0, grammarAccess.getDeleteAccess().getFieldsFIELD_NAMETerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDeleteRule());
					}
					addWithLastConsumed(
						$current,
						"fields",
						lv_fields_1_0,
						"org.xtext.example.mydsl.JsonDsl.FIELD_NAME");
				}
			)
		)
		(
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getDeleteAccess().getCommaKeyword_2_0());
			}
			(
				(
					lv_fields_3_0=RULE_FIELD_NAME
					{
						newLeafNode(lv_fields_3_0, grammarAccess.getDeleteAccess().getFieldsFIELD_NAMETerminalRuleCall_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDeleteRule());
						}
						addWithLastConsumed(
							$current,
							"fields",
							lv_fields_3_0,
							"org.xtext.example.mydsl.JsonDsl.FIELD_NAME");
					}
				)
			)
		)*
		otherlv_4='FROM'
		{
			newLeafNode(otherlv_4, grammarAccess.getDeleteAccess().getFROMKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDeleteAccess().getFromExpressionParserRuleCall_4_0());
				}
				lv_from_5_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDeleteRule());
					}
					set(
						$current,
						"from",
						lv_from_5_0,
						"org.xtext.example.mydsl.JsonDsl.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_6='WHERE'
			{
				newLeafNode(otherlv_6, grammarAccess.getDeleteAccess().getWHEREKeyword_5_0());
			}
			otherlv_7='('
			{
				newLeafNode(otherlv_7, grammarAccess.getDeleteAccess().getLeftParenthesisKeyword_5_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getDeleteAccess().getConditionExpressionParserRuleCall_5_2_0());
					}
					lv_condition_8_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDeleteRule());
						}
						set(
							$current,
							"condition",
							lv_condition_8_0,
							"org.xtext.example.mydsl.JsonDsl.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_9=')'
			{
				newLeafNode(otherlv_9, grammarAccess.getDeleteAccess().getRightParenthesisKeyword_5_3());
			}
		)?
	)
;

// Entry rule entryRuleRemove
entryRuleRemove returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRemoveRule()); }
	iv_ruleRemove=ruleRemove
	{ $current=$iv_ruleRemove.current; }
	EOF;

// Rule Remove
ruleRemove returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='REMOVE'
		{
			newLeafNode(otherlv_0, grammarAccess.getRemoveAccess().getREMOVEKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRemoveAccess().getVariableVariableCallParserRuleCall_1_0());
				}
				lv_variable_1_0=ruleVariableCall
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRemoveRule());
					}
					set(
						$current,
						"variable",
						lv_variable_1_0,
						"org.xtext.example.mydsl.JsonDsl.VariableCall");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getRemoveAccess().getSpecifierArraySpecifierParserRuleCall_2_0());
				}
				lv_specifier_2_0=ruleArraySpecifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRemoveRule());
					}
					set(
						$current,
						"specifier",
						lv_specifier_2_0,
						"org.xtext.example.mydsl.JsonDsl.ArraySpecifier");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleArraySpecifier
entryRuleArraySpecifier returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArraySpecifierRule()); }
	iv_ruleArraySpecifier=ruleArraySpecifier
	{ $current=$iv_ruleArraySpecifier.current; }
	EOF;

// Rule ArraySpecifier
ruleArraySpecifier returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getArraySpecifierAccess().getArraySpecifierAction_0(),
					$current);
			}
		)
		(
			otherlv_1='AT'
			{
				newLeafNode(otherlv_1, grammarAccess.getArraySpecifierAccess().getATKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getArraySpecifierAccess().getIndexExpressionParserRuleCall_1_1_0());
					}
					lv_index_2_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getArraySpecifierRule());
						}
						add(
							$current,
							"index",
							lv_index_2_0,
							"org.xtext.example.mydsl.JsonDsl.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_3=','
				{
					newLeafNode(otherlv_3, grammarAccess.getArraySpecifierAccess().getCommaKeyword_1_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getArraySpecifierAccess().getFieldsExpressionParserRuleCall_1_2_1_0());
						}
						lv_fields_4_0=ruleExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getArraySpecifierRule());
							}
							add(
								$current,
								"fields",
								lv_fields_4_0,
								"org.xtext.example.mydsl.JsonDsl.Expression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		(
			otherlv_5='WHERE'
			{
				newLeafNode(otherlv_5, grammarAccess.getArraySpecifierAccess().getWHEREKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getArraySpecifierAccess().getConditionExpressionParserRuleCall_2_1_0());
					}
					lv_condition_6_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getArraySpecifierRule());
						}
						set(
							$current,
							"condition",
							lv_condition_6_0,
							"org.xtext.example.mydsl.JsonDsl.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleConstant
entryRuleConstant returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstantRule()); }
	iv_ruleConstant=ruleConstant
	{ $current=$iv_ruleConstant.current; }
	EOF;

// Rule Constant
ruleConstant returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getConstantAccess().getConstantAction_0_0(),
						$current);
				}
			)
			{
				newCompositeNode(grammarAccess.getConstantAccess().getPrimitiveParserRuleCall_0_1());
			}
			rulePrimitive
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getConstantAccess().getArrayParserRuleCall_1());
		}
		this_Array_2=ruleArray
		{
			$current = $this_Array_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getConstantAccess().getObjectParserRuleCall_2());
		}
		this_Object_3=ruleObject
		{
			$current = $this_Object_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulePrimitive
entryRulePrimitive returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPrimitiveRule()); }
	iv_rulePrimitive=rulePrimitive
	{ $current=$iv_rulePrimitive.current.getText(); }
	EOF;

// Rule Primitive
rulePrimitive returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STRING_0=RULE_STRING
		{
			$current.merge(this_STRING_0);
		}
		{
			newLeafNode(this_STRING_0, grammarAccess.getPrimitiveAccess().getSTRINGTerminalRuleCall_0());
		}
		    |
		this_NUMBER_1=RULE_NUMBER
		{
			$current.merge(this_NUMBER_1);
		}
		{
			newLeafNode(this_NUMBER_1, grammarAccess.getPrimitiveAccess().getNUMBERTerminalRuleCall_1());
		}
		    |
		this_BOOL_2=RULE_BOOL
		{
			$current.merge(this_BOOL_2);
		}
		{
			newLeafNode(this_BOOL_2, grammarAccess.getPrimitiveAccess().getBOOLTerminalRuleCall_2());
		}
		    |
		this_NULL_3=RULE_NULL
		{
			$current.merge(this_NULL_3);
		}
		{
			newLeafNode(this_NULL_3, grammarAccess.getPrimitiveAccess().getNULLTerminalRuleCall_3());
		}
	)
;

// Entry rule entryRuleArray
entryRuleArray returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArrayRule()); }
	iv_ruleArray=ruleArray
	{ $current=$iv_ruleArray.current; }
	EOF;

// Rule Array
ruleArray returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getArrayAccess().getArrayAction_0(),
					$current);
			}
		)
		otherlv_1='['
		{
			newLeafNode(otherlv_1, grammarAccess.getArrayAccess().getLeftSquareBracketKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getArrayAccess().getValuesExpressionParserRuleCall_2_0_0());
					}
					lv_values_2_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getArrayRule());
						}
						add(
							$current,
							"values",
							lv_values_2_0,
							"org.xtext.example.mydsl.JsonDsl.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_3=','
				{
					newLeafNode(otherlv_3, grammarAccess.getArrayAccess().getCommaKeyword_2_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getArrayAccess().getValuesExpressionParserRuleCall_2_1_1_0());
						}
						lv_values_4_0=ruleExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getArrayRule());
							}
							add(
								$current,
								"values",
								lv_values_4_0,
								"org.xtext.example.mydsl.JsonDsl.Expression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_5=']'
		{
			newLeafNode(otherlv_5, grammarAccess.getArrayAccess().getRightSquareBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleObject
entryRuleObject returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getObjectRule()); }
	iv_ruleObject=ruleObject
	{ $current=$iv_ruleObject.current; }
	EOF;

// Rule Object
ruleObject returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getObjectAccess().getObjectAction_0(),
					$current);
			}
		)
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getObjectAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getObjectAccess().getFieldsFieldParserRuleCall_2_0_0());
					}
					lv_fields_2_0=ruleField
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getObjectRule());
						}
						add(
							$current,
							"fields",
							lv_fields_2_0,
							"org.xtext.example.mydsl.JsonDsl.Field");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_3=','
				{
					newLeafNode(otherlv_3, grammarAccess.getObjectAccess().getCommaKeyword_2_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getObjectAccess().getFieldsFieldParserRuleCall_2_1_1_0());
						}
						lv_fields_4_0=ruleField
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getObjectRule());
							}
							add(
								$current,
								"fields",
								lv_fields_4_0,
								"org.xtext.example.mydsl.JsonDsl.Field");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getObjectAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleField
entryRuleField returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFieldRule()); }
	iv_ruleField=ruleField
	{ $current=$iv_ruleField.current; }
	EOF;

// Rule Field
ruleField returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_key_0_0=RULE_FIELD_NAME
				{
					newLeafNode(lv_key_0_0, grammarAccess.getFieldAccess().getKeyFIELD_NAMETerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFieldRule());
					}
					setWithLastConsumed(
						$current,
						"key",
						lv_key_0_0,
						"org.xtext.example.mydsl.JsonDsl.FIELD_NAME");
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getFieldAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFieldAccess().getValueExpressionParserRuleCall_2_0());
				}
				lv_value_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFieldRule());
					}
					set(
						$current,
						"value",
						lv_value_2_0,
						"org.xtext.example.mydsl.JsonDsl.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

RULE_FIELD_NAME : '$' RULE_ID;

RULE_NULL : 'null';

RULE_BOOL : ('true'|'false');

RULE_NUMBER : (RULE_INT|RULE_DOUBLE);

fragment RULE_DOUBLE : RULE_INT+ '.' RULE_INT*;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

fragment RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
