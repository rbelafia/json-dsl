/**
 * generated by Xtext 2.23.0
 */
package org.xtext.example.mydsl.jsonDsl.util;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

import org.xtext.example.mydsl.jsonDsl.Add;
import org.xtext.example.mydsl.jsonDsl.AddExpression;
import org.xtext.example.mydsl.jsonDsl.AndExpression;
import org.xtext.example.mydsl.jsonDsl.ArithmeticAuxiliar;
import org.xtext.example.mydsl.jsonDsl.Array;
import org.xtext.example.mydsl.jsonDsl.ArrayCaller;
import org.xtext.example.mydsl.jsonDsl.ArraySpecifier;
import org.xtext.example.mydsl.jsonDsl.Assignment;
import org.xtext.example.mydsl.jsonDsl.AuxiliarCaller;
import org.xtext.example.mydsl.jsonDsl.BinaryExpression;
import org.xtext.example.mydsl.jsonDsl.CompExpression;
import org.xtext.example.mydsl.jsonDsl.Concat;
import org.xtext.example.mydsl.jsonDsl.Constant;
import org.xtext.example.mydsl.jsonDsl.Delete;
import org.xtext.example.mydsl.jsonDsl.Depth;
import org.xtext.example.mydsl.jsonDsl.EqExpression;
import org.xtext.example.mydsl.jsonDsl.Erase;
import org.xtext.example.mydsl.jsonDsl.Export;
import org.xtext.example.mydsl.jsonDsl.Expression;
import org.xtext.example.mydsl.jsonDsl.Extract;
import org.xtext.example.mydsl.jsonDsl.Field;
import org.xtext.example.mydsl.jsonDsl.FieldCaller;
import org.xtext.example.mydsl.jsonDsl.FieldInfo;
import org.xtext.example.mydsl.jsonDsl.FieldInvoquer;
import org.xtext.example.mydsl.jsonDsl.FunctionCall;
import org.xtext.example.mydsl.jsonDsl.Insert;
import org.xtext.example.mydsl.jsonDsl.JsonDslPackage;
import org.xtext.example.mydsl.jsonDsl.Load;
import org.xtext.example.mydsl.jsonDsl.Mean;
import org.xtext.example.mydsl.jsonDsl.Model;
import org.xtext.example.mydsl.jsonDsl.MultExpression;
import org.xtext.example.mydsl.jsonDsl.NegationExpression;
import org.xtext.example.mydsl.jsonDsl.OrExpression;
import org.xtext.example.mydsl.jsonDsl.PrimaryExpression;
import org.xtext.example.mydsl.jsonDsl.ProcCall;
import org.xtext.example.mydsl.jsonDsl.Product;
import org.xtext.example.mydsl.jsonDsl.Remove;
import org.xtext.example.mydsl.jsonDsl.Rename;
import org.xtext.example.mydsl.jsonDsl.Select;
import org.xtext.example.mydsl.jsonDsl.SimpleStatement;
import org.xtext.example.mydsl.jsonDsl.Store;
import org.xtext.example.mydsl.jsonDsl.Sum;
import org.xtext.example.mydsl.jsonDsl.UnaryMinusExpression;
import org.xtext.example.mydsl.jsonDsl.VariableCall;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see org.xtext.example.mydsl.jsonDsl.JsonDslPackage
 * @generated
 */
public class JsonDslSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static JsonDslPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public JsonDslSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = JsonDslPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case JsonDslPackage.MODEL:
      {
        Model model = (Model)theEObject;
        T result = caseModel(model);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JsonDslPackage.SIMPLE_STATEMENT:
      {
        SimpleStatement simpleStatement = (SimpleStatement)theEObject;
        T result = caseSimpleStatement(simpleStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JsonDslPackage.ASSIGNMENT:
      {
        Assignment assignment = (Assignment)theEObject;
        T result = caseAssignment(assignment);
        if (result == null) result = caseSimpleStatement(assignment);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JsonDslPackage.EXPRESSION:
      {
        Expression expression = (Expression)theEObject;
        T result = caseExpression(expression);
        if (result == null) result = caseSimpleStatement(expression);
        if (result == null) result = casePrimaryExpression(expression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JsonDslPackage.BINARY_EXPRESSION:
      {
        BinaryExpression binaryExpression = (BinaryExpression)theEObject;
        T result = caseBinaryExpression(binaryExpression);
        if (result == null) result = caseExpression(binaryExpression);
        if (result == null) result = caseSimpleStatement(binaryExpression);
        if (result == null) result = casePrimaryExpression(binaryExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JsonDslPackage.OR_EXPRESSION:
      {
        OrExpression orExpression = (OrExpression)theEObject;
        T result = caseOrExpression(orExpression);
        if (result == null) result = caseBinaryExpression(orExpression);
        if (result == null) result = caseExpression(orExpression);
        if (result == null) result = caseSimpleStatement(orExpression);
        if (result == null) result = casePrimaryExpression(orExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JsonDslPackage.AND_EXPRESSION:
      {
        AndExpression andExpression = (AndExpression)theEObject;
        T result = caseAndExpression(andExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JsonDslPackage.EQ_EXPRESSION:
      {
        EqExpression eqExpression = (EqExpression)theEObject;
        T result = caseEqExpression(eqExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JsonDslPackage.COMP_EXPRESSION:
      {
        CompExpression compExpression = (CompExpression)theEObject;
        T result = caseCompExpression(compExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JsonDslPackage.ADD_EXPRESSION:
      {
        AddExpression addExpression = (AddExpression)theEObject;
        T result = caseAddExpression(addExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JsonDslPackage.MULT_EXPRESSION:
      {
        MultExpression multExpression = (MultExpression)theEObject;
        T result = caseMultExpression(multExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JsonDslPackage.UNARY_MINUS_EXPRESSION:
      {
        UnaryMinusExpression unaryMinusExpression = (UnaryMinusExpression)theEObject;
        T result = caseUnaryMinusExpression(unaryMinusExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JsonDslPackage.NEGATION_EXPRESSION:
      {
        NegationExpression negationExpression = (NegationExpression)theEObject;
        T result = caseNegationExpression(negationExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JsonDslPackage.PRIMARY_EXPRESSION:
      {
        PrimaryExpression primaryExpression = (PrimaryExpression)theEObject;
        T result = casePrimaryExpression(primaryExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JsonDslPackage.FIELD_INVOQUER:
      {
        FieldInvoquer fieldInvoquer = (FieldInvoquer)theEObject;
        T result = caseFieldInvoquer(fieldInvoquer);
        if (result == null) result = casePrimaryExpression(fieldInvoquer);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JsonDslPackage.VARIABLE_CALL:
      {
        VariableCall variableCall = (VariableCall)theEObject;
        T result = caseVariableCall(variableCall);
        if (result == null) result = casePrimaryExpression(variableCall);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JsonDslPackage.AUXILIAR_CALLER:
      {
        AuxiliarCaller auxiliarCaller = (AuxiliarCaller)theEObject;
        T result = caseAuxiliarCaller(auxiliarCaller);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JsonDslPackage.FIELD_CALLER:
      {
        FieldCaller fieldCaller = (FieldCaller)theEObject;
        T result = caseFieldCaller(fieldCaller);
        if (result == null) result = caseAuxiliarCaller(fieldCaller);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JsonDslPackage.ARRAY_CALLER:
      {
        ArrayCaller arrayCaller = (ArrayCaller)theEObject;
        T result = caseArrayCaller(arrayCaller);
        if (result == null) result = caseAuxiliarCaller(arrayCaller);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JsonDslPackage.FUNCTION_CALL:
      {
        FunctionCall functionCall = (FunctionCall)theEObject;
        T result = caseFunctionCall(functionCall);
        if (result == null) result = casePrimaryExpression(functionCall);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JsonDslPackage.LOAD:
      {
        Load load = (Load)theEObject;
        T result = caseLoad(load);
        if (result == null) result = caseFunctionCall(load);
        if (result == null) result = casePrimaryExpression(load);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JsonDslPackage.STORE:
      {
        Store store = (Store)theEObject;
        T result = caseStore(store);
        if (result == null) result = caseFunctionCall(store);
        if (result == null) result = casePrimaryExpression(store);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JsonDslPackage.EXPORT:
      {
        Export export = (Export)theEObject;
        T result = caseExport(export);
        if (result == null) result = caseFunctionCall(export);
        if (result == null) result = casePrimaryExpression(export);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JsonDslPackage.PROC_CALL:
      {
        ProcCall procCall = (ProcCall)theEObject;
        T result = caseProcCall(procCall);
        if (result == null) result = caseSimpleStatement(procCall);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JsonDslPackage.DEPTH:
      {
        Depth depth = (Depth)theEObject;
        T result = caseDepth(depth);
        if (result == null) result = caseFunctionCall(depth);
        if (result == null) result = casePrimaryExpression(depth);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JsonDslPackage.FIELD_INFO:
      {
        FieldInfo fieldInfo = (FieldInfo)theEObject;
        T result = caseFieldInfo(fieldInfo);
        if (result == null) result = caseFunctionCall(fieldInfo);
        if (result == null) result = casePrimaryExpression(fieldInfo);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JsonDslPackage.EXTRACT:
      {
        Extract extract = (Extract)theEObject;
        T result = caseExtract(extract);
        if (result == null) result = caseFunctionCall(extract);
        if (result == null) result = casePrimaryExpression(extract);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JsonDslPackage.SELECT:
      {
        Select select = (Select)theEObject;
        T result = caseSelect(select);
        if (result == null) result = caseFunctionCall(select);
        if (result == null) result = casePrimaryExpression(select);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JsonDslPackage.CONCAT:
      {
        Concat concat = (Concat)theEObject;
        T result = caseConcat(concat);
        if (result == null) result = caseFunctionCall(concat);
        if (result == null) result = casePrimaryExpression(concat);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JsonDslPackage.SUM:
      {
        Sum sum = (Sum)theEObject;
        T result = caseSum(sum);
        if (result == null) result = caseFunctionCall(sum);
        if (result == null) result = casePrimaryExpression(sum);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JsonDslPackage.PRODUCT:
      {
        Product product = (Product)theEObject;
        T result = caseProduct(product);
        if (result == null) result = caseFunctionCall(product);
        if (result == null) result = casePrimaryExpression(product);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JsonDslPackage.MEAN:
      {
        Mean mean = (Mean)theEObject;
        T result = caseMean(mean);
        if (result == null) result = caseFunctionCall(mean);
        if (result == null) result = casePrimaryExpression(mean);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JsonDslPackage.ARITHMETIC_AUXILIAR:
      {
        ArithmeticAuxiliar arithmeticAuxiliar = (ArithmeticAuxiliar)theEObject;
        T result = caseArithmeticAuxiliar(arithmeticAuxiliar);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JsonDslPackage.ADD:
      {
        Add add = (Add)theEObject;
        T result = caseAdd(add);
        if (result == null) result = caseFunctionCall(add);
        if (result == null) result = casePrimaryExpression(add);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JsonDslPackage.INSERT:
      {
        Insert insert = (Insert)theEObject;
        T result = caseInsert(insert);
        if (result == null) result = caseFunctionCall(insert);
        if (result == null) result = casePrimaryExpression(insert);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JsonDslPackage.RENAME:
      {
        Rename rename = (Rename)theEObject;
        T result = caseRename(rename);
        if (result == null) result = caseFunctionCall(rename);
        if (result == null) result = casePrimaryExpression(rename);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JsonDslPackage.ERASE:
      {
        Erase erase = (Erase)theEObject;
        T result = caseErase(erase);
        if (result == null) result = caseFunctionCall(erase);
        if (result == null) result = casePrimaryExpression(erase);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JsonDslPackage.DELETE:
      {
        Delete delete = (Delete)theEObject;
        T result = caseDelete(delete);
        if (result == null) result = caseFunctionCall(delete);
        if (result == null) result = casePrimaryExpression(delete);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JsonDslPackage.REMOVE:
      {
        Remove remove = (Remove)theEObject;
        T result = caseRemove(remove);
        if (result == null) result = caseFunctionCall(remove);
        if (result == null) result = casePrimaryExpression(remove);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JsonDslPackage.ARRAY_SPECIFIER:
      {
        ArraySpecifier arraySpecifier = (ArraySpecifier)theEObject;
        T result = caseArraySpecifier(arraySpecifier);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JsonDslPackage.CONSTANT:
      {
        Constant constant = (Constant)theEObject;
        T result = caseConstant(constant);
        if (result == null) result = casePrimaryExpression(constant);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JsonDslPackage.ARRAY:
      {
        Array array = (Array)theEObject;
        T result = caseArray(array);
        if (result == null) result = caseConstant(array);
        if (result == null) result = casePrimaryExpression(array);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JsonDslPackage.OBJECT:
      {
        org.xtext.example.mydsl.jsonDsl.Object object = (org.xtext.example.mydsl.jsonDsl.Object)theEObject;
        T result = caseObject(object);
        if (result == null) result = caseConstant(object);
        if (result == null) result = casePrimaryExpression(object);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JsonDslPackage.FIELD:
      {
        Field field = (Field)theEObject;
        T result = caseField(field);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Model</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Model</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseModel(Model object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Simple Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Simple Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSimpleStatement(SimpleStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Assignment</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Assignment</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAssignment(Assignment object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpression(Expression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Binary Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Binary Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBinaryExpression(BinaryExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Or Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Or Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOrExpression(OrExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>And Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>And Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAndExpression(AndExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Eq Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Eq Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEqExpression(EqExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Comp Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Comp Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCompExpression(CompExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Add Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Add Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAddExpression(AddExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Mult Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Mult Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMultExpression(MultExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Unary Minus Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Unary Minus Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseUnaryMinusExpression(UnaryMinusExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Negation Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Negation Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNegationExpression(NegationExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Primary Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Primary Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePrimaryExpression(PrimaryExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Field Invoquer</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Field Invoquer</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFieldInvoquer(FieldInvoquer object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Variable Call</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Variable Call</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVariableCall(VariableCall object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Auxiliar Caller</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Auxiliar Caller</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAuxiliarCaller(AuxiliarCaller object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Field Caller</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Field Caller</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFieldCaller(FieldCaller object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Array Caller</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Array Caller</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseArrayCaller(ArrayCaller object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Function Call</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Function Call</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFunctionCall(FunctionCall object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Load</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Load</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLoad(Load object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Store</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Store</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStore(Store object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Export</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Export</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExport(Export object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Proc Call</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Proc Call</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseProcCall(ProcCall object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Depth</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Depth</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDepth(Depth object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Field Info</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Field Info</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFieldInfo(FieldInfo object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Extract</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Extract</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExtract(Extract object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Select</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Select</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSelect(Select object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Concat</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Concat</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConcat(Concat object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Sum</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Sum</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSum(Sum object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Product</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Product</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseProduct(Product object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Mean</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Mean</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMean(Mean object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Arithmetic Auxiliar</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Arithmetic Auxiliar</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseArithmeticAuxiliar(ArithmeticAuxiliar object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Add</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Add</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAdd(Add object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Insert</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Insert</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInsert(Insert object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Rename</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Rename</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRename(Rename object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Erase</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Erase</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseErase(Erase object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Delete</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Delete</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDelete(Delete object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Remove</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Remove</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRemove(Remove object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Array Specifier</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Array Specifier</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseArraySpecifier(ArraySpecifier object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Constant</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Constant</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConstant(Constant object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Array</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Array</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseArray(Array object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Object</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Object</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseObject(org.xtext.example.mydsl.jsonDsl.Object object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Field</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Field</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseField(Field object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //JsonDslSwitch
