/**
 * generated by Xtext 2.23.0
 */
package org.xtext.example.mydsl.jsonDsl.util;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

import org.xtext.example.mydsl.jsonDsl.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see org.xtext.example.mydsl.jsonDsl.JsonDslPackage
 * @generated
 */
public class JsonDslSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static JsonDslPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public JsonDslSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = JsonDslPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case JsonDslPackage.MODEL:
      {
        Model model = (Model)theEObject;
        T result = caseModel(model);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JsonDslPackage.SIMPLE_STATEMENT:
      {
        SimpleStatement simpleStatement = (SimpleStatement)theEObject;
        T result = caseSimpleStatement(simpleStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JsonDslPackage.ASSIGNMENT:
      {
        Assignment assignment = (Assignment)theEObject;
        T result = caseAssignment(assignment);
        if (result == null) result = caseSimpleStatement(assignment);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JsonDslPackage.EXPRESSION:
      {
        Expression expression = (Expression)theEObject;
        T result = caseExpression(expression);
        if (result == null) result = caseSimpleStatement(expression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JsonDslPackage.UNARY_MINUS_EXPRESSION:
      {
        UnaryMinusExpression unaryMinusExpression = (UnaryMinusExpression)theEObject;
        T result = caseUnaryMinusExpression(unaryMinusExpression);
        if (result == null) result = caseExpression(unaryMinusExpression);
        if (result == null) result = caseSimpleStatement(unaryMinusExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JsonDslPackage.UNARY_PLUS_EXPRESSION:
      {
        UnaryPlusExpression unaryPlusExpression = (UnaryPlusExpression)theEObject;
        T result = caseUnaryPlusExpression(unaryPlusExpression);
        if (result == null) result = caseExpression(unaryPlusExpression);
        if (result == null) result = caseSimpleStatement(unaryPlusExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JsonDslPackage.LOGICAL_NEGATION_EXPRESSION:
      {
        LogicalNegationExpression logicalNegationExpression = (LogicalNegationExpression)theEObject;
        T result = caseLogicalNegationExpression(logicalNegationExpression);
        if (result == null) result = caseExpression(logicalNegationExpression);
        if (result == null) result = caseSimpleStatement(logicalNegationExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JsonDslPackage.BRACKET_EXPRESSION:
      {
        BracketExpression bracketExpression = (BracketExpression)theEObject;
        T result = caseBracketExpression(bracketExpression);
        if (result == null) result = caseExpression(bracketExpression);
        if (result == null) result = caseSimpleStatement(bracketExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JsonDslPackage.POINTER_CALL:
      {
        PointerCall pointerCall = (PointerCall)theEObject;
        T result = casePointerCall(pointerCall);
        if (result == null) result = caseExpression(pointerCall);
        if (result == null) result = caseSimpleStatement(pointerCall);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JsonDslPackage.VARIABLE_CALL:
      {
        VariableCall variableCall = (VariableCall)theEObject;
        T result = caseVariableCall(variableCall);
        if (result == null) result = caseExpression(variableCall);
        if (result == null) result = caseSimpleStatement(variableCall);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JsonDslPackage.ARRAY_SPECIFIER:
      {
        ArraySpecifier arraySpecifier = (ArraySpecifier)theEObject;
        T result = caseArraySpecifier(arraySpecifier);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JsonDslPackage.UNARY_SPECIFIER:
      {
        UnarySpecifier unarySpecifier = (UnarySpecifier)theEObject;
        T result = caseUnarySpecifier(unarySpecifier);
        if (result == null) result = caseArraySpecifier(unarySpecifier);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JsonDslPackage.RANGE_SPECIFIER:
      {
        RangeSpecifier rangeSpecifier = (RangeSpecifier)theEObject;
        T result = caseRangeSpecifier(rangeSpecifier);
        if (result == null) result = caseArraySpecifier(rangeSpecifier);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JsonDslPackage.IO_FUNCTIONS:
      {
        IOFunctions ioFunctions = (IOFunctions)theEObject;
        T result = caseIOFunctions(ioFunctions);
        if (result == null) result = caseExpression(ioFunctions);
        if (result == null) result = caseSimpleStatement(ioFunctions);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JsonDslPackage.INFO_FUNCTIONS:
      {
        InfoFunctions infoFunctions = (InfoFunctions)theEObject;
        T result = caseInfoFunctions(infoFunctions);
        if (result == null) result = caseExpression(infoFunctions);
        if (result == null) result = caseSimpleStatement(infoFunctions);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JsonDslPackage.MANIP_FUNCTIONS:
      {
        ManipFunctions manipFunctions = (ManipFunctions)theEObject;
        T result = caseManipFunctions(manipFunctions);
        if (result == null) result = caseExpression(manipFunctions);
        if (result == null) result = caseSimpleStatement(manipFunctions);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JsonDslPackage.ARITH_FUNCTIONS:
      {
        ArithFunctions arithFunctions = (ArithFunctions)theEObject;
        T result = caseArithFunctions(arithFunctions);
        if (result == null) result = caseExpression(arithFunctions);
        if (result == null) result = caseSimpleStatement(arithFunctions);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JsonDslPackage.ALTER_FUNCTIONS:
      {
        AlterFunctions alterFunctions = (AlterFunctions)theEObject;
        T result = caseAlterFunctions(alterFunctions);
        if (result == null) result = caseExpression(alterFunctions);
        if (result == null) result = caseSimpleStatement(alterFunctions);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JsonDslPackage.LOAD:
      {
        Load load = (Load)theEObject;
        T result = caseLoad(load);
        if (result == null) result = caseIOFunctions(load);
        if (result == null) result = caseExpression(load);
        if (result == null) result = caseSimpleStatement(load);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JsonDslPackage.STORE:
      {
        Store store = (Store)theEObject;
        T result = caseStore(store);
        if (result == null) result = caseIOFunctions(store);
        if (result == null) result = caseExpression(store);
        if (result == null) result = caseSimpleStatement(store);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JsonDslPackage.EXPORT:
      {
        Export export = (Export)theEObject;
        T result = caseExport(export);
        if (result == null) result = caseIOFunctions(export);
        if (result == null) result = caseExpression(export);
        if (result == null) result = caseSimpleStatement(export);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JsonDslPackage.PRINT:
      {
        Print print = (Print)theEObject;
        T result = casePrint(print);
        if (result == null) result = caseSimpleStatement(print);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JsonDslPackage.DEPTH:
      {
        Depth depth = (Depth)theEObject;
        T result = caseDepth(depth);
        if (result == null) result = caseInfoFunctions(depth);
        if (result == null) result = caseExpression(depth);
        if (result == null) result = caseSimpleStatement(depth);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JsonDslPackage.FIELD_INFO:
      {
        FieldInfo fieldInfo = (FieldInfo)theEObject;
        T result = caseFieldInfo(fieldInfo);
        if (result == null) result = caseInfoFunctions(fieldInfo);
        if (result == null) result = caseExpression(fieldInfo);
        if (result == null) result = caseSimpleStatement(fieldInfo);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JsonDslPackage.CONTAINS:
      {
        Contains contains = (Contains)theEObject;
        T result = caseContains(contains);
        if (result == null) result = caseInfoFunctions(contains);
        if (result == null) result = caseExpression(contains);
        if (result == null) result = caseSimpleStatement(contains);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JsonDslPackage.SELECT:
      {
        Select select = (Select)theEObject;
        T result = caseSelect(select);
        if (result == null) result = caseManipFunctions(select);
        if (result == null) result = caseExpression(select);
        if (result == null) result = caseSimpleStatement(select);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JsonDslPackage.CONCAT:
      {
        Concat concat = (Concat)theEObject;
        T result = caseConcat(concat);
        if (result == null) result = caseManipFunctions(concat);
        if (result == null) result = caseExpression(concat);
        if (result == null) result = caseSimpleStatement(concat);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JsonDslPackage.LENGTH:
      {
        Length length = (Length)theEObject;
        T result = caseLength(length);
        if (result == null) result = caseInfoFunctions(length);
        if (result == null) result = caseExpression(length);
        if (result == null) result = caseSimpleStatement(length);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JsonDslPackage.SUM:
      {
        Sum sum = (Sum)theEObject;
        T result = caseSum(sum);
        if (result == null) result = caseArithFunctions(sum);
        if (result == null) result = caseExpression(sum);
        if (result == null) result = caseSimpleStatement(sum);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JsonDslPackage.PRODUCT:
      {
        Product product = (Product)theEObject;
        T result = caseProduct(product);
        if (result == null) result = caseArithFunctions(product);
        if (result == null) result = caseExpression(product);
        if (result == null) result = caseSimpleStatement(product);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JsonDslPackage.DELETE:
      {
        Delete delete = (Delete)theEObject;
        T result = caseDelete(delete);
        if (result == null) result = caseAlterFunctions(delete);
        if (result == null) result = caseExpression(delete);
        if (result == null) result = caseSimpleStatement(delete);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JsonDslPackage.CONSTANT:
      {
        Constant constant = (Constant)theEObject;
        T result = caseConstant(constant);
        if (result == null) result = caseExpression(constant);
        if (result == null) result = caseSimpleStatement(constant);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JsonDslPackage.PRIMITIVE:
      {
        Primitive primitive = (Primitive)theEObject;
        T result = casePrimitive(primitive);
        if (result == null) result = caseConstant(primitive);
        if (result == null) result = caseExpression(primitive);
        if (result == null) result = caseSimpleStatement(primitive);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JsonDslPackage.ARRAY:
      {
        Array array = (Array)theEObject;
        T result = caseArray(array);
        if (result == null) result = caseConstant(array);
        if (result == null) result = caseExpression(array);
        if (result == null) result = caseSimpleStatement(array);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JsonDslPackage.JSON_OBJECT:
      {
        JSonObject jSonObject = (JSonObject)theEObject;
        T result = caseJSonObject(jSonObject);
        if (result == null) result = caseConstant(jSonObject);
        if (result == null) result = caseExpression(jSonObject);
        if (result == null) result = caseSimpleStatement(jSonObject);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JsonDslPackage.FIELD:
      {
        Field field = (Field)theEObject;
        T result = caseField(field);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JsonDslPackage.DISJUNCTION_EXPRESSION:
      {
        DisjunctionExpression disjunctionExpression = (DisjunctionExpression)theEObject;
        T result = caseDisjunctionExpression(disjunctionExpression);
        if (result == null) result = caseExpression(disjunctionExpression);
        if (result == null) result = caseSimpleStatement(disjunctionExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JsonDslPackage.CONJUNCTION_EXPRESSION:
      {
        ConjunctionExpression conjunctionExpression = (ConjunctionExpression)theEObject;
        T result = caseConjunctionExpression(conjunctionExpression);
        if (result == null) result = caseExpression(conjunctionExpression);
        if (result == null) result = caseSimpleStatement(conjunctionExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JsonDslPackage.EQUALITY_EXPRESSION:
      {
        EqualityExpression equalityExpression = (EqualityExpression)theEObject;
        T result = caseEqualityExpression(equalityExpression);
        if (result == null) result = caseExpression(equalityExpression);
        if (result == null) result = caseSimpleStatement(equalityExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JsonDslPackage.INEQUALITY_EXPRESSION:
      {
        InequalityExpression inequalityExpression = (InequalityExpression)theEObject;
        T result = caseInequalityExpression(inequalityExpression);
        if (result == null) result = caseExpression(inequalityExpression);
        if (result == null) result = caseSimpleStatement(inequalityExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JsonDslPackage.STRICT_EQUALITY_EXPRESSION:
      {
        StrictEqualityExpression strictEqualityExpression = (StrictEqualityExpression)theEObject;
        T result = caseStrictEqualityExpression(strictEqualityExpression);
        if (result == null) result = caseExpression(strictEqualityExpression);
        if (result == null) result = caseSimpleStatement(strictEqualityExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JsonDslPackage.STRICT_INEQUALITY_EXPRESSION:
      {
        StrictInequalityExpression strictInequalityExpression = (StrictInequalityExpression)theEObject;
        T result = caseStrictInequalityExpression(strictInequalityExpression);
        if (result == null) result = caseExpression(strictInequalityExpression);
        if (result == null) result = caseSimpleStatement(strictInequalityExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JsonDslPackage.SUPERIOR_EXPRESSION:
      {
        SuperiorExpression superiorExpression = (SuperiorExpression)theEObject;
        T result = caseSuperiorExpression(superiorExpression);
        if (result == null) result = caseExpression(superiorExpression);
        if (result == null) result = caseSimpleStatement(superiorExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JsonDslPackage.SUPERIOR_OR_EQUAL_EXPRESSION:
      {
        SuperiorOrEqualExpression superiorOrEqualExpression = (SuperiorOrEqualExpression)theEObject;
        T result = caseSuperiorOrEqualExpression(superiorOrEqualExpression);
        if (result == null) result = caseExpression(superiorOrEqualExpression);
        if (result == null) result = caseSimpleStatement(superiorOrEqualExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JsonDslPackage.INFERIOR_EXPRESSION:
      {
        InferiorExpression inferiorExpression = (InferiorExpression)theEObject;
        T result = caseInferiorExpression(inferiorExpression);
        if (result == null) result = caseExpression(inferiorExpression);
        if (result == null) result = caseSimpleStatement(inferiorExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JsonDslPackage.INFERIOR_OR_EQUAL_EXPRESSION:
      {
        InferiorOrEqualExpression inferiorOrEqualExpression = (InferiorOrEqualExpression)theEObject;
        T result = caseInferiorOrEqualExpression(inferiorOrEqualExpression);
        if (result == null) result = caseExpression(inferiorOrEqualExpression);
        if (result == null) result = caseSimpleStatement(inferiorOrEqualExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JsonDslPackage.ADDITION_EXPRESSION:
      {
        AdditionExpression additionExpression = (AdditionExpression)theEObject;
        T result = caseAdditionExpression(additionExpression);
        if (result == null) result = caseExpression(additionExpression);
        if (result == null) result = caseSimpleStatement(additionExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JsonDslPackage.SUBSTRACTION_EXPRESSION:
      {
        SubstractionExpression substractionExpression = (SubstractionExpression)theEObject;
        T result = caseSubstractionExpression(substractionExpression);
        if (result == null) result = caseExpression(substractionExpression);
        if (result == null) result = caseSimpleStatement(substractionExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JsonDslPackage.MULTIPLICATION_EXPRESSION:
      {
        MultiplicationExpression multiplicationExpression = (MultiplicationExpression)theEObject;
        T result = caseMultiplicationExpression(multiplicationExpression);
        if (result == null) result = caseExpression(multiplicationExpression);
        if (result == null) result = caseSimpleStatement(multiplicationExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JsonDslPackage.DIVISION_EXPRESSION:
      {
        DivisionExpression divisionExpression = (DivisionExpression)theEObject;
        T result = caseDivisionExpression(divisionExpression);
        if (result == null) result = caseExpression(divisionExpression);
        if (result == null) result = caseSimpleStatement(divisionExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JsonDslPackage.MODULO_EXPRESSION:
      {
        ModuloExpression moduloExpression = (ModuloExpression)theEObject;
        T result = caseModuloExpression(moduloExpression);
        if (result == null) result = caseExpression(moduloExpression);
        if (result == null) result = caseSimpleStatement(moduloExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JsonDslPackage.ARRAY_CALL:
      {
        ArrayCall arrayCall = (ArrayCall)theEObject;
        T result = caseArrayCall(arrayCall);
        if (result == null) result = caseExpression(arrayCall);
        if (result == null) result = caseSimpleStatement(arrayCall);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JsonDslPackage.FIELD_CALL:
      {
        FieldCall fieldCall = (FieldCall)theEObject;
        T result = caseFieldCall(fieldCall);
        if (result == null) result = caseExpression(fieldCall);
        if (result == null) result = caseSimpleStatement(fieldCall);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Model</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Model</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseModel(Model object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Simple Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Simple Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSimpleStatement(SimpleStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Assignment</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Assignment</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAssignment(Assignment object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpression(Expression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Unary Minus Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Unary Minus Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseUnaryMinusExpression(UnaryMinusExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Unary Plus Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Unary Plus Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseUnaryPlusExpression(UnaryPlusExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Logical Negation Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Logical Negation Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLogicalNegationExpression(LogicalNegationExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Bracket Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Bracket Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBracketExpression(BracketExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Pointer Call</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Pointer Call</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePointerCall(PointerCall object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Variable Call</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Variable Call</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVariableCall(VariableCall object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Array Specifier</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Array Specifier</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseArraySpecifier(ArraySpecifier object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Unary Specifier</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Unary Specifier</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseUnarySpecifier(UnarySpecifier object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Range Specifier</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Range Specifier</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRangeSpecifier(RangeSpecifier object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>IO Functions</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>IO Functions</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIOFunctions(IOFunctions object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Info Functions</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Info Functions</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInfoFunctions(InfoFunctions object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Manip Functions</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Manip Functions</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseManipFunctions(ManipFunctions object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Arith Functions</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Arith Functions</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseArithFunctions(ArithFunctions object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Alter Functions</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Alter Functions</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAlterFunctions(AlterFunctions object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Load</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Load</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLoad(Load object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Store</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Store</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStore(Store object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Export</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Export</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExport(Export object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Print</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Print</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePrint(Print object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Depth</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Depth</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDepth(Depth object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Field Info</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Field Info</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFieldInfo(FieldInfo object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Contains</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Contains</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseContains(Contains object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Select</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Select</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSelect(Select object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Concat</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Concat</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConcat(Concat object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Length</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Length</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLength(Length object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Sum</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Sum</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSum(Sum object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Product</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Product</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseProduct(Product object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Delete</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Delete</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDelete(Delete object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Constant</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Constant</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConstant(Constant object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Primitive</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Primitive</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePrimitive(Primitive object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Array</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Array</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseArray(Array object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>JSon Object</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>JSon Object</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseJSonObject(JSonObject object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Field</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Field</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseField(Field object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Disjunction Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Disjunction Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDisjunctionExpression(DisjunctionExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Conjunction Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Conjunction Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConjunctionExpression(ConjunctionExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Equality Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Equality Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEqualityExpression(EqualityExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Inequality Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Inequality Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInequalityExpression(InequalityExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Strict Equality Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Strict Equality Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStrictEqualityExpression(StrictEqualityExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Strict Inequality Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Strict Inequality Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStrictInequalityExpression(StrictInequalityExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Superior Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Superior Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSuperiorExpression(SuperiorExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Superior Or Equal Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Superior Or Equal Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSuperiorOrEqualExpression(SuperiorOrEqualExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Inferior Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Inferior Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInferiorExpression(InferiorExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Inferior Or Equal Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Inferior Or Equal Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInferiorOrEqualExpression(InferiorOrEqualExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Addition Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Addition Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAdditionExpression(AdditionExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Substraction Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Substraction Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSubstractionExpression(SubstractionExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Multiplication Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Multiplication Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMultiplicationExpression(MultiplicationExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Division Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Division Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDivisionExpression(DivisionExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Modulo Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Modulo Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseModuloExpression(ModuloExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Array Call</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Array Call</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseArrayCall(ArrayCall object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Field Call</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Field Call</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFieldCall(FieldCall object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //JsonDslSwitch
