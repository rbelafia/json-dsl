/*
 * generated by Xtext 2.23.0
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.mydsl.jsonDsl.AdditionExpression;
import org.xtext.example.mydsl.jsonDsl.Array;
import org.xtext.example.mydsl.jsonDsl.ArrayCall;
import org.xtext.example.mydsl.jsonDsl.Assignment;
import org.xtext.example.mydsl.jsonDsl.BracketExpression;
import org.xtext.example.mydsl.jsonDsl.ConjunctionExpression;
import org.xtext.example.mydsl.jsonDsl.Contains;
import org.xtext.example.mydsl.jsonDsl.Depth;
import org.xtext.example.mydsl.jsonDsl.DisjunctionExpression;
import org.xtext.example.mydsl.jsonDsl.DivisionExpression;
import org.xtext.example.mydsl.jsonDsl.EqualityExpression;
import org.xtext.example.mydsl.jsonDsl.Export;
import org.xtext.example.mydsl.jsonDsl.Field;
import org.xtext.example.mydsl.jsonDsl.FieldCall;
import org.xtext.example.mydsl.jsonDsl.FieldInfo;
import org.xtext.example.mydsl.jsonDsl.InequalityExpression;
import org.xtext.example.mydsl.jsonDsl.InferiorExpression;
import org.xtext.example.mydsl.jsonDsl.InferiorOrEqualExpression;
import org.xtext.example.mydsl.jsonDsl.JSonObject;
import org.xtext.example.mydsl.jsonDsl.JsonDslPackage;
import org.xtext.example.mydsl.jsonDsl.Length;
import org.xtext.example.mydsl.jsonDsl.Load;
import org.xtext.example.mydsl.jsonDsl.LogicalNegationExpression;
import org.xtext.example.mydsl.jsonDsl.Model;
import org.xtext.example.mydsl.jsonDsl.ModuloExpression;
import org.xtext.example.mydsl.jsonDsl.MultiplicationExpression;
import org.xtext.example.mydsl.jsonDsl.PointerCall;
import org.xtext.example.mydsl.jsonDsl.Primitive;
import org.xtext.example.mydsl.jsonDsl.Print;
import org.xtext.example.mydsl.jsonDsl.Product;
import org.xtext.example.mydsl.jsonDsl.RangeSpecifier;
import org.xtext.example.mydsl.jsonDsl.Select;
import org.xtext.example.mydsl.jsonDsl.Store;
import org.xtext.example.mydsl.jsonDsl.SubstractionExpression;
import org.xtext.example.mydsl.jsonDsl.Sum;
import org.xtext.example.mydsl.jsonDsl.SuperiorExpression;
import org.xtext.example.mydsl.jsonDsl.SuperiorOrEqualExpression;
import org.xtext.example.mydsl.jsonDsl.UnaryMinusExpression;
import org.xtext.example.mydsl.jsonDsl.UnaryPlusExpression;
import org.xtext.example.mydsl.jsonDsl.UnarySpecifier;
import org.xtext.example.mydsl.jsonDsl.VariableCall;
import org.xtext.example.mydsl.services.JsonDslGrammarAccess;

@SuppressWarnings("all")
public class JsonDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private JsonDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == JsonDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case JsonDslPackage.ADDITION_EXPRESSION:
				sequence_ExpressionLvl5(context, (AdditionExpression) semanticObject); 
				return; 
			case JsonDslPackage.ARRAY:
				sequence_Array(context, (Array) semanticObject); 
				return; 
			case JsonDslPackage.ARRAY_CALL:
				sequence_ExpressionLvl9(context, (ArrayCall) semanticObject); 
				return; 
			case JsonDslPackage.ASSIGNMENT:
				sequence_Assignment(context, (Assignment) semanticObject); 
				return; 
			case JsonDslPackage.BRACKET_EXPRESSION:
				sequence_BracketExpression(context, (BracketExpression) semanticObject); 
				return; 
			case JsonDslPackage.CONJUNCTION_EXPRESSION:
				sequence_ExpressionLvl2(context, (ConjunctionExpression) semanticObject); 
				return; 
			case JsonDslPackage.CONTAINS:
				sequence_Contains(context, (Contains) semanticObject); 
				return; 
			case JsonDslPackage.DEPTH:
				sequence_Depth(context, (Depth) semanticObject); 
				return; 
			case JsonDslPackage.DISJUNCTION_EXPRESSION:
				sequence_ExpressionLvl1(context, (DisjunctionExpression) semanticObject); 
				return; 
			case JsonDslPackage.DIVISION_EXPRESSION:
				sequence_ExpressionLvl6(context, (DivisionExpression) semanticObject); 
				return; 
			case JsonDslPackage.EQUALITY_EXPRESSION:
				sequence_ExpressionLvl3(context, (EqualityExpression) semanticObject); 
				return; 
			case JsonDslPackage.EXPORT:
				sequence_Export(context, (Export) semanticObject); 
				return; 
			case JsonDslPackage.FIELD:
				sequence_Field(context, (Field) semanticObject); 
				return; 
			case JsonDslPackage.FIELD_CALL:
				sequence_ExpressionLvl9(context, (FieldCall) semanticObject); 
				return; 
			case JsonDslPackage.FIELD_INFO:
				sequence_FieldInfo(context, (FieldInfo) semanticObject); 
				return; 
			case JsonDslPackage.INEQUALITY_EXPRESSION:
				sequence_ExpressionLvl3(context, (InequalityExpression) semanticObject); 
				return; 
			case JsonDslPackage.INFERIOR_EXPRESSION:
				sequence_ExpressionLvl4(context, (InferiorExpression) semanticObject); 
				return; 
			case JsonDslPackage.INFERIOR_OR_EQUAL_EXPRESSION:
				sequence_ExpressionLvl4(context, (InferiorOrEqualExpression) semanticObject); 
				return; 
			case JsonDslPackage.JSON_OBJECT:
				sequence_JSonObject(context, (JSonObject) semanticObject); 
				return; 
			case JsonDslPackage.LENGTH:
				sequence_Length(context, (Length) semanticObject); 
				return; 
			case JsonDslPackage.LOAD:
				sequence_Load(context, (Load) semanticObject); 
				return; 
			case JsonDslPackage.LOGICAL_NEGATION_EXPRESSION:
				sequence_LogicalNegationExpression(context, (LogicalNegationExpression) semanticObject); 
				return; 
			case JsonDslPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case JsonDslPackage.MODULO_EXPRESSION:
				sequence_ExpressionLvl6(context, (ModuloExpression) semanticObject); 
				return; 
			case JsonDslPackage.MULTIPLICATION_EXPRESSION:
				sequence_ExpressionLvl6(context, (MultiplicationExpression) semanticObject); 
				return; 
			case JsonDslPackage.POINTER_CALL:
				sequence_PointerCall(context, (PointerCall) semanticObject); 
				return; 
			case JsonDslPackage.PRIMITIVE:
				sequence_Primitive(context, (Primitive) semanticObject); 
				return; 
			case JsonDslPackage.PRINT:
				sequence_Print(context, (Print) semanticObject); 
				return; 
			case JsonDslPackage.PRODUCT:
				sequence_Product(context, (Product) semanticObject); 
				return; 
			case JsonDslPackage.RANGE_SPECIFIER:
				sequence_RangeSpecifier(context, (RangeSpecifier) semanticObject); 
				return; 
			case JsonDslPackage.SELECT:
				sequence_Select(context, (Select) semanticObject); 
				return; 
			case JsonDslPackage.STORE:
				sequence_Store(context, (Store) semanticObject); 
				return; 
			case JsonDslPackage.SUBSTRACTION_EXPRESSION:
				sequence_ExpressionLvl5(context, (SubstractionExpression) semanticObject); 
				return; 
			case JsonDslPackage.SUM:
				sequence_Sum(context, (Sum) semanticObject); 
				return; 
			case JsonDslPackage.SUPERIOR_EXPRESSION:
				sequence_ExpressionLvl4(context, (SuperiorExpression) semanticObject); 
				return; 
			case JsonDslPackage.SUPERIOR_OR_EQUAL_EXPRESSION:
				sequence_ExpressionLvl4(context, (SuperiorOrEqualExpression) semanticObject); 
				return; 
			case JsonDslPackage.UNARY_MINUS_EXPRESSION:
				sequence_UnaryMinusExpression(context, (UnaryMinusExpression) semanticObject); 
				return; 
			case JsonDslPackage.UNARY_PLUS_EXPRESSION:
				sequence_UnaryPlusExpression(context, (UnaryPlusExpression) semanticObject); 
				return; 
			case JsonDslPackage.UNARY_SPECIFIER:
				sequence_UnarySpecifier(context, (UnarySpecifier) semanticObject); 
				return; 
			case JsonDslPackage.VARIABLE_CALL:
				sequence_VariableCall(context, (VariableCall) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     SimpleStatement returns Array
	 *     Expression returns Array
	 *     ExpressionLvl1 returns Array
	 *     ExpressionLvl1.DisjunctionExpression_1_0 returns Array
	 *     ExpressionLvl2 returns Array
	 *     ExpressionLvl2.ConjunctionExpression_1_0 returns Array
	 *     ExpressionLvl3 returns Array
	 *     ExpressionLvl3.EqualityExpression_1_0_0 returns Array
	 *     ExpressionLvl3.InequalityExpression_1_1_0 returns Array
	 *     ExpressionLvl4 returns Array
	 *     ExpressionLvl4.SuperiorExpression_1_0_0 returns Array
	 *     ExpressionLvl4.SuperiorOrEqualExpression_1_1_0 returns Array
	 *     ExpressionLvl4.InferiorExpression_1_2_0 returns Array
	 *     ExpressionLvl4.InferiorOrEqualExpression_1_3_0 returns Array
	 *     ExpressionLvl5 returns Array
	 *     ExpressionLvl5.AdditionExpression_1_0_0 returns Array
	 *     ExpressionLvl5.SubstractionExpression_1_1_0 returns Array
	 *     ExpressionLvl6 returns Array
	 *     ExpressionLvl6.MultiplicationExpression_1_0_0 returns Array
	 *     ExpressionLvl6.DivisionExpression_1_1_0 returns Array
	 *     ExpressionLvl6.ModuloExpression_1_2_0 returns Array
	 *     ExpressionLvl7 returns Array
	 *     ExpressionLvl8 returns Array
	 *     ExpressionLvl9 returns Array
	 *     ExpressionLvl9.ArrayCall_1_0_0 returns Array
	 *     ExpressionLvl9.FieldCall_1_1_0 returns Array
	 *     PrimaryExpression returns Array
	 *     Constant returns Array
	 *     Array returns Array
	 *
	 * Constraint:
	 *     (values+=Expression values+=Expression*)?
	 */
	protected void sequence_Array(ISerializationContext context, Array semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SimpleStatement returns Assignment
	 *     Assignment returns Assignment
	 *
	 * Constraint:
	 *     (leftHandSide=VariableCall rightHandSide=Expression)
	 */
	protected void sequence_Assignment(ISerializationContext context, Assignment semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonDslPackage.Literals.ASSIGNMENT__LEFT_HAND_SIDE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonDslPackage.Literals.ASSIGNMENT__LEFT_HAND_SIDE));
			if (transientValues.isValueTransient(semanticObject, JsonDslPackage.Literals.ASSIGNMENT__RIGHT_HAND_SIDE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonDslPackage.Literals.ASSIGNMENT__RIGHT_HAND_SIDE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAssignmentAccess().getLeftHandSideVariableCallParserRuleCall_0_0(), semanticObject.getLeftHandSide());
		feeder.accept(grammarAccess.getAssignmentAccess().getRightHandSideExpressionParserRuleCall_2_0(), semanticObject.getRightHandSide());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SimpleStatement returns BracketExpression
	 *     Expression returns BracketExpression
	 *     ExpressionLvl1 returns BracketExpression
	 *     ExpressionLvl1.DisjunctionExpression_1_0 returns BracketExpression
	 *     ExpressionLvl2 returns BracketExpression
	 *     ExpressionLvl2.ConjunctionExpression_1_0 returns BracketExpression
	 *     ExpressionLvl3 returns BracketExpression
	 *     ExpressionLvl3.EqualityExpression_1_0_0 returns BracketExpression
	 *     ExpressionLvl3.InequalityExpression_1_1_0 returns BracketExpression
	 *     ExpressionLvl4 returns BracketExpression
	 *     ExpressionLvl4.SuperiorExpression_1_0_0 returns BracketExpression
	 *     ExpressionLvl4.SuperiorOrEqualExpression_1_1_0 returns BracketExpression
	 *     ExpressionLvl4.InferiorExpression_1_2_0 returns BracketExpression
	 *     ExpressionLvl4.InferiorOrEqualExpression_1_3_0 returns BracketExpression
	 *     ExpressionLvl5 returns BracketExpression
	 *     ExpressionLvl5.AdditionExpression_1_0_0 returns BracketExpression
	 *     ExpressionLvl5.SubstractionExpression_1_1_0 returns BracketExpression
	 *     ExpressionLvl6 returns BracketExpression
	 *     ExpressionLvl6.MultiplicationExpression_1_0_0 returns BracketExpression
	 *     ExpressionLvl6.DivisionExpression_1_1_0 returns BracketExpression
	 *     ExpressionLvl6.ModuloExpression_1_2_0 returns BracketExpression
	 *     ExpressionLvl7 returns BracketExpression
	 *     ExpressionLvl8 returns BracketExpression
	 *     ExpressionLvl9 returns BracketExpression
	 *     ExpressionLvl9.ArrayCall_1_0_0 returns BracketExpression
	 *     ExpressionLvl9.FieldCall_1_1_0 returns BracketExpression
	 *     PrimaryExpression returns BracketExpression
	 *     BracketExpression returns BracketExpression
	 *
	 * Constraint:
	 *     sub=Expression
	 */
	protected void sequence_BracketExpression(ISerializationContext context, BracketExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonDslPackage.Literals.BRACKET_EXPRESSION__SUB) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonDslPackage.Literals.BRACKET_EXPRESSION__SUB));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBracketExpressionAccess().getSubExpressionParserRuleCall_1_0(), semanticObject.getSub());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SimpleStatement returns Contains
	 *     Expression returns Contains
	 *     ExpressionLvl1 returns Contains
	 *     ExpressionLvl1.DisjunctionExpression_1_0 returns Contains
	 *     ExpressionLvl2 returns Contains
	 *     ExpressionLvl2.ConjunctionExpression_1_0 returns Contains
	 *     ExpressionLvl3 returns Contains
	 *     ExpressionLvl3.EqualityExpression_1_0_0 returns Contains
	 *     ExpressionLvl3.InequalityExpression_1_1_0 returns Contains
	 *     ExpressionLvl4 returns Contains
	 *     ExpressionLvl4.SuperiorExpression_1_0_0 returns Contains
	 *     ExpressionLvl4.SuperiorOrEqualExpression_1_1_0 returns Contains
	 *     ExpressionLvl4.InferiorExpression_1_2_0 returns Contains
	 *     ExpressionLvl4.InferiorOrEqualExpression_1_3_0 returns Contains
	 *     ExpressionLvl5 returns Contains
	 *     ExpressionLvl5.AdditionExpression_1_0_0 returns Contains
	 *     ExpressionLvl5.SubstractionExpression_1_1_0 returns Contains
	 *     ExpressionLvl6 returns Contains
	 *     ExpressionLvl6.MultiplicationExpression_1_0_0 returns Contains
	 *     ExpressionLvl6.DivisionExpression_1_1_0 returns Contains
	 *     ExpressionLvl6.ModuloExpression_1_2_0 returns Contains
	 *     ExpressionLvl7 returns Contains
	 *     ExpressionLvl8 returns Contains
	 *     ExpressionLvl9 returns Contains
	 *     ExpressionLvl9.ArrayCall_1_0_0 returns Contains
	 *     ExpressionLvl9.FieldCall_1_1_0 returns Contains
	 *     PrimaryExpression returns Contains
	 *     FunctionCall returns Contains
	 *     InfoFunctions returns Contains
	 *     Contains returns Contains
	 *
	 * Constraint:
	 *     (keys+=Expression keys+=Expression* right=Expression)
	 */
	protected void sequence_Contains(ISerializationContext context, Contains semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SimpleStatement returns Depth
	 *     Expression returns Depth
	 *     ExpressionLvl1 returns Depth
	 *     ExpressionLvl1.DisjunctionExpression_1_0 returns Depth
	 *     ExpressionLvl2 returns Depth
	 *     ExpressionLvl2.ConjunctionExpression_1_0 returns Depth
	 *     ExpressionLvl3 returns Depth
	 *     ExpressionLvl3.EqualityExpression_1_0_0 returns Depth
	 *     ExpressionLvl3.InequalityExpression_1_1_0 returns Depth
	 *     ExpressionLvl4 returns Depth
	 *     ExpressionLvl4.SuperiorExpression_1_0_0 returns Depth
	 *     ExpressionLvl4.SuperiorOrEqualExpression_1_1_0 returns Depth
	 *     ExpressionLvl4.InferiorExpression_1_2_0 returns Depth
	 *     ExpressionLvl4.InferiorOrEqualExpression_1_3_0 returns Depth
	 *     ExpressionLvl5 returns Depth
	 *     ExpressionLvl5.AdditionExpression_1_0_0 returns Depth
	 *     ExpressionLvl5.SubstractionExpression_1_1_0 returns Depth
	 *     ExpressionLvl6 returns Depth
	 *     ExpressionLvl6.MultiplicationExpression_1_0_0 returns Depth
	 *     ExpressionLvl6.DivisionExpression_1_1_0 returns Depth
	 *     ExpressionLvl6.ModuloExpression_1_2_0 returns Depth
	 *     ExpressionLvl7 returns Depth
	 *     ExpressionLvl8 returns Depth
	 *     ExpressionLvl9 returns Depth
	 *     ExpressionLvl9.ArrayCall_1_0_0 returns Depth
	 *     ExpressionLvl9.FieldCall_1_1_0 returns Depth
	 *     PrimaryExpression returns Depth
	 *     FunctionCall returns Depth
	 *     InfoFunctions returns Depth
	 *     Depth returns Depth
	 *
	 * Constraint:
	 *     expression=Expression
	 */
	protected void sequence_Depth(ISerializationContext context, Depth semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonDslPackage.Literals.DEPTH__EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonDslPackage.Literals.DEPTH__EXPRESSION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDepthAccess().getExpressionExpressionParserRuleCall_2_0(), semanticObject.getExpression());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SimpleStatement returns Export
	 *     Expression returns Export
	 *     ExpressionLvl1 returns Export
	 *     ExpressionLvl1.DisjunctionExpression_1_0 returns Export
	 *     ExpressionLvl2 returns Export
	 *     ExpressionLvl2.ConjunctionExpression_1_0 returns Export
	 *     ExpressionLvl3 returns Export
	 *     ExpressionLvl3.EqualityExpression_1_0_0 returns Export
	 *     ExpressionLvl3.InequalityExpression_1_1_0 returns Export
	 *     ExpressionLvl4 returns Export
	 *     ExpressionLvl4.SuperiorExpression_1_0_0 returns Export
	 *     ExpressionLvl4.SuperiorOrEqualExpression_1_1_0 returns Export
	 *     ExpressionLvl4.InferiorExpression_1_2_0 returns Export
	 *     ExpressionLvl4.InferiorOrEqualExpression_1_3_0 returns Export
	 *     ExpressionLvl5 returns Export
	 *     ExpressionLvl5.AdditionExpression_1_0_0 returns Export
	 *     ExpressionLvl5.SubstractionExpression_1_1_0 returns Export
	 *     ExpressionLvl6 returns Export
	 *     ExpressionLvl6.MultiplicationExpression_1_0_0 returns Export
	 *     ExpressionLvl6.DivisionExpression_1_1_0 returns Export
	 *     ExpressionLvl6.ModuloExpression_1_2_0 returns Export
	 *     ExpressionLvl7 returns Export
	 *     ExpressionLvl8 returns Export
	 *     ExpressionLvl9 returns Export
	 *     ExpressionLvl9.ArrayCall_1_0_0 returns Export
	 *     ExpressionLvl9.FieldCall_1_1_0 returns Export
	 *     PrimaryExpression returns Export
	 *     FunctionCall returns Export
	 *     IOFunctions returns Export
	 *     Export returns Export
	 *
	 * Constraint:
	 *     (expression=Expression fileName=STRING?)
	 */
	protected void sequence_Export(ISerializationContext context, Export semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SimpleStatement returns DisjunctionExpression
	 *     Expression returns DisjunctionExpression
	 *     ExpressionLvl1 returns DisjunctionExpression
	 *     ExpressionLvl1.DisjunctionExpression_1_0 returns DisjunctionExpression
	 *
	 * Constraint:
	 *     (left=ExpressionLvl1_DisjunctionExpression_1_0 right=ExpressionLvl2)
	 */
	protected void sequence_ExpressionLvl1(ISerializationContext context, DisjunctionExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonDslPackage.Literals.DISJUNCTION_EXPRESSION__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonDslPackage.Literals.DISJUNCTION_EXPRESSION__LEFT));
			if (transientValues.isValueTransient(semanticObject, JsonDslPackage.Literals.DISJUNCTION_EXPRESSION__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonDslPackage.Literals.DISJUNCTION_EXPRESSION__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpressionLvl1Access().getDisjunctionExpressionLeftAction_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getExpressionLvl1Access().getRightExpressionLvl2ParserRuleCall_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SimpleStatement returns ConjunctionExpression
	 *     Expression returns ConjunctionExpression
	 *     ExpressionLvl1 returns ConjunctionExpression
	 *     ExpressionLvl1.DisjunctionExpression_1_0 returns ConjunctionExpression
	 *     ExpressionLvl2 returns ConjunctionExpression
	 *     ExpressionLvl2.ConjunctionExpression_1_0 returns ConjunctionExpression
	 *
	 * Constraint:
	 *     (left=ExpressionLvl2_ConjunctionExpression_1_0 right=ExpressionLvl3)
	 */
	protected void sequence_ExpressionLvl2(ISerializationContext context, ConjunctionExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonDslPackage.Literals.CONJUNCTION_EXPRESSION__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonDslPackage.Literals.CONJUNCTION_EXPRESSION__LEFT));
			if (transientValues.isValueTransient(semanticObject, JsonDslPackage.Literals.CONJUNCTION_EXPRESSION__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonDslPackage.Literals.CONJUNCTION_EXPRESSION__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpressionLvl2Access().getConjunctionExpressionLeftAction_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getExpressionLvl2Access().getRightExpressionLvl3ParserRuleCall_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SimpleStatement returns EqualityExpression
	 *     Expression returns EqualityExpression
	 *     ExpressionLvl1 returns EqualityExpression
	 *     ExpressionLvl1.DisjunctionExpression_1_0 returns EqualityExpression
	 *     ExpressionLvl2 returns EqualityExpression
	 *     ExpressionLvl2.ConjunctionExpression_1_0 returns EqualityExpression
	 *     ExpressionLvl3 returns EqualityExpression
	 *     ExpressionLvl3.EqualityExpression_1_0_0 returns EqualityExpression
	 *     ExpressionLvl3.InequalityExpression_1_1_0 returns EqualityExpression
	 *
	 * Constraint:
	 *     (left=ExpressionLvl3_EqualityExpression_1_0_0 right=ExpressionLvl4)
	 */
	protected void sequence_ExpressionLvl3(ISerializationContext context, EqualityExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonDslPackage.Literals.EQUALITY_EXPRESSION__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonDslPackage.Literals.EQUALITY_EXPRESSION__LEFT));
			if (transientValues.isValueTransient(semanticObject, JsonDslPackage.Literals.EQUALITY_EXPRESSION__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonDslPackage.Literals.EQUALITY_EXPRESSION__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpressionLvl3Access().getEqualityExpressionLeftAction_1_0_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getExpressionLvl3Access().getRightExpressionLvl4ParserRuleCall_1_0_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SimpleStatement returns InequalityExpression
	 *     Expression returns InequalityExpression
	 *     ExpressionLvl1 returns InequalityExpression
	 *     ExpressionLvl1.DisjunctionExpression_1_0 returns InequalityExpression
	 *     ExpressionLvl2 returns InequalityExpression
	 *     ExpressionLvl2.ConjunctionExpression_1_0 returns InequalityExpression
	 *     ExpressionLvl3 returns InequalityExpression
	 *     ExpressionLvl3.EqualityExpression_1_0_0 returns InequalityExpression
	 *     ExpressionLvl3.InequalityExpression_1_1_0 returns InequalityExpression
	 *
	 * Constraint:
	 *     (left=ExpressionLvl3_InequalityExpression_1_1_0 right=ExpressionLvl4)
	 */
	protected void sequence_ExpressionLvl3(ISerializationContext context, InequalityExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonDslPackage.Literals.INEQUALITY_EXPRESSION__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonDslPackage.Literals.INEQUALITY_EXPRESSION__LEFT));
			if (transientValues.isValueTransient(semanticObject, JsonDslPackage.Literals.INEQUALITY_EXPRESSION__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonDslPackage.Literals.INEQUALITY_EXPRESSION__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpressionLvl3Access().getInequalityExpressionLeftAction_1_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getExpressionLvl3Access().getRightExpressionLvl4ParserRuleCall_1_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SimpleStatement returns InferiorExpression
	 *     Expression returns InferiorExpression
	 *     ExpressionLvl1 returns InferiorExpression
	 *     ExpressionLvl1.DisjunctionExpression_1_0 returns InferiorExpression
	 *     ExpressionLvl2 returns InferiorExpression
	 *     ExpressionLvl2.ConjunctionExpression_1_0 returns InferiorExpression
	 *     ExpressionLvl3 returns InferiorExpression
	 *     ExpressionLvl3.EqualityExpression_1_0_0 returns InferiorExpression
	 *     ExpressionLvl3.InequalityExpression_1_1_0 returns InferiorExpression
	 *     ExpressionLvl4 returns InferiorExpression
	 *     ExpressionLvl4.SuperiorExpression_1_0_0 returns InferiorExpression
	 *     ExpressionLvl4.SuperiorOrEqualExpression_1_1_0 returns InferiorExpression
	 *     ExpressionLvl4.InferiorExpression_1_2_0 returns InferiorExpression
	 *     ExpressionLvl4.InferiorOrEqualExpression_1_3_0 returns InferiorExpression
	 *
	 * Constraint:
	 *     (left=ExpressionLvl4_InferiorExpression_1_2_0 right=ExpressionLvl5)
	 */
	protected void sequence_ExpressionLvl4(ISerializationContext context, InferiorExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonDslPackage.Literals.INFERIOR_EXPRESSION__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonDslPackage.Literals.INFERIOR_EXPRESSION__LEFT));
			if (transientValues.isValueTransient(semanticObject, JsonDslPackage.Literals.INFERIOR_EXPRESSION__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonDslPackage.Literals.INFERIOR_EXPRESSION__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpressionLvl4Access().getInferiorExpressionLeftAction_1_2_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getExpressionLvl4Access().getRightExpressionLvl5ParserRuleCall_1_2_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SimpleStatement returns InferiorOrEqualExpression
	 *     Expression returns InferiorOrEqualExpression
	 *     ExpressionLvl1 returns InferiorOrEqualExpression
	 *     ExpressionLvl1.DisjunctionExpression_1_0 returns InferiorOrEqualExpression
	 *     ExpressionLvl2 returns InferiorOrEqualExpression
	 *     ExpressionLvl2.ConjunctionExpression_1_0 returns InferiorOrEqualExpression
	 *     ExpressionLvl3 returns InferiorOrEqualExpression
	 *     ExpressionLvl3.EqualityExpression_1_0_0 returns InferiorOrEqualExpression
	 *     ExpressionLvl3.InequalityExpression_1_1_0 returns InferiorOrEqualExpression
	 *     ExpressionLvl4 returns InferiorOrEqualExpression
	 *     ExpressionLvl4.SuperiorExpression_1_0_0 returns InferiorOrEqualExpression
	 *     ExpressionLvl4.SuperiorOrEqualExpression_1_1_0 returns InferiorOrEqualExpression
	 *     ExpressionLvl4.InferiorExpression_1_2_0 returns InferiorOrEqualExpression
	 *     ExpressionLvl4.InferiorOrEqualExpression_1_3_0 returns InferiorOrEqualExpression
	 *
	 * Constraint:
	 *     (left=ExpressionLvl4_InferiorOrEqualExpression_1_3_0 right=ExpressionLvl5)
	 */
	protected void sequence_ExpressionLvl4(ISerializationContext context, InferiorOrEqualExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonDslPackage.Literals.INFERIOR_OR_EQUAL_EXPRESSION__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonDslPackage.Literals.INFERIOR_OR_EQUAL_EXPRESSION__LEFT));
			if (transientValues.isValueTransient(semanticObject, JsonDslPackage.Literals.INFERIOR_OR_EQUAL_EXPRESSION__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonDslPackage.Literals.INFERIOR_OR_EQUAL_EXPRESSION__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpressionLvl4Access().getInferiorOrEqualExpressionLeftAction_1_3_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getExpressionLvl4Access().getRightExpressionLvl5ParserRuleCall_1_3_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SimpleStatement returns SuperiorExpression
	 *     Expression returns SuperiorExpression
	 *     ExpressionLvl1 returns SuperiorExpression
	 *     ExpressionLvl1.DisjunctionExpression_1_0 returns SuperiorExpression
	 *     ExpressionLvl2 returns SuperiorExpression
	 *     ExpressionLvl2.ConjunctionExpression_1_0 returns SuperiorExpression
	 *     ExpressionLvl3 returns SuperiorExpression
	 *     ExpressionLvl3.EqualityExpression_1_0_0 returns SuperiorExpression
	 *     ExpressionLvl3.InequalityExpression_1_1_0 returns SuperiorExpression
	 *     ExpressionLvl4 returns SuperiorExpression
	 *     ExpressionLvl4.SuperiorExpression_1_0_0 returns SuperiorExpression
	 *     ExpressionLvl4.SuperiorOrEqualExpression_1_1_0 returns SuperiorExpression
	 *     ExpressionLvl4.InferiorExpression_1_2_0 returns SuperiorExpression
	 *     ExpressionLvl4.InferiorOrEqualExpression_1_3_0 returns SuperiorExpression
	 *
	 * Constraint:
	 *     (left=ExpressionLvl4_SuperiorExpression_1_0_0 right=ExpressionLvl5)
	 */
	protected void sequence_ExpressionLvl4(ISerializationContext context, SuperiorExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonDslPackage.Literals.SUPERIOR_EXPRESSION__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonDslPackage.Literals.SUPERIOR_EXPRESSION__LEFT));
			if (transientValues.isValueTransient(semanticObject, JsonDslPackage.Literals.SUPERIOR_EXPRESSION__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonDslPackage.Literals.SUPERIOR_EXPRESSION__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpressionLvl4Access().getSuperiorExpressionLeftAction_1_0_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getExpressionLvl4Access().getRightExpressionLvl5ParserRuleCall_1_0_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SimpleStatement returns SuperiorOrEqualExpression
	 *     Expression returns SuperiorOrEqualExpression
	 *     ExpressionLvl1 returns SuperiorOrEqualExpression
	 *     ExpressionLvl1.DisjunctionExpression_1_0 returns SuperiorOrEqualExpression
	 *     ExpressionLvl2 returns SuperiorOrEqualExpression
	 *     ExpressionLvl2.ConjunctionExpression_1_0 returns SuperiorOrEqualExpression
	 *     ExpressionLvl3 returns SuperiorOrEqualExpression
	 *     ExpressionLvl3.EqualityExpression_1_0_0 returns SuperiorOrEqualExpression
	 *     ExpressionLvl3.InequalityExpression_1_1_0 returns SuperiorOrEqualExpression
	 *     ExpressionLvl4 returns SuperiorOrEqualExpression
	 *     ExpressionLvl4.SuperiorExpression_1_0_0 returns SuperiorOrEqualExpression
	 *     ExpressionLvl4.SuperiorOrEqualExpression_1_1_0 returns SuperiorOrEqualExpression
	 *     ExpressionLvl4.InferiorExpression_1_2_0 returns SuperiorOrEqualExpression
	 *     ExpressionLvl4.InferiorOrEqualExpression_1_3_0 returns SuperiorOrEqualExpression
	 *
	 * Constraint:
	 *     (left=ExpressionLvl4_SuperiorOrEqualExpression_1_1_0 right=ExpressionLvl5)
	 */
	protected void sequence_ExpressionLvl4(ISerializationContext context, SuperiorOrEqualExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonDslPackage.Literals.SUPERIOR_OR_EQUAL_EXPRESSION__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonDslPackage.Literals.SUPERIOR_OR_EQUAL_EXPRESSION__LEFT));
			if (transientValues.isValueTransient(semanticObject, JsonDslPackage.Literals.SUPERIOR_OR_EQUAL_EXPRESSION__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonDslPackage.Literals.SUPERIOR_OR_EQUAL_EXPRESSION__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpressionLvl4Access().getSuperiorOrEqualExpressionLeftAction_1_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getExpressionLvl4Access().getRightExpressionLvl5ParserRuleCall_1_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SimpleStatement returns AdditionExpression
	 *     Expression returns AdditionExpression
	 *     ExpressionLvl1 returns AdditionExpression
	 *     ExpressionLvl1.DisjunctionExpression_1_0 returns AdditionExpression
	 *     ExpressionLvl2 returns AdditionExpression
	 *     ExpressionLvl2.ConjunctionExpression_1_0 returns AdditionExpression
	 *     ExpressionLvl3 returns AdditionExpression
	 *     ExpressionLvl3.EqualityExpression_1_0_0 returns AdditionExpression
	 *     ExpressionLvl3.InequalityExpression_1_1_0 returns AdditionExpression
	 *     ExpressionLvl4 returns AdditionExpression
	 *     ExpressionLvl4.SuperiorExpression_1_0_0 returns AdditionExpression
	 *     ExpressionLvl4.SuperiorOrEqualExpression_1_1_0 returns AdditionExpression
	 *     ExpressionLvl4.InferiorExpression_1_2_0 returns AdditionExpression
	 *     ExpressionLvl4.InferiorOrEqualExpression_1_3_0 returns AdditionExpression
	 *     ExpressionLvl5 returns AdditionExpression
	 *     ExpressionLvl5.AdditionExpression_1_0_0 returns AdditionExpression
	 *     ExpressionLvl5.SubstractionExpression_1_1_0 returns AdditionExpression
	 *
	 * Constraint:
	 *     (left=ExpressionLvl5_AdditionExpression_1_0_0 right=ExpressionLvl6)
	 */
	protected void sequence_ExpressionLvl5(ISerializationContext context, AdditionExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonDslPackage.Literals.ADDITION_EXPRESSION__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonDslPackage.Literals.ADDITION_EXPRESSION__LEFT));
			if (transientValues.isValueTransient(semanticObject, JsonDslPackage.Literals.ADDITION_EXPRESSION__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonDslPackage.Literals.ADDITION_EXPRESSION__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpressionLvl5Access().getAdditionExpressionLeftAction_1_0_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getExpressionLvl5Access().getRightExpressionLvl6ParserRuleCall_1_0_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SimpleStatement returns SubstractionExpression
	 *     Expression returns SubstractionExpression
	 *     ExpressionLvl1 returns SubstractionExpression
	 *     ExpressionLvl1.DisjunctionExpression_1_0 returns SubstractionExpression
	 *     ExpressionLvl2 returns SubstractionExpression
	 *     ExpressionLvl2.ConjunctionExpression_1_0 returns SubstractionExpression
	 *     ExpressionLvl3 returns SubstractionExpression
	 *     ExpressionLvl3.EqualityExpression_1_0_0 returns SubstractionExpression
	 *     ExpressionLvl3.InequalityExpression_1_1_0 returns SubstractionExpression
	 *     ExpressionLvl4 returns SubstractionExpression
	 *     ExpressionLvl4.SuperiorExpression_1_0_0 returns SubstractionExpression
	 *     ExpressionLvl4.SuperiorOrEqualExpression_1_1_0 returns SubstractionExpression
	 *     ExpressionLvl4.InferiorExpression_1_2_0 returns SubstractionExpression
	 *     ExpressionLvl4.InferiorOrEqualExpression_1_3_0 returns SubstractionExpression
	 *     ExpressionLvl5 returns SubstractionExpression
	 *     ExpressionLvl5.AdditionExpression_1_0_0 returns SubstractionExpression
	 *     ExpressionLvl5.SubstractionExpression_1_1_0 returns SubstractionExpression
	 *
	 * Constraint:
	 *     (left=ExpressionLvl5_SubstractionExpression_1_1_0 right=ExpressionLvl6)
	 */
	protected void sequence_ExpressionLvl5(ISerializationContext context, SubstractionExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonDslPackage.Literals.SUBSTRACTION_EXPRESSION__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonDslPackage.Literals.SUBSTRACTION_EXPRESSION__LEFT));
			if (transientValues.isValueTransient(semanticObject, JsonDslPackage.Literals.SUBSTRACTION_EXPRESSION__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonDslPackage.Literals.SUBSTRACTION_EXPRESSION__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpressionLvl5Access().getSubstractionExpressionLeftAction_1_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getExpressionLvl5Access().getRightExpressionLvl6ParserRuleCall_1_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SimpleStatement returns DivisionExpression
	 *     Expression returns DivisionExpression
	 *     ExpressionLvl1 returns DivisionExpression
	 *     ExpressionLvl1.DisjunctionExpression_1_0 returns DivisionExpression
	 *     ExpressionLvl2 returns DivisionExpression
	 *     ExpressionLvl2.ConjunctionExpression_1_0 returns DivisionExpression
	 *     ExpressionLvl3 returns DivisionExpression
	 *     ExpressionLvl3.EqualityExpression_1_0_0 returns DivisionExpression
	 *     ExpressionLvl3.InequalityExpression_1_1_0 returns DivisionExpression
	 *     ExpressionLvl4 returns DivisionExpression
	 *     ExpressionLvl4.SuperiorExpression_1_0_0 returns DivisionExpression
	 *     ExpressionLvl4.SuperiorOrEqualExpression_1_1_0 returns DivisionExpression
	 *     ExpressionLvl4.InferiorExpression_1_2_0 returns DivisionExpression
	 *     ExpressionLvl4.InferiorOrEqualExpression_1_3_0 returns DivisionExpression
	 *     ExpressionLvl5 returns DivisionExpression
	 *     ExpressionLvl5.AdditionExpression_1_0_0 returns DivisionExpression
	 *     ExpressionLvl5.SubstractionExpression_1_1_0 returns DivisionExpression
	 *     ExpressionLvl6 returns DivisionExpression
	 *     ExpressionLvl6.MultiplicationExpression_1_0_0 returns DivisionExpression
	 *     ExpressionLvl6.DivisionExpression_1_1_0 returns DivisionExpression
	 *     ExpressionLvl6.ModuloExpression_1_2_0 returns DivisionExpression
	 *
	 * Constraint:
	 *     (left=ExpressionLvl6_DivisionExpression_1_1_0 right=ExpressionLvl7)
	 */
	protected void sequence_ExpressionLvl6(ISerializationContext context, DivisionExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonDslPackage.Literals.DIVISION_EXPRESSION__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonDslPackage.Literals.DIVISION_EXPRESSION__LEFT));
			if (transientValues.isValueTransient(semanticObject, JsonDslPackage.Literals.DIVISION_EXPRESSION__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonDslPackage.Literals.DIVISION_EXPRESSION__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpressionLvl6Access().getDivisionExpressionLeftAction_1_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getExpressionLvl6Access().getRightExpressionLvl7ParserRuleCall_1_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SimpleStatement returns ModuloExpression
	 *     Expression returns ModuloExpression
	 *     ExpressionLvl1 returns ModuloExpression
	 *     ExpressionLvl1.DisjunctionExpression_1_0 returns ModuloExpression
	 *     ExpressionLvl2 returns ModuloExpression
	 *     ExpressionLvl2.ConjunctionExpression_1_0 returns ModuloExpression
	 *     ExpressionLvl3 returns ModuloExpression
	 *     ExpressionLvl3.EqualityExpression_1_0_0 returns ModuloExpression
	 *     ExpressionLvl3.InequalityExpression_1_1_0 returns ModuloExpression
	 *     ExpressionLvl4 returns ModuloExpression
	 *     ExpressionLvl4.SuperiorExpression_1_0_0 returns ModuloExpression
	 *     ExpressionLvl4.SuperiorOrEqualExpression_1_1_0 returns ModuloExpression
	 *     ExpressionLvl4.InferiorExpression_1_2_0 returns ModuloExpression
	 *     ExpressionLvl4.InferiorOrEqualExpression_1_3_0 returns ModuloExpression
	 *     ExpressionLvl5 returns ModuloExpression
	 *     ExpressionLvl5.AdditionExpression_1_0_0 returns ModuloExpression
	 *     ExpressionLvl5.SubstractionExpression_1_1_0 returns ModuloExpression
	 *     ExpressionLvl6 returns ModuloExpression
	 *     ExpressionLvl6.MultiplicationExpression_1_0_0 returns ModuloExpression
	 *     ExpressionLvl6.DivisionExpression_1_1_0 returns ModuloExpression
	 *     ExpressionLvl6.ModuloExpression_1_2_0 returns ModuloExpression
	 *
	 * Constraint:
	 *     (left=ExpressionLvl6_ModuloExpression_1_2_0 right=ExpressionLvl7)
	 */
	protected void sequence_ExpressionLvl6(ISerializationContext context, ModuloExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonDslPackage.Literals.MODULO_EXPRESSION__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonDslPackage.Literals.MODULO_EXPRESSION__LEFT));
			if (transientValues.isValueTransient(semanticObject, JsonDslPackage.Literals.MODULO_EXPRESSION__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonDslPackage.Literals.MODULO_EXPRESSION__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpressionLvl6Access().getModuloExpressionLeftAction_1_2_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getExpressionLvl6Access().getRightExpressionLvl7ParserRuleCall_1_2_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SimpleStatement returns MultiplicationExpression
	 *     Expression returns MultiplicationExpression
	 *     ExpressionLvl1 returns MultiplicationExpression
	 *     ExpressionLvl1.DisjunctionExpression_1_0 returns MultiplicationExpression
	 *     ExpressionLvl2 returns MultiplicationExpression
	 *     ExpressionLvl2.ConjunctionExpression_1_0 returns MultiplicationExpression
	 *     ExpressionLvl3 returns MultiplicationExpression
	 *     ExpressionLvl3.EqualityExpression_1_0_0 returns MultiplicationExpression
	 *     ExpressionLvl3.InequalityExpression_1_1_0 returns MultiplicationExpression
	 *     ExpressionLvl4 returns MultiplicationExpression
	 *     ExpressionLvl4.SuperiorExpression_1_0_0 returns MultiplicationExpression
	 *     ExpressionLvl4.SuperiorOrEqualExpression_1_1_0 returns MultiplicationExpression
	 *     ExpressionLvl4.InferiorExpression_1_2_0 returns MultiplicationExpression
	 *     ExpressionLvl4.InferiorOrEqualExpression_1_3_0 returns MultiplicationExpression
	 *     ExpressionLvl5 returns MultiplicationExpression
	 *     ExpressionLvl5.AdditionExpression_1_0_0 returns MultiplicationExpression
	 *     ExpressionLvl5.SubstractionExpression_1_1_0 returns MultiplicationExpression
	 *     ExpressionLvl6 returns MultiplicationExpression
	 *     ExpressionLvl6.MultiplicationExpression_1_0_0 returns MultiplicationExpression
	 *     ExpressionLvl6.DivisionExpression_1_1_0 returns MultiplicationExpression
	 *     ExpressionLvl6.ModuloExpression_1_2_0 returns MultiplicationExpression
	 *
	 * Constraint:
	 *     (left=ExpressionLvl6_MultiplicationExpression_1_0_0 right=ExpressionLvl7)
	 */
	protected void sequence_ExpressionLvl6(ISerializationContext context, MultiplicationExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonDslPackage.Literals.MULTIPLICATION_EXPRESSION__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonDslPackage.Literals.MULTIPLICATION_EXPRESSION__LEFT));
			if (transientValues.isValueTransient(semanticObject, JsonDslPackage.Literals.MULTIPLICATION_EXPRESSION__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonDslPackage.Literals.MULTIPLICATION_EXPRESSION__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpressionLvl6Access().getMultiplicationExpressionLeftAction_1_0_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getExpressionLvl6Access().getRightExpressionLvl7ParserRuleCall_1_0_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SimpleStatement returns ArrayCall
	 *     Expression returns ArrayCall
	 *     ExpressionLvl1 returns ArrayCall
	 *     ExpressionLvl1.DisjunctionExpression_1_0 returns ArrayCall
	 *     ExpressionLvl2 returns ArrayCall
	 *     ExpressionLvl2.ConjunctionExpression_1_0 returns ArrayCall
	 *     ExpressionLvl3 returns ArrayCall
	 *     ExpressionLvl3.EqualityExpression_1_0_0 returns ArrayCall
	 *     ExpressionLvl3.InequalityExpression_1_1_0 returns ArrayCall
	 *     ExpressionLvl4 returns ArrayCall
	 *     ExpressionLvl4.SuperiorExpression_1_0_0 returns ArrayCall
	 *     ExpressionLvl4.SuperiorOrEqualExpression_1_1_0 returns ArrayCall
	 *     ExpressionLvl4.InferiorExpression_1_2_0 returns ArrayCall
	 *     ExpressionLvl4.InferiorOrEqualExpression_1_3_0 returns ArrayCall
	 *     ExpressionLvl5 returns ArrayCall
	 *     ExpressionLvl5.AdditionExpression_1_0_0 returns ArrayCall
	 *     ExpressionLvl5.SubstractionExpression_1_1_0 returns ArrayCall
	 *     ExpressionLvl6 returns ArrayCall
	 *     ExpressionLvl6.MultiplicationExpression_1_0_0 returns ArrayCall
	 *     ExpressionLvl6.DivisionExpression_1_1_0 returns ArrayCall
	 *     ExpressionLvl6.ModuloExpression_1_2_0 returns ArrayCall
	 *     ExpressionLvl7 returns ArrayCall
	 *     ExpressionLvl8 returns ArrayCall
	 *     ExpressionLvl9 returns ArrayCall
	 *     ExpressionLvl9.ArrayCall_1_0_0 returns ArrayCall
	 *     ExpressionLvl9.FieldCall_1_1_0 returns ArrayCall
	 *
	 * Constraint:
	 *     (callee=ExpressionLvl9_ArrayCall_1_0_0 specifier=ArraySpecifier)
	 */
	protected void sequence_ExpressionLvl9(ISerializationContext context, ArrayCall semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonDslPackage.Literals.ARRAY_CALL__CALLEE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonDslPackage.Literals.ARRAY_CALL__CALLEE));
			if (transientValues.isValueTransient(semanticObject, JsonDslPackage.Literals.ARRAY_CALL__SPECIFIER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonDslPackage.Literals.ARRAY_CALL__SPECIFIER));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpressionLvl9Access().getArrayCallCalleeAction_1_0_0(), semanticObject.getCallee());
		feeder.accept(grammarAccess.getExpressionLvl9Access().getSpecifierArraySpecifierParserRuleCall_1_0_2_0(), semanticObject.getSpecifier());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SimpleStatement returns FieldCall
	 *     Expression returns FieldCall
	 *     ExpressionLvl1 returns FieldCall
	 *     ExpressionLvl1.DisjunctionExpression_1_0 returns FieldCall
	 *     ExpressionLvl2 returns FieldCall
	 *     ExpressionLvl2.ConjunctionExpression_1_0 returns FieldCall
	 *     ExpressionLvl3 returns FieldCall
	 *     ExpressionLvl3.EqualityExpression_1_0_0 returns FieldCall
	 *     ExpressionLvl3.InequalityExpression_1_1_0 returns FieldCall
	 *     ExpressionLvl4 returns FieldCall
	 *     ExpressionLvl4.SuperiorExpression_1_0_0 returns FieldCall
	 *     ExpressionLvl4.SuperiorOrEqualExpression_1_1_0 returns FieldCall
	 *     ExpressionLvl4.InferiorExpression_1_2_0 returns FieldCall
	 *     ExpressionLvl4.InferiorOrEqualExpression_1_3_0 returns FieldCall
	 *     ExpressionLvl5 returns FieldCall
	 *     ExpressionLvl5.AdditionExpression_1_0_0 returns FieldCall
	 *     ExpressionLvl5.SubstractionExpression_1_1_0 returns FieldCall
	 *     ExpressionLvl6 returns FieldCall
	 *     ExpressionLvl6.MultiplicationExpression_1_0_0 returns FieldCall
	 *     ExpressionLvl6.DivisionExpression_1_1_0 returns FieldCall
	 *     ExpressionLvl6.ModuloExpression_1_2_0 returns FieldCall
	 *     ExpressionLvl7 returns FieldCall
	 *     ExpressionLvl8 returns FieldCall
	 *     ExpressionLvl9 returns FieldCall
	 *     ExpressionLvl9.ArrayCall_1_0_0 returns FieldCall
	 *     ExpressionLvl9.FieldCall_1_1_0 returns FieldCall
	 *
	 * Constraint:
	 *     (callee=ExpressionLvl9_FieldCall_1_1_0 field=STRING)
	 */
	protected void sequence_ExpressionLvl9(ISerializationContext context, FieldCall semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonDslPackage.Literals.FIELD_CALL__CALLEE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonDslPackage.Literals.FIELD_CALL__CALLEE));
			if (transientValues.isValueTransient(semanticObject, JsonDslPackage.Literals.FIELD_CALL__FIELD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonDslPackage.Literals.FIELD_CALL__FIELD));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpressionLvl9Access().getFieldCallCalleeAction_1_1_0(), semanticObject.getCallee());
		feeder.accept(grammarAccess.getExpressionLvl9Access().getFieldSTRINGTerminalRuleCall_1_1_2_0(), semanticObject.getField());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SimpleStatement returns FieldInfo
	 *     Expression returns FieldInfo
	 *     ExpressionLvl1 returns FieldInfo
	 *     ExpressionLvl1.DisjunctionExpression_1_0 returns FieldInfo
	 *     ExpressionLvl2 returns FieldInfo
	 *     ExpressionLvl2.ConjunctionExpression_1_0 returns FieldInfo
	 *     ExpressionLvl3 returns FieldInfo
	 *     ExpressionLvl3.EqualityExpression_1_0_0 returns FieldInfo
	 *     ExpressionLvl3.InequalityExpression_1_1_0 returns FieldInfo
	 *     ExpressionLvl4 returns FieldInfo
	 *     ExpressionLvl4.SuperiorExpression_1_0_0 returns FieldInfo
	 *     ExpressionLvl4.SuperiorOrEqualExpression_1_1_0 returns FieldInfo
	 *     ExpressionLvl4.InferiorExpression_1_2_0 returns FieldInfo
	 *     ExpressionLvl4.InferiorOrEqualExpression_1_3_0 returns FieldInfo
	 *     ExpressionLvl5 returns FieldInfo
	 *     ExpressionLvl5.AdditionExpression_1_0_0 returns FieldInfo
	 *     ExpressionLvl5.SubstractionExpression_1_1_0 returns FieldInfo
	 *     ExpressionLvl6 returns FieldInfo
	 *     ExpressionLvl6.MultiplicationExpression_1_0_0 returns FieldInfo
	 *     ExpressionLvl6.DivisionExpression_1_1_0 returns FieldInfo
	 *     ExpressionLvl6.ModuloExpression_1_2_0 returns FieldInfo
	 *     ExpressionLvl7 returns FieldInfo
	 *     ExpressionLvl8 returns FieldInfo
	 *     ExpressionLvl9 returns FieldInfo
	 *     ExpressionLvl9.ArrayCall_1_0_0 returns FieldInfo
	 *     ExpressionLvl9.FieldCall_1_1_0 returns FieldInfo
	 *     PrimaryExpression returns FieldInfo
	 *     FunctionCall returns FieldInfo
	 *     InfoFunctions returns FieldInfo
	 *     FieldInfo returns FieldInfo
	 *
	 * Constraint:
	 *     expression=Expression
	 */
	protected void sequence_FieldInfo(ISerializationContext context, FieldInfo semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonDslPackage.Literals.FIELD_INFO__EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonDslPackage.Literals.FIELD_INFO__EXPRESSION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFieldInfoAccess().getExpressionExpressionParserRuleCall_2_0(), semanticObject.getExpression());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Field returns Field
	 *
	 * Constraint:
	 *     (key=Expression value=Expression)
	 */
	protected void sequence_Field(ISerializationContext context, Field semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonDslPackage.Literals.FIELD__KEY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonDslPackage.Literals.FIELD__KEY));
			if (transientValues.isValueTransient(semanticObject, JsonDslPackage.Literals.FIELD__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonDslPackage.Literals.FIELD__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFieldAccess().getKeyExpressionParserRuleCall_0_0(), semanticObject.getKey());
		feeder.accept(grammarAccess.getFieldAccess().getValueExpressionParserRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SimpleStatement returns JSonObject
	 *     Expression returns JSonObject
	 *     ExpressionLvl1 returns JSonObject
	 *     ExpressionLvl1.DisjunctionExpression_1_0 returns JSonObject
	 *     ExpressionLvl2 returns JSonObject
	 *     ExpressionLvl2.ConjunctionExpression_1_0 returns JSonObject
	 *     ExpressionLvl3 returns JSonObject
	 *     ExpressionLvl3.EqualityExpression_1_0_0 returns JSonObject
	 *     ExpressionLvl3.InequalityExpression_1_1_0 returns JSonObject
	 *     ExpressionLvl4 returns JSonObject
	 *     ExpressionLvl4.SuperiorExpression_1_0_0 returns JSonObject
	 *     ExpressionLvl4.SuperiorOrEqualExpression_1_1_0 returns JSonObject
	 *     ExpressionLvl4.InferiorExpression_1_2_0 returns JSonObject
	 *     ExpressionLvl4.InferiorOrEqualExpression_1_3_0 returns JSonObject
	 *     ExpressionLvl5 returns JSonObject
	 *     ExpressionLvl5.AdditionExpression_1_0_0 returns JSonObject
	 *     ExpressionLvl5.SubstractionExpression_1_1_0 returns JSonObject
	 *     ExpressionLvl6 returns JSonObject
	 *     ExpressionLvl6.MultiplicationExpression_1_0_0 returns JSonObject
	 *     ExpressionLvl6.DivisionExpression_1_1_0 returns JSonObject
	 *     ExpressionLvl6.ModuloExpression_1_2_0 returns JSonObject
	 *     ExpressionLvl7 returns JSonObject
	 *     ExpressionLvl8 returns JSonObject
	 *     ExpressionLvl9 returns JSonObject
	 *     ExpressionLvl9.ArrayCall_1_0_0 returns JSonObject
	 *     ExpressionLvl9.FieldCall_1_1_0 returns JSonObject
	 *     PrimaryExpression returns JSonObject
	 *     Constant returns JSonObject
	 *     JSonObject returns JSonObject
	 *
	 * Constraint:
	 *     (fields+=Field fields+=Field*)?
	 */
	protected void sequence_JSonObject(ISerializationContext context, JSonObject semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SimpleStatement returns Length
	 *     Expression returns Length
	 *     ExpressionLvl1 returns Length
	 *     ExpressionLvl1.DisjunctionExpression_1_0 returns Length
	 *     ExpressionLvl2 returns Length
	 *     ExpressionLvl2.ConjunctionExpression_1_0 returns Length
	 *     ExpressionLvl3 returns Length
	 *     ExpressionLvl3.EqualityExpression_1_0_0 returns Length
	 *     ExpressionLvl3.InequalityExpression_1_1_0 returns Length
	 *     ExpressionLvl4 returns Length
	 *     ExpressionLvl4.SuperiorExpression_1_0_0 returns Length
	 *     ExpressionLvl4.SuperiorOrEqualExpression_1_1_0 returns Length
	 *     ExpressionLvl4.InferiorExpression_1_2_0 returns Length
	 *     ExpressionLvl4.InferiorOrEqualExpression_1_3_0 returns Length
	 *     ExpressionLvl5 returns Length
	 *     ExpressionLvl5.AdditionExpression_1_0_0 returns Length
	 *     ExpressionLvl5.SubstractionExpression_1_1_0 returns Length
	 *     ExpressionLvl6 returns Length
	 *     ExpressionLvl6.MultiplicationExpression_1_0_0 returns Length
	 *     ExpressionLvl6.DivisionExpression_1_1_0 returns Length
	 *     ExpressionLvl6.ModuloExpression_1_2_0 returns Length
	 *     ExpressionLvl7 returns Length
	 *     ExpressionLvl8 returns Length
	 *     ExpressionLvl9 returns Length
	 *     ExpressionLvl9.ArrayCall_1_0_0 returns Length
	 *     ExpressionLvl9.FieldCall_1_1_0 returns Length
	 *     PrimaryExpression returns Length
	 *     FunctionCall returns Length
	 *     InfoFunctions returns Length
	 *     Length returns Length
	 *
	 * Constraint:
	 *     expression=Expression
	 */
	protected void sequence_Length(ISerializationContext context, Length semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonDslPackage.Literals.LENGTH__EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonDslPackage.Literals.LENGTH__EXPRESSION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLengthAccess().getExpressionExpressionParserRuleCall_2_0(), semanticObject.getExpression());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SimpleStatement returns Load
	 *     Expression returns Load
	 *     ExpressionLvl1 returns Load
	 *     ExpressionLvl1.DisjunctionExpression_1_0 returns Load
	 *     ExpressionLvl2 returns Load
	 *     ExpressionLvl2.ConjunctionExpression_1_0 returns Load
	 *     ExpressionLvl3 returns Load
	 *     ExpressionLvl3.EqualityExpression_1_0_0 returns Load
	 *     ExpressionLvl3.InequalityExpression_1_1_0 returns Load
	 *     ExpressionLvl4 returns Load
	 *     ExpressionLvl4.SuperiorExpression_1_0_0 returns Load
	 *     ExpressionLvl4.SuperiorOrEqualExpression_1_1_0 returns Load
	 *     ExpressionLvl4.InferiorExpression_1_2_0 returns Load
	 *     ExpressionLvl4.InferiorOrEqualExpression_1_3_0 returns Load
	 *     ExpressionLvl5 returns Load
	 *     ExpressionLvl5.AdditionExpression_1_0_0 returns Load
	 *     ExpressionLvl5.SubstractionExpression_1_1_0 returns Load
	 *     ExpressionLvl6 returns Load
	 *     ExpressionLvl6.MultiplicationExpression_1_0_0 returns Load
	 *     ExpressionLvl6.DivisionExpression_1_1_0 returns Load
	 *     ExpressionLvl6.ModuloExpression_1_2_0 returns Load
	 *     ExpressionLvl7 returns Load
	 *     ExpressionLvl8 returns Load
	 *     ExpressionLvl9 returns Load
	 *     ExpressionLvl9.ArrayCall_1_0_0 returns Load
	 *     ExpressionLvl9.FieldCall_1_1_0 returns Load
	 *     PrimaryExpression returns Load
	 *     FunctionCall returns Load
	 *     IOFunctions returns Load
	 *     Load returns Load
	 *
	 * Constraint:
	 *     (fileName=STRING | fileName=STRING)?
	 */
	protected void sequence_Load(ISerializationContext context, Load semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SimpleStatement returns LogicalNegationExpression
	 *     Expression returns LogicalNegationExpression
	 *     ExpressionLvl1 returns LogicalNegationExpression
	 *     ExpressionLvl1.DisjunctionExpression_1_0 returns LogicalNegationExpression
	 *     ExpressionLvl2 returns LogicalNegationExpression
	 *     ExpressionLvl2.ConjunctionExpression_1_0 returns LogicalNegationExpression
	 *     ExpressionLvl3 returns LogicalNegationExpression
	 *     ExpressionLvl3.EqualityExpression_1_0_0 returns LogicalNegationExpression
	 *     ExpressionLvl3.InequalityExpression_1_1_0 returns LogicalNegationExpression
	 *     ExpressionLvl4 returns LogicalNegationExpression
	 *     ExpressionLvl4.SuperiorExpression_1_0_0 returns LogicalNegationExpression
	 *     ExpressionLvl4.SuperiorOrEqualExpression_1_1_0 returns LogicalNegationExpression
	 *     ExpressionLvl4.InferiorExpression_1_2_0 returns LogicalNegationExpression
	 *     ExpressionLvl4.InferiorOrEqualExpression_1_3_0 returns LogicalNegationExpression
	 *     ExpressionLvl5 returns LogicalNegationExpression
	 *     ExpressionLvl5.AdditionExpression_1_0_0 returns LogicalNegationExpression
	 *     ExpressionLvl5.SubstractionExpression_1_1_0 returns LogicalNegationExpression
	 *     ExpressionLvl6 returns LogicalNegationExpression
	 *     ExpressionLvl6.MultiplicationExpression_1_0_0 returns LogicalNegationExpression
	 *     ExpressionLvl6.DivisionExpression_1_1_0 returns LogicalNegationExpression
	 *     ExpressionLvl6.ModuloExpression_1_2_0 returns LogicalNegationExpression
	 *     ExpressionLvl7 returns LogicalNegationExpression
	 *     ExpressionLvl8 returns LogicalNegationExpression
	 *     LogicalNegationExpression returns LogicalNegationExpression
	 *
	 * Constraint:
	 *     sub=ExpressionLvl8
	 */
	protected void sequence_LogicalNegationExpression(ISerializationContext context, LogicalNegationExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonDslPackage.Literals.LOGICAL_NEGATION_EXPRESSION__SUB) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonDslPackage.Literals.LOGICAL_NEGATION_EXPRESSION__SUB));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLogicalNegationExpressionAccess().getSubExpressionLvl8ParserRuleCall_1_0(), semanticObject.getSub());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     stmts+=SimpleStatement+
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SimpleStatement returns PointerCall
	 *     Expression returns PointerCall
	 *     ExpressionLvl1 returns PointerCall
	 *     ExpressionLvl1.DisjunctionExpression_1_0 returns PointerCall
	 *     ExpressionLvl2 returns PointerCall
	 *     ExpressionLvl2.ConjunctionExpression_1_0 returns PointerCall
	 *     ExpressionLvl3 returns PointerCall
	 *     ExpressionLvl3.EqualityExpression_1_0_0 returns PointerCall
	 *     ExpressionLvl3.InequalityExpression_1_1_0 returns PointerCall
	 *     ExpressionLvl4 returns PointerCall
	 *     ExpressionLvl4.SuperiorExpression_1_0_0 returns PointerCall
	 *     ExpressionLvl4.SuperiorOrEqualExpression_1_1_0 returns PointerCall
	 *     ExpressionLvl4.InferiorExpression_1_2_0 returns PointerCall
	 *     ExpressionLvl4.InferiorOrEqualExpression_1_3_0 returns PointerCall
	 *     ExpressionLvl5 returns PointerCall
	 *     ExpressionLvl5.AdditionExpression_1_0_0 returns PointerCall
	 *     ExpressionLvl5.SubstractionExpression_1_1_0 returns PointerCall
	 *     ExpressionLvl6 returns PointerCall
	 *     ExpressionLvl6.MultiplicationExpression_1_0_0 returns PointerCall
	 *     ExpressionLvl6.DivisionExpression_1_1_0 returns PointerCall
	 *     ExpressionLvl6.ModuloExpression_1_2_0 returns PointerCall
	 *     ExpressionLvl7 returns PointerCall
	 *     ExpressionLvl8 returns PointerCall
	 *     ExpressionLvl9 returns PointerCall
	 *     ExpressionLvl9.ArrayCall_1_0_0 returns PointerCall
	 *     ExpressionLvl9.FieldCall_1_1_0 returns PointerCall
	 *     PrimaryExpression returns PointerCall
	 *     PointerCall returns PointerCall
	 *
	 * Constraint:
	 *     {PointerCall}
	 */
	protected void sequence_PointerCall(ISerializationContext context, PointerCall semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SimpleStatement returns Primitive
	 *     Expression returns Primitive
	 *     ExpressionLvl1 returns Primitive
	 *     ExpressionLvl1.DisjunctionExpression_1_0 returns Primitive
	 *     ExpressionLvl2 returns Primitive
	 *     ExpressionLvl2.ConjunctionExpression_1_0 returns Primitive
	 *     ExpressionLvl3 returns Primitive
	 *     ExpressionLvl3.EqualityExpression_1_0_0 returns Primitive
	 *     ExpressionLvl3.InequalityExpression_1_1_0 returns Primitive
	 *     ExpressionLvl4 returns Primitive
	 *     ExpressionLvl4.SuperiorExpression_1_0_0 returns Primitive
	 *     ExpressionLvl4.SuperiorOrEqualExpression_1_1_0 returns Primitive
	 *     ExpressionLvl4.InferiorExpression_1_2_0 returns Primitive
	 *     ExpressionLvl4.InferiorOrEqualExpression_1_3_0 returns Primitive
	 *     ExpressionLvl5 returns Primitive
	 *     ExpressionLvl5.AdditionExpression_1_0_0 returns Primitive
	 *     ExpressionLvl5.SubstractionExpression_1_1_0 returns Primitive
	 *     ExpressionLvl6 returns Primitive
	 *     ExpressionLvl6.MultiplicationExpression_1_0_0 returns Primitive
	 *     ExpressionLvl6.DivisionExpression_1_1_0 returns Primitive
	 *     ExpressionLvl6.ModuloExpression_1_2_0 returns Primitive
	 *     ExpressionLvl7 returns Primitive
	 *     ExpressionLvl8 returns Primitive
	 *     ExpressionLvl9 returns Primitive
	 *     ExpressionLvl9.ArrayCall_1_0_0 returns Primitive
	 *     ExpressionLvl9.FieldCall_1_1_0 returns Primitive
	 *     PrimaryExpression returns Primitive
	 *     Constant returns Primitive
	 *     Primitive returns Primitive
	 *
	 * Constraint:
	 *     (str=STRING | intNum=INT | floatNum=DOUBLE | bool=BOOL | nil=NULL)
	 */
	protected void sequence_Primitive(ISerializationContext context, Primitive semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SimpleStatement returns Print
	 *     Print returns Print
	 *
	 * Constraint:
	 *     expression=Expression
	 */
	protected void sequence_Print(ISerializationContext context, Print semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonDslPackage.Literals.PRINT__EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonDslPackage.Literals.PRINT__EXPRESSION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPrintAccess().getExpressionExpressionParserRuleCall_2_0(), semanticObject.getExpression());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SimpleStatement returns Product
	 *     Expression returns Product
	 *     ExpressionLvl1 returns Product
	 *     ExpressionLvl1.DisjunctionExpression_1_0 returns Product
	 *     ExpressionLvl2 returns Product
	 *     ExpressionLvl2.ConjunctionExpression_1_0 returns Product
	 *     ExpressionLvl3 returns Product
	 *     ExpressionLvl3.EqualityExpression_1_0_0 returns Product
	 *     ExpressionLvl3.InequalityExpression_1_1_0 returns Product
	 *     ExpressionLvl4 returns Product
	 *     ExpressionLvl4.SuperiorExpression_1_0_0 returns Product
	 *     ExpressionLvl4.SuperiorOrEqualExpression_1_1_0 returns Product
	 *     ExpressionLvl4.InferiorExpression_1_2_0 returns Product
	 *     ExpressionLvl4.InferiorOrEqualExpression_1_3_0 returns Product
	 *     ExpressionLvl5 returns Product
	 *     ExpressionLvl5.AdditionExpression_1_0_0 returns Product
	 *     ExpressionLvl5.SubstractionExpression_1_1_0 returns Product
	 *     ExpressionLvl6 returns Product
	 *     ExpressionLvl6.MultiplicationExpression_1_0_0 returns Product
	 *     ExpressionLvl6.DivisionExpression_1_1_0 returns Product
	 *     ExpressionLvl6.ModuloExpression_1_2_0 returns Product
	 *     ExpressionLvl7 returns Product
	 *     ExpressionLvl8 returns Product
	 *     ExpressionLvl9 returns Product
	 *     ExpressionLvl9.ArrayCall_1_0_0 returns Product
	 *     ExpressionLvl9.FieldCall_1_1_0 returns Product
	 *     PrimaryExpression returns Product
	 *     FunctionCall returns Product
	 *     ArithFunctions returns Product
	 *     Product returns Product
	 *
	 * Constraint:
	 *     (expression=Expression field=Expression? whereExpression=Expression?)
	 */
	protected void sequence_Product(ISerializationContext context, Product semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ArraySpecifier returns RangeSpecifier
	 *     RangeSpecifier returns RangeSpecifier
	 *
	 * Constraint:
	 *     (from=INT to=INT)
	 */
	protected void sequence_RangeSpecifier(ISerializationContext context, RangeSpecifier semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonDslPackage.Literals.RANGE_SPECIFIER__FROM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonDslPackage.Literals.RANGE_SPECIFIER__FROM));
			if (transientValues.isValueTransient(semanticObject, JsonDslPackage.Literals.RANGE_SPECIFIER__TO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonDslPackage.Literals.RANGE_SPECIFIER__TO));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRangeSpecifierAccess().getFromINTTerminalRuleCall_0_0(), semanticObject.getFrom());
		feeder.accept(grammarAccess.getRangeSpecifierAccess().getToINTTerminalRuleCall_2_0(), semanticObject.getTo());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SimpleStatement returns Select
	 *     Expression returns Select
	 *     ExpressionLvl1 returns Select
	 *     ExpressionLvl1.DisjunctionExpression_1_0 returns Select
	 *     ExpressionLvl2 returns Select
	 *     ExpressionLvl2.ConjunctionExpression_1_0 returns Select
	 *     ExpressionLvl3 returns Select
	 *     ExpressionLvl3.EqualityExpression_1_0_0 returns Select
	 *     ExpressionLvl3.InequalityExpression_1_1_0 returns Select
	 *     ExpressionLvl4 returns Select
	 *     ExpressionLvl4.SuperiorExpression_1_0_0 returns Select
	 *     ExpressionLvl4.SuperiorOrEqualExpression_1_1_0 returns Select
	 *     ExpressionLvl4.InferiorExpression_1_2_0 returns Select
	 *     ExpressionLvl4.InferiorOrEqualExpression_1_3_0 returns Select
	 *     ExpressionLvl5 returns Select
	 *     ExpressionLvl5.AdditionExpression_1_0_0 returns Select
	 *     ExpressionLvl5.SubstractionExpression_1_1_0 returns Select
	 *     ExpressionLvl6 returns Select
	 *     ExpressionLvl6.MultiplicationExpression_1_0_0 returns Select
	 *     ExpressionLvl6.DivisionExpression_1_1_0 returns Select
	 *     ExpressionLvl6.ModuloExpression_1_2_0 returns Select
	 *     ExpressionLvl7 returns Select
	 *     ExpressionLvl8 returns Select
	 *     ExpressionLvl9 returns Select
	 *     ExpressionLvl9.ArrayCall_1_0_0 returns Select
	 *     ExpressionLvl9.FieldCall_1_1_0 returns Select
	 *     PrimaryExpression returns Select
	 *     FunctionCall returns Select
	 *     ManipFunctions returns Select
	 *     Select returns Select
	 *
	 * Constraint:
	 *     ((fields+=Expression fields+=Expression*)? fromExpression=Expression whereExpression=Expression?)
	 */
	protected void sequence_Select(ISerializationContext context, Select semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SimpleStatement returns Store
	 *     Expression returns Store
	 *     ExpressionLvl1 returns Store
	 *     ExpressionLvl1.DisjunctionExpression_1_0 returns Store
	 *     ExpressionLvl2 returns Store
	 *     ExpressionLvl2.ConjunctionExpression_1_0 returns Store
	 *     ExpressionLvl3 returns Store
	 *     ExpressionLvl3.EqualityExpression_1_0_0 returns Store
	 *     ExpressionLvl3.InequalityExpression_1_1_0 returns Store
	 *     ExpressionLvl4 returns Store
	 *     ExpressionLvl4.SuperiorExpression_1_0_0 returns Store
	 *     ExpressionLvl4.SuperiorOrEqualExpression_1_1_0 returns Store
	 *     ExpressionLvl4.InferiorExpression_1_2_0 returns Store
	 *     ExpressionLvl4.InferiorOrEqualExpression_1_3_0 returns Store
	 *     ExpressionLvl5 returns Store
	 *     ExpressionLvl5.AdditionExpression_1_0_0 returns Store
	 *     ExpressionLvl5.SubstractionExpression_1_1_0 returns Store
	 *     ExpressionLvl6 returns Store
	 *     ExpressionLvl6.MultiplicationExpression_1_0_0 returns Store
	 *     ExpressionLvl6.DivisionExpression_1_1_0 returns Store
	 *     ExpressionLvl6.ModuloExpression_1_2_0 returns Store
	 *     ExpressionLvl7 returns Store
	 *     ExpressionLvl8 returns Store
	 *     ExpressionLvl9 returns Store
	 *     ExpressionLvl9.ArrayCall_1_0_0 returns Store
	 *     ExpressionLvl9.FieldCall_1_1_0 returns Store
	 *     PrimaryExpression returns Store
	 *     FunctionCall returns Store
	 *     IOFunctions returns Store
	 *     Store returns Store
	 *
	 * Constraint:
	 *     (expression=Expression fileName=STRING)
	 */
	protected void sequence_Store(ISerializationContext context, Store semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonDslPackage.Literals.STORE__EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonDslPackage.Literals.STORE__EXPRESSION));
			if (transientValues.isValueTransient(semanticObject, JsonDslPackage.Literals.IO_FUNCTIONS__FILE_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonDslPackage.Literals.IO_FUNCTIONS__FILE_NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStoreAccess().getExpressionExpressionParserRuleCall_2_0(), semanticObject.getExpression());
		feeder.accept(grammarAccess.getStoreAccess().getFileNameSTRINGTerminalRuleCall_6_0(), semanticObject.getFileName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SimpleStatement returns Sum
	 *     Expression returns Sum
	 *     ExpressionLvl1 returns Sum
	 *     ExpressionLvl1.DisjunctionExpression_1_0 returns Sum
	 *     ExpressionLvl2 returns Sum
	 *     ExpressionLvl2.ConjunctionExpression_1_0 returns Sum
	 *     ExpressionLvl3 returns Sum
	 *     ExpressionLvl3.EqualityExpression_1_0_0 returns Sum
	 *     ExpressionLvl3.InequalityExpression_1_1_0 returns Sum
	 *     ExpressionLvl4 returns Sum
	 *     ExpressionLvl4.SuperiorExpression_1_0_0 returns Sum
	 *     ExpressionLvl4.SuperiorOrEqualExpression_1_1_0 returns Sum
	 *     ExpressionLvl4.InferiorExpression_1_2_0 returns Sum
	 *     ExpressionLvl4.InferiorOrEqualExpression_1_3_0 returns Sum
	 *     ExpressionLvl5 returns Sum
	 *     ExpressionLvl5.AdditionExpression_1_0_0 returns Sum
	 *     ExpressionLvl5.SubstractionExpression_1_1_0 returns Sum
	 *     ExpressionLvl6 returns Sum
	 *     ExpressionLvl6.MultiplicationExpression_1_0_0 returns Sum
	 *     ExpressionLvl6.DivisionExpression_1_1_0 returns Sum
	 *     ExpressionLvl6.ModuloExpression_1_2_0 returns Sum
	 *     ExpressionLvl7 returns Sum
	 *     ExpressionLvl8 returns Sum
	 *     ExpressionLvl9 returns Sum
	 *     ExpressionLvl9.ArrayCall_1_0_0 returns Sum
	 *     ExpressionLvl9.FieldCall_1_1_0 returns Sum
	 *     PrimaryExpression returns Sum
	 *     FunctionCall returns Sum
	 *     ArithFunctions returns Sum
	 *     Sum returns Sum
	 *
	 * Constraint:
	 *     (expression=Expression field=Expression? whereExpression=Expression?)
	 */
	protected void sequence_Sum(ISerializationContext context, Sum semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SimpleStatement returns UnaryMinusExpression
	 *     Expression returns UnaryMinusExpression
	 *     ExpressionLvl1 returns UnaryMinusExpression
	 *     ExpressionLvl1.DisjunctionExpression_1_0 returns UnaryMinusExpression
	 *     ExpressionLvl2 returns UnaryMinusExpression
	 *     ExpressionLvl2.ConjunctionExpression_1_0 returns UnaryMinusExpression
	 *     ExpressionLvl3 returns UnaryMinusExpression
	 *     ExpressionLvl3.EqualityExpression_1_0_0 returns UnaryMinusExpression
	 *     ExpressionLvl3.InequalityExpression_1_1_0 returns UnaryMinusExpression
	 *     ExpressionLvl4 returns UnaryMinusExpression
	 *     ExpressionLvl4.SuperiorExpression_1_0_0 returns UnaryMinusExpression
	 *     ExpressionLvl4.SuperiorOrEqualExpression_1_1_0 returns UnaryMinusExpression
	 *     ExpressionLvl4.InferiorExpression_1_2_0 returns UnaryMinusExpression
	 *     ExpressionLvl4.InferiorOrEqualExpression_1_3_0 returns UnaryMinusExpression
	 *     ExpressionLvl5 returns UnaryMinusExpression
	 *     ExpressionLvl5.AdditionExpression_1_0_0 returns UnaryMinusExpression
	 *     ExpressionLvl5.SubstractionExpression_1_1_0 returns UnaryMinusExpression
	 *     ExpressionLvl6 returns UnaryMinusExpression
	 *     ExpressionLvl6.MultiplicationExpression_1_0_0 returns UnaryMinusExpression
	 *     ExpressionLvl6.DivisionExpression_1_1_0 returns UnaryMinusExpression
	 *     ExpressionLvl6.ModuloExpression_1_2_0 returns UnaryMinusExpression
	 *     ExpressionLvl7 returns UnaryMinusExpression
	 *     UnaryMinusExpression returns UnaryMinusExpression
	 *
	 * Constraint:
	 *     sub=ExpressionLvl7
	 */
	protected void sequence_UnaryMinusExpression(ISerializationContext context, UnaryMinusExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonDslPackage.Literals.UNARY_MINUS_EXPRESSION__SUB) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonDslPackage.Literals.UNARY_MINUS_EXPRESSION__SUB));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getUnaryMinusExpressionAccess().getSubExpressionLvl7ParserRuleCall_1_0(), semanticObject.getSub());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SimpleStatement returns UnaryPlusExpression
	 *     Expression returns UnaryPlusExpression
	 *     ExpressionLvl1 returns UnaryPlusExpression
	 *     ExpressionLvl1.DisjunctionExpression_1_0 returns UnaryPlusExpression
	 *     ExpressionLvl2 returns UnaryPlusExpression
	 *     ExpressionLvl2.ConjunctionExpression_1_0 returns UnaryPlusExpression
	 *     ExpressionLvl3 returns UnaryPlusExpression
	 *     ExpressionLvl3.EqualityExpression_1_0_0 returns UnaryPlusExpression
	 *     ExpressionLvl3.InequalityExpression_1_1_0 returns UnaryPlusExpression
	 *     ExpressionLvl4 returns UnaryPlusExpression
	 *     ExpressionLvl4.SuperiorExpression_1_0_0 returns UnaryPlusExpression
	 *     ExpressionLvl4.SuperiorOrEqualExpression_1_1_0 returns UnaryPlusExpression
	 *     ExpressionLvl4.InferiorExpression_1_2_0 returns UnaryPlusExpression
	 *     ExpressionLvl4.InferiorOrEqualExpression_1_3_0 returns UnaryPlusExpression
	 *     ExpressionLvl5 returns UnaryPlusExpression
	 *     ExpressionLvl5.AdditionExpression_1_0_0 returns UnaryPlusExpression
	 *     ExpressionLvl5.SubstractionExpression_1_1_0 returns UnaryPlusExpression
	 *     ExpressionLvl6 returns UnaryPlusExpression
	 *     ExpressionLvl6.MultiplicationExpression_1_0_0 returns UnaryPlusExpression
	 *     ExpressionLvl6.DivisionExpression_1_1_0 returns UnaryPlusExpression
	 *     ExpressionLvl6.ModuloExpression_1_2_0 returns UnaryPlusExpression
	 *     ExpressionLvl7 returns UnaryPlusExpression
	 *     UnaryPlusExpression returns UnaryPlusExpression
	 *
	 * Constraint:
	 *     sub=ExpressionLvl7
	 */
	protected void sequence_UnaryPlusExpression(ISerializationContext context, UnaryPlusExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonDslPackage.Literals.UNARY_PLUS_EXPRESSION__SUB) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonDslPackage.Literals.UNARY_PLUS_EXPRESSION__SUB));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getUnaryPlusExpressionAccess().getSubExpressionLvl7ParserRuleCall_1_0(), semanticObject.getSub());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ArraySpecifier returns UnarySpecifier
	 *     UnarySpecifier returns UnarySpecifier
	 *
	 * Constraint:
	 *     index=INT
	 */
	protected void sequence_UnarySpecifier(ISerializationContext context, UnarySpecifier semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonDslPackage.Literals.UNARY_SPECIFIER__INDEX) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonDslPackage.Literals.UNARY_SPECIFIER__INDEX));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getUnarySpecifierAccess().getIndexINTTerminalRuleCall_0(), semanticObject.getIndex());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SimpleStatement returns VariableCall
	 *     Expression returns VariableCall
	 *     ExpressionLvl1 returns VariableCall
	 *     ExpressionLvl1.DisjunctionExpression_1_0 returns VariableCall
	 *     ExpressionLvl2 returns VariableCall
	 *     ExpressionLvl2.ConjunctionExpression_1_0 returns VariableCall
	 *     ExpressionLvl3 returns VariableCall
	 *     ExpressionLvl3.EqualityExpression_1_0_0 returns VariableCall
	 *     ExpressionLvl3.InequalityExpression_1_1_0 returns VariableCall
	 *     ExpressionLvl4 returns VariableCall
	 *     ExpressionLvl4.SuperiorExpression_1_0_0 returns VariableCall
	 *     ExpressionLvl4.SuperiorOrEqualExpression_1_1_0 returns VariableCall
	 *     ExpressionLvl4.InferiorExpression_1_2_0 returns VariableCall
	 *     ExpressionLvl4.InferiorOrEqualExpression_1_3_0 returns VariableCall
	 *     ExpressionLvl5 returns VariableCall
	 *     ExpressionLvl5.AdditionExpression_1_0_0 returns VariableCall
	 *     ExpressionLvl5.SubstractionExpression_1_1_0 returns VariableCall
	 *     ExpressionLvl6 returns VariableCall
	 *     ExpressionLvl6.MultiplicationExpression_1_0_0 returns VariableCall
	 *     ExpressionLvl6.DivisionExpression_1_1_0 returns VariableCall
	 *     ExpressionLvl6.ModuloExpression_1_2_0 returns VariableCall
	 *     ExpressionLvl7 returns VariableCall
	 *     ExpressionLvl8 returns VariableCall
	 *     ExpressionLvl9 returns VariableCall
	 *     ExpressionLvl9.ArrayCall_1_0_0 returns VariableCall
	 *     ExpressionLvl9.FieldCall_1_1_0 returns VariableCall
	 *     PrimaryExpression returns VariableCall
	 *     VariableCall returns VariableCall
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_VariableCall(ISerializationContext context, VariableCall semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonDslPackage.Literals.VARIABLE_CALL__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonDslPackage.Literals.VARIABLE_CALL__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVariableCallAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
}
