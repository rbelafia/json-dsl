/*
 * generated by Xtext 2.23.0
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.xtext.example.mydsl.services.JsonDslGrammarAccess;

@SuppressWarnings("all")
public class JsonDslSyntacticSequencer extends AbstractSyntacticSequencer {

	protected JsonDslGrammarAccess grammarAccess;
	protected AbstractElementAlias match_AddExpression_HyphenMinusKeyword_1_0_1_or_PlusSignKeyword_1_0_0;
	protected AbstractElementAlias match_CompExpression_GreaterThanSignEqualsSignKeyword_1_0_1_or_GreaterThanSignKeyword_1_0_0_or_LessThanSignEqualsSignKeyword_1_0_3_or_LessThanSignKeyword_1_0_2;
	protected AbstractElementAlias match_EqExpression_EqualsSignEqualsSignKeyword_1_0_0_or_ExclamationMarkEqualsSignKeyword_1_0_1;
	protected AbstractElementAlias match_MultExpression_AsteriskKeyword_1_0_0_or_PercentSignKeyword_1_0_2_or_SolidusKeyword_1_0_1;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (JsonDslGrammarAccess) access;
		match_AddExpression_HyphenMinusKeyword_1_0_1_or_PlusSignKeyword_1_0_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getAddExpressionAccess().getHyphenMinusKeyword_1_0_1()), new TokenAlias(false, false, grammarAccess.getAddExpressionAccess().getPlusSignKeyword_1_0_0()));
		match_CompExpression_GreaterThanSignEqualsSignKeyword_1_0_1_or_GreaterThanSignKeyword_1_0_0_or_LessThanSignEqualsSignKeyword_1_0_3_or_LessThanSignKeyword_1_0_2 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getCompExpressionAccess().getGreaterThanSignEqualsSignKeyword_1_0_1()), new TokenAlias(false, false, grammarAccess.getCompExpressionAccess().getGreaterThanSignKeyword_1_0_0()), new TokenAlias(false, false, grammarAccess.getCompExpressionAccess().getLessThanSignEqualsSignKeyword_1_0_3()), new TokenAlias(false, false, grammarAccess.getCompExpressionAccess().getLessThanSignKeyword_1_0_2()));
		match_EqExpression_EqualsSignEqualsSignKeyword_1_0_0_or_ExclamationMarkEqualsSignKeyword_1_0_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getEqExpressionAccess().getEqualsSignEqualsSignKeyword_1_0_0()), new TokenAlias(false, false, grammarAccess.getEqExpressionAccess().getExclamationMarkEqualsSignKeyword_1_0_1()));
		match_MultExpression_AsteriskKeyword_1_0_0_or_PercentSignKeyword_1_0_2_or_SolidusKeyword_1_0_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getMultExpressionAccess().getAsteriskKeyword_1_0_0()), new TokenAlias(false, false, grammarAccess.getMultExpressionAccess().getPercentSignKeyword_1_0_2()), new TokenAlias(false, false, grammarAccess.getMultExpressionAccess().getSolidusKeyword_1_0_1()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getPointerRule())
			return getPointerToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getPrimitiveRule())
			return getPrimitiveToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * Pointer:
	 * 	'?'
	 * ;
	 */
	protected String getPointerToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "?";
	}
	
	/**
	 * Primitive:
	 * 	STRING | NUMBER | BOOL | NULL
	 * ;
	 */
	protected String getPrimitiveToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "\"\"";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_AddExpression_HyphenMinusKeyword_1_0_1_or_PlusSignKeyword_1_0_0.equals(syntax))
				emit_AddExpression_HyphenMinusKeyword_1_0_1_or_PlusSignKeyword_1_0_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_CompExpression_GreaterThanSignEqualsSignKeyword_1_0_1_or_GreaterThanSignKeyword_1_0_0_or_LessThanSignEqualsSignKeyword_1_0_3_or_LessThanSignKeyword_1_0_2.equals(syntax))
				emit_CompExpression_GreaterThanSignEqualsSignKeyword_1_0_1_or_GreaterThanSignKeyword_1_0_0_or_LessThanSignEqualsSignKeyword_1_0_3_or_LessThanSignKeyword_1_0_2(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_EqExpression_EqualsSignEqualsSignKeyword_1_0_0_or_ExclamationMarkEqualsSignKeyword_1_0_1.equals(syntax))
				emit_EqExpression_EqualsSignEqualsSignKeyword_1_0_0_or_ExclamationMarkEqualsSignKeyword_1_0_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_MultExpression_AsteriskKeyword_1_0_0_or_PercentSignKeyword_1_0_2_or_SolidusKeyword_1_0_1.equals(syntax))
				emit_MultExpression_AsteriskKeyword_1_0_0_or_PercentSignKeyword_1_0_2_or_SolidusKeyword_1_0_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     '+' | '-'
	 *
	 * This ambiguous syntax occurs at:
	 *     values+=MultExpression (ambiguity) values+=MultExpression
	 */
	protected void emit_AddExpression_HyphenMinusKeyword_1_0_1_or_PlusSignKeyword_1_0_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '>' | '>=' | '<' | '<='
	 *
	 * This ambiguous syntax occurs at:
	 *     values+=AddExpression (ambiguity) values+=AddExpression
	 */
	protected void emit_CompExpression_GreaterThanSignEqualsSignKeyword_1_0_1_or_GreaterThanSignKeyword_1_0_0_or_LessThanSignEqualsSignKeyword_1_0_3_or_LessThanSignKeyword_1_0_2(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '==' | '!='
	 *
	 * This ambiguous syntax occurs at:
	 *     values+=CompExpression (ambiguity) values+=CompExpression
	 */
	protected void emit_EqExpression_EqualsSignEqualsSignKeyword_1_0_0_or_ExclamationMarkEqualsSignKeyword_1_0_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '*' | '/' | '%'
	 *
	 * This ambiguous syntax occurs at:
	 *     values+=UnaryMinusExpression (ambiguity) values+=UnaryMinusExpression
	 */
	protected void emit_MultExpression_AsteriskKeyword_1_0_0_or_PercentSignKeyword_1_0_2_or_SolidusKeyword_1_0_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
