/*
 * generated by Xtext 2.23.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class JsonDslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JsonDsl.Model");
		private final Assignment cStmtsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cStmtsSimpleStatementParserRuleCall_0 = (RuleCall)cStmtsAssignment.eContents().get(0);
		
		//Model:
		//	stmts+=SimpleStatement*;
		@Override public ParserRule getRule() { return rule; }
		
		//stmts+=SimpleStatement*
		public Assignment getStmtsAssignment() { return cStmtsAssignment; }
		
		//SimpleStatement
		public RuleCall getStmtsSimpleStatementParserRuleCall_0() { return cStmtsSimpleStatementParserRuleCall_0; }
	}
	public class SimpleStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JsonDsl.SimpleStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cAssignmentParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cProcCallParserRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		///*Statement:
		//	(OpenStatement | ClosedStatement) ';'
		//;
		//
		//OpenStatement:
		//	OpenIf | OpenIfElse | OpenWhile
		//;
		//
		//OpenIf:
		//	'IF' condition=Expression 'THEN' (then=SimpleStatement | then=OpenStatement)
		//;
		//
		//OpenIfElse:
		//	'IF' condition=Expression 'THEN' then=ClosedStatement 'ELSE' else=OpenStatement
		//;
		//
		//OpenWhile:
		//	'WHILE' condition=Expression 'DO' loop=OpenStatement
		//;
		//
		//ClosedStatement:
		//	SimpleStatement | IfElseClosed | WhileClosed
		//;
		//
		//IfElseClosed:
		//	'IF' condition=Expression 'THEN' then=ClosedStatement 'ELSE' else=ClosedStatement
		//;
		//
		//WhileClosed:
		//	'WHILE' condition=Expression 'DO' loop=ClosedStatement
		//;*/ SimpleStatement:
		//	(Assignment | Expression | ProcCall) ';';
		@Override public ParserRule getRule() { return rule; }
		
		//(Assignment | Expression | ProcCall) ';'
		public Group getGroup() { return cGroup; }
		
		//(Assignment | Expression | ProcCall)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//Assignment
		public RuleCall getAssignmentParserRuleCall_0_0() { return cAssignmentParserRuleCall_0_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_0_1() { return cExpressionParserRuleCall_0_1; }
		
		//ProcCall
		public RuleCall getProcCallParserRuleCall_0_2() { return cProcCallParserRuleCall_0_2; }
		
		//';'
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}
	public class AssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JsonDsl.Assignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftHandSideAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftHandSideVariableCallParserRuleCall_0_0 = (RuleCall)cLeftHandSideAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRightHandSideAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightHandSideExpressionParserRuleCall_2_0 = (RuleCall)cRightHandSideAssignment_2.eContents().get(0);
		
		//Assignment:
		//	leftHandSide=VariableCall '=' rightHandSide=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//leftHandSide=VariableCall '=' rightHandSide=Expression
		public Group getGroup() { return cGroup; }
		
		//leftHandSide=VariableCall
		public Assignment getLeftHandSideAssignment_0() { return cLeftHandSideAssignment_0; }
		
		//VariableCall
		public RuleCall getLeftHandSideVariableCallParserRuleCall_0_0() { return cLeftHandSideVariableCallParserRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//rightHandSide=Expression
		public Assignment getRightHandSideAssignment_2() { return cRightHandSideAssignment_2; }
		
		//Expression
		public RuleCall getRightHandSideExpressionParserRuleCall_2_0() { return cRightHandSideExpressionParserRuleCall_2_0; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JsonDsl.Expression");
		private final RuleCall cBinaryExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Expression:
		//	BinaryExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//BinaryExpression
		public RuleCall getBinaryExpressionParserRuleCall() { return cBinaryExpressionParserRuleCall; }
	}
	public class BinaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JsonDsl.BinaryExpression");
		private final RuleCall cOrExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//BinaryExpression:
		//	OrExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//OrExpression
		public RuleCall getOrExpressionParserRuleCall() { return cOrExpressionParserRuleCall; }
	}
	public class OrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JsonDsl.OrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValuesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValuesAndExpressionParserRuleCall_0_0 = (RuleCall)cValuesAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cORKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cValuesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValuesAndExpressionParserRuleCall_1_1_0 = (RuleCall)cValuesAssignment_1_1.eContents().get(0);
		
		//OrExpression:
		//	values+=AndExpression ('OR' values+=AndExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//values+=AndExpression ('OR' values+=AndExpression)*
		public Group getGroup() { return cGroup; }
		
		//values+=AndExpression
		public Assignment getValuesAssignment_0() { return cValuesAssignment_0; }
		
		//AndExpression
		public RuleCall getValuesAndExpressionParserRuleCall_0_0() { return cValuesAndExpressionParserRuleCall_0_0; }
		
		//('OR' values+=AndExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'OR'
		public Keyword getORKeyword_1_0() { return cORKeyword_1_0; }
		
		//values+=AndExpression
		public Assignment getValuesAssignment_1_1() { return cValuesAssignment_1_1; }
		
		//AndExpression
		public RuleCall getValuesAndExpressionParserRuleCall_1_1_0() { return cValuesAndExpressionParserRuleCall_1_1_0; }
	}
	public class AndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JsonDsl.AndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValuesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValuesEqExpressionParserRuleCall_0_0 = (RuleCall)cValuesAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cANDKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cValuesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValuesEqExpressionParserRuleCall_1_1_0 = (RuleCall)cValuesAssignment_1_1.eContents().get(0);
		
		//AndExpression:
		//	values+=EqExpression ('AND' values+=EqExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//values+=EqExpression ('AND' values+=EqExpression)*
		public Group getGroup() { return cGroup; }
		
		//values+=EqExpression
		public Assignment getValuesAssignment_0() { return cValuesAssignment_0; }
		
		//EqExpression
		public RuleCall getValuesEqExpressionParserRuleCall_0_0() { return cValuesEqExpressionParserRuleCall_0_0; }
		
		//('AND' values+=EqExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'AND'
		public Keyword getANDKeyword_1_0() { return cANDKeyword_1_0; }
		
		//values+=EqExpression
		public Assignment getValuesAssignment_1_1() { return cValuesAssignment_1_1; }
		
		//EqExpression
		public RuleCall getValuesEqExpressionParserRuleCall_1_1_0() { return cValuesEqExpressionParserRuleCall_1_1_0; }
	}
	public class EqExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JsonDsl.EqExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValuesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValuesCompExpressionParserRuleCall_0_0 = (RuleCall)cValuesAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignKeyword_1_0_0 = (Keyword)cAlternatives_1_0.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_1_0_1 = (Keyword)cAlternatives_1_0.eContents().get(1);
		private final Assignment cValuesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValuesCompExpressionParserRuleCall_1_1_0 = (RuleCall)cValuesAssignment_1_1.eContents().get(0);
		
		//EqExpression:
		//	values+=CompExpression (('==' | '!=') values+=CompExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//values+=CompExpression (('==' | '!=') values+=CompExpression)*
		public Group getGroup() { return cGroup; }
		
		//values+=CompExpression
		public Assignment getValuesAssignment_0() { return cValuesAssignment_0; }
		
		//CompExpression
		public RuleCall getValuesCompExpressionParserRuleCall_0_0() { return cValuesCompExpressionParserRuleCall_0_0; }
		
		//(('==' | '!=') values+=CompExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//('==' | '!=')
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//'=='
		public Keyword getEqualsSignEqualsSignKeyword_1_0_0() { return cEqualsSignEqualsSignKeyword_1_0_0; }
		
		//'!='
		public Keyword getExclamationMarkEqualsSignKeyword_1_0_1() { return cExclamationMarkEqualsSignKeyword_1_0_1; }
		
		//values+=CompExpression
		public Assignment getValuesAssignment_1_1() { return cValuesAssignment_1_1; }
		
		//CompExpression
		public RuleCall getValuesCompExpressionParserRuleCall_1_1_0() { return cValuesCompExpressionParserRuleCall_1_1_0; }
	}
	public class CompExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JsonDsl.CompExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValuesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValuesAddExpressionParserRuleCall_0_0 = (RuleCall)cValuesAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_0_0 = (Keyword)cAlternatives_1_0.eContents().get(0);
		private final Keyword cGreaterThanSignEqualsSignKeyword_1_0_1 = (Keyword)cAlternatives_1_0.eContents().get(1);
		private final Keyword cLessThanSignKeyword_1_0_2 = (Keyword)cAlternatives_1_0.eContents().get(2);
		private final Keyword cLessThanSignEqualsSignKeyword_1_0_3 = (Keyword)cAlternatives_1_0.eContents().get(3);
		private final Assignment cValuesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValuesAddExpressionParserRuleCall_1_1_0 = (RuleCall)cValuesAssignment_1_1.eContents().get(0);
		
		//CompExpression:
		//	values+=AddExpression (('>' | '>=' | '<' | '<=') values+=AddExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//values+=AddExpression (('>' | '>=' | '<' | '<=') values+=AddExpression)*
		public Group getGroup() { return cGroup; }
		
		//values+=AddExpression
		public Assignment getValuesAssignment_0() { return cValuesAssignment_0; }
		
		//AddExpression
		public RuleCall getValuesAddExpressionParserRuleCall_0_0() { return cValuesAddExpressionParserRuleCall_0_0; }
		
		//(('>' | '>=' | '<' | '<=') values+=AddExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//('>' | '>=' | '<' | '<=')
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_1_0_0() { return cGreaterThanSignKeyword_1_0_0; }
		
		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword_1_0_1() { return cGreaterThanSignEqualsSignKeyword_1_0_1; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1_0_2() { return cLessThanSignKeyword_1_0_2; }
		
		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_1_0_3() { return cLessThanSignEqualsSignKeyword_1_0_3; }
		
		//values+=AddExpression
		public Assignment getValuesAssignment_1_1() { return cValuesAssignment_1_1; }
		
		//AddExpression
		public RuleCall getValuesAddExpressionParserRuleCall_1_1_0() { return cValuesAddExpressionParserRuleCall_1_1_0; }
	}
	public class AddExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JsonDsl.AddExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValuesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValuesMultExpressionParserRuleCall_0_0 = (RuleCall)cValuesAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0 = (Keyword)cAlternatives_1_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_1 = (Keyword)cAlternatives_1_0.eContents().get(1);
		private final Assignment cValuesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValuesMultExpressionParserRuleCall_1_1_0 = (RuleCall)cValuesAssignment_1_1.eContents().get(0);
		
		//AddExpression:
		//	values+=MultExpression (('+' | '-') values+=MultExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//values+=MultExpression (('+' | '-') values+=MultExpression)*
		public Group getGroup() { return cGroup; }
		
		//values+=MultExpression
		public Assignment getValuesAssignment_0() { return cValuesAssignment_0; }
		
		//MultExpression
		public RuleCall getValuesMultExpressionParserRuleCall_0_0() { return cValuesMultExpressionParserRuleCall_0_0; }
		
		//(('+' | '-') values+=MultExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//('+' | '-')
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_0_0() { return cPlusSignKeyword_1_0_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_0_1() { return cHyphenMinusKeyword_1_0_1; }
		
		//values+=MultExpression
		public Assignment getValuesAssignment_1_1() { return cValuesAssignment_1_1; }
		
		//MultExpression
		public RuleCall getValuesMultExpressionParserRuleCall_1_1_0() { return cValuesMultExpressionParserRuleCall_1_1_0; }
	}
	public class MultExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JsonDsl.MultExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValuesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValuesUnaryMinusExpressionParserRuleCall_0_0 = (RuleCall)cValuesAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_0_0 = (Keyword)cAlternatives_1_0.eContents().get(0);
		private final Keyword cSolidusKeyword_1_0_1 = (Keyword)cAlternatives_1_0.eContents().get(1);
		private final Keyword cPercentSignKeyword_1_0_2 = (Keyword)cAlternatives_1_0.eContents().get(2);
		private final Assignment cValuesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValuesUnaryMinusExpressionParserRuleCall_1_1_0 = (RuleCall)cValuesAssignment_1_1.eContents().get(0);
		
		//MultExpression:
		//	values+=UnaryMinusExpression (('*' | '/' | '%') values+=UnaryMinusExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//values+=UnaryMinusExpression (('*' | '/' | '%') values+=UnaryMinusExpression)*
		public Group getGroup() { return cGroup; }
		
		//values+=UnaryMinusExpression
		public Assignment getValuesAssignment_0() { return cValuesAssignment_0; }
		
		//UnaryMinusExpression
		public RuleCall getValuesUnaryMinusExpressionParserRuleCall_0_0() { return cValuesUnaryMinusExpressionParserRuleCall_0_0; }
		
		//(('*' | '/' | '%') values+=UnaryMinusExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//('*' | '/' | '%')
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_1_0_0() { return cAsteriskKeyword_1_0_0; }
		
		//'/'
		public Keyword getSolidusKeyword_1_0_1() { return cSolidusKeyword_1_0_1; }
		
		//'%'
		public Keyword getPercentSignKeyword_1_0_2() { return cPercentSignKeyword_1_0_2; }
		
		//values+=UnaryMinusExpression
		public Assignment getValuesAssignment_1_1() { return cValuesAssignment_1_1; }
		
		//UnaryMinusExpression
		public RuleCall getValuesUnaryMinusExpressionParserRuleCall_1_1_0() { return cValuesUnaryMinusExpressionParserRuleCall_1_1_0; }
	}
	public class UnaryMinusExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JsonDsl.UnaryMinusExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueUnaryMinusExpressionParserRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cValueNegationExpressionParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//UnaryMinusExpression:
		//	'-' value=UnaryMinusExpression | value=NegationExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//'-' value=UnaryMinusExpression | value=NegationExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'-' value=UnaryMinusExpression
		public Group getGroup_0() { return cGroup_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_0_0() { return cHyphenMinusKeyword_0_0; }
		
		//value=UnaryMinusExpression
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }
		
		//UnaryMinusExpression
		public RuleCall getValueUnaryMinusExpressionParserRuleCall_0_1_0() { return cValueUnaryMinusExpressionParserRuleCall_0_1_0; }
		
		//value=NegationExpression
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//NegationExpression
		public RuleCall getValueNegationExpressionParserRuleCall_1_0() { return cValueNegationExpressionParserRuleCall_1_0; }
	}
	public class NegationExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JsonDsl.NegationExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueNegationExpressionParserRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cValuePrimaryExpressionParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//NegationExpression:
		//	'!' value=NegationExpression | value=PrimaryExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//'!' value=NegationExpression | value=PrimaryExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'!' value=NegationExpression
		public Group getGroup_0() { return cGroup_0; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_0_0() { return cExclamationMarkKeyword_0_0; }
		
		//value=NegationExpression
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }
		
		//NegationExpression
		public RuleCall getValueNegationExpressionParserRuleCall_0_1_0() { return cValueNegationExpressionParserRuleCall_0_1_0; }
		
		//value=PrimaryExpression
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//PrimaryExpression
		public RuleCall getValuePrimaryExpressionParserRuleCall_1_0() { return cValuePrimaryExpressionParserRuleCall_1_0; }
	}
	public class PrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JsonDsl.PrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVariableCallParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConstantParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFunctionCallParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final RuleCall cFieldInvoquerParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cPrimaryExpressionAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final RuleCall cPointerParserRuleCall_5_1 = (RuleCall)cGroup_5.eContents().get(1);
		
		//PrimaryExpression:
		//	VariableCall | Constant | FunctionCall | '(' Expression ')' | FieldInvoquer | {PrimaryExpression} Pointer;
		@Override public ParserRule getRule() { return rule; }
		
		//VariableCall | Constant | FunctionCall | '(' Expression ')' | FieldInvoquer | {PrimaryExpression} Pointer
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//VariableCall
		public RuleCall getVariableCallParserRuleCall_0() { return cVariableCallParserRuleCall_0; }
		
		//Constant
		public RuleCall getConstantParserRuleCall_1() { return cConstantParserRuleCall_1; }
		
		//FunctionCall
		public RuleCall getFunctionCallParserRuleCall_2() { return cFunctionCallParserRuleCall_2; }
		
		//'(' Expression ')'
		public Group getGroup_3() { return cGroup_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_3_1() { return cExpressionParserRuleCall_3_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }
		
		//FieldInvoquer
		public RuleCall getFieldInvoquerParserRuleCall_4() { return cFieldInvoquerParserRuleCall_4; }
		
		//{PrimaryExpression} Pointer
		public Group getGroup_5() { return cGroup_5; }
		
		//{PrimaryExpression}
		public Action getPrimaryExpressionAction_5_0() { return cPrimaryExpressionAction_5_0; }
		
		//Pointer
		public RuleCall getPointerParserRuleCall_5_1() { return cPointerParserRuleCall_5_1; }
	}
	public class FieldInvoquerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JsonDsl.FieldInvoquer");
		private final Assignment cFieldAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cFieldFIELD_NAMETerminalRuleCall_0 = (RuleCall)cFieldAssignment.eContents().get(0);
		
		//FieldInvoquer:
		//	field=FIELD_NAME;
		@Override public ParserRule getRule() { return rule; }
		
		//field=FIELD_NAME
		public Assignment getFieldAssignment() { return cFieldAssignment; }
		
		//FIELD_NAME
		public RuleCall getFieldFIELD_NAMETerminalRuleCall_0() { return cFieldFIELD_NAMETerminalRuleCall_0; }
	}
	public class PointerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JsonDsl.Pointer");
		private final Keyword cQuestionMarkKeyword = (Keyword)rule.eContents().get(1);
		
		//Pointer:
		//	'?';
		@Override public ParserRule getRule() { return rule; }
		
		//'?'
		public Keyword getQuestionMarkKeyword() { return cQuestionMarkKeyword; }
	}
	public class VariableCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JsonDsl.VariableCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cCallerAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCallerAuxiliarCallerParserRuleCall_1_0 = (RuleCall)cCallerAssignment_1.eContents().get(0);
		
		//VariableCall:
		//	name=ID caller+=AuxiliarCaller*;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID caller+=AuxiliarCaller*
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//caller+=AuxiliarCaller*
		public Assignment getCallerAssignment_1() { return cCallerAssignment_1; }
		
		//AuxiliarCaller
		public RuleCall getCallerAuxiliarCallerParserRuleCall_1_0() { return cCallerAuxiliarCallerParserRuleCall_1_0; }
	}
	public class AuxiliarCallerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JsonDsl.AuxiliarCaller");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFieldCallerParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cArrayCallerParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AuxiliarCaller:
		//	FieldCaller | ArrayCaller;
		@Override public ParserRule getRule() { return rule; }
		
		//FieldCaller | ArrayCaller
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FieldCaller
		public RuleCall getFieldCallerParserRuleCall_0() { return cFieldCallerParserRuleCall_0; }
		
		//ArrayCaller
		public RuleCall getArrayCallerParserRuleCall_1() { return cArrayCallerParserRuleCall_1; }
	}
	public class FieldCallerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JsonDsl.FieldCaller");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTildeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cKeyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cKeyFIELD_NAMETerminalRuleCall_1_0 = (RuleCall)cKeyAssignment_1.eContents().get(0);
		
		//FieldCaller:
		//	'~' key=FIELD_NAME;
		@Override public ParserRule getRule() { return rule; }
		
		//'~' key=FIELD_NAME
		public Group getGroup() { return cGroup; }
		
		//'~'
		public Keyword getTildeKeyword_0() { return cTildeKeyword_0; }
		
		//key=FIELD_NAME
		public Assignment getKeyAssignment_1() { return cKeyAssignment_1; }
		
		//FIELD_NAME
		public RuleCall getKeyFIELD_NAMETerminalRuleCall_1_0() { return cKeyFIELD_NAMETerminalRuleCall_1_0; }
	}
	public class ArrayCallerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JsonDsl.ArrayCaller");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIndexAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIndexNUMBERTerminalRuleCall_1_0 = (RuleCall)cIndexAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cIndexAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cIndexNUMBERTerminalRuleCall_2_1_0 = (RuleCall)cIndexAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ArrayCaller:
		//	'[' index+=NUMBER (',' index+=NUMBER)* ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'[' index+=NUMBER (',' index+=NUMBER)* ']'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//index+=NUMBER
		public Assignment getIndexAssignment_1() { return cIndexAssignment_1; }
		
		//NUMBER
		public RuleCall getIndexNUMBERTerminalRuleCall_1_0() { return cIndexNUMBERTerminalRuleCall_1_0; }
		
		//(',' index+=NUMBER)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//index+=NUMBER
		public Assignment getIndexAssignment_2_1() { return cIndexAssignment_2_1; }
		
		//NUMBER
		public RuleCall getIndexNUMBERTerminalRuleCall_2_1_0() { return cIndexNUMBERTerminalRuleCall_2_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class FunctionCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JsonDsl.FunctionCall");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLoadParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStoreParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cExportParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDepthParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cFieldInfoParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cExtractParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cSelectParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cConcatParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cSumParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cProductParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cMeanParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cAddParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cInsertParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cRenameParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cRemoveParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		private final RuleCall cEraseParserRuleCall_15 = (RuleCall)cAlternatives.eContents().get(15);
		private final RuleCall cDeleteParserRuleCall_16 = (RuleCall)cAlternatives.eContents().get(16);
		
		//FunctionCall:
		//	Load | Store | Export | Depth | FieldInfo | Extract | Select | Concat | Sum | Product | Mean | Add | Insert | Rename |
		//	Remove | Erase | Delete;
		@Override public ParserRule getRule() { return rule; }
		
		//Load | Store | Export | Depth | FieldInfo | Extract | Select | Concat | Sum | Product | Mean | Add | Insert | Rename |
		//Remove | Erase | Delete
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Load
		public RuleCall getLoadParserRuleCall_0() { return cLoadParserRuleCall_0; }
		
		//Store
		public RuleCall getStoreParserRuleCall_1() { return cStoreParserRuleCall_1; }
		
		//Export
		public RuleCall getExportParserRuleCall_2() { return cExportParserRuleCall_2; }
		
		//Depth
		public RuleCall getDepthParserRuleCall_3() { return cDepthParserRuleCall_3; }
		
		//FieldInfo
		public RuleCall getFieldInfoParserRuleCall_4() { return cFieldInfoParserRuleCall_4; }
		
		//Extract
		public RuleCall getExtractParserRuleCall_5() { return cExtractParserRuleCall_5; }
		
		//Select
		public RuleCall getSelectParserRuleCall_6() { return cSelectParserRuleCall_6; }
		
		//Concat
		public RuleCall getConcatParserRuleCall_7() { return cConcatParserRuleCall_7; }
		
		//Sum
		public RuleCall getSumParserRuleCall_8() { return cSumParserRuleCall_8; }
		
		//Product
		public RuleCall getProductParserRuleCall_9() { return cProductParserRuleCall_9; }
		
		//Mean
		public RuleCall getMeanParserRuleCall_10() { return cMeanParserRuleCall_10; }
		
		//Add
		public RuleCall getAddParserRuleCall_11() { return cAddParserRuleCall_11; }
		
		//Insert
		public RuleCall getInsertParserRuleCall_12() { return cInsertParserRuleCall_12; }
		
		//Rename
		public RuleCall getRenameParserRuleCall_13() { return cRenameParserRuleCall_13; }
		
		//Remove
		public RuleCall getRemoveParserRuleCall_14() { return cRemoveParserRuleCall_14; }
		
		//Erase
		public RuleCall getEraseParserRuleCall_15() { return cEraseParserRuleCall_15; }
		
		//Delete
		public RuleCall getDeleteParserRuleCall_16() { return cDeleteParserRuleCall_16; }
	}
	public class LoadElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JsonDsl.Load");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLOADKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFileNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFileNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cFileNameAssignment_1.eContents().get(0);
		
		//Load:
		//	'LOAD' fileName=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'LOAD' fileName=STRING
		public Group getGroup() { return cGroup; }
		
		//'LOAD'
		public Keyword getLOADKeyword_0() { return cLOADKeyword_0; }
		
		//fileName=STRING
		public Assignment getFileNameAssignment_1() { return cFileNameAssignment_1; }
		
		//STRING
		public RuleCall getFileNameSTRINGTerminalRuleCall_1_0() { return cFileNameSTRINGTerminalRuleCall_1_0; }
	}
	public class StoreElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JsonDsl.Store");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSTOREKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Keyword cINKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFileNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFileNameSTRINGTerminalRuleCall_3_0 = (RuleCall)cFileNameAssignment_3.eContents().get(0);
		
		//Store:
		//	'STORE' expression=Expression 'IN' fileName=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'STORE' expression=Expression 'IN' fileName=STRING
		public Group getGroup() { return cGroup; }
		
		//'STORE'
		public Keyword getSTOREKeyword_0() { return cSTOREKeyword_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }
		
		//'IN'
		public Keyword getINKeyword_2() { return cINKeyword_2; }
		
		//fileName=STRING
		public Assignment getFileNameAssignment_3() { return cFileNameAssignment_3; }
		
		//STRING
		public RuleCall getFileNameSTRINGTerminalRuleCall_3_0() { return cFileNameSTRINGTerminalRuleCall_3_0; }
	}
	public class ExportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JsonDsl.Export");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEXPORT_CSVKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Keyword cINKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFileNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFileNameSTRINGTerminalRuleCall_3_0 = (RuleCall)cFileNameAssignment_3.eContents().get(0);
		
		//Export:
		//	'EXPORT_CSV' expression=Expression 'IN' fileName=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'EXPORT_CSV' expression=Expression 'IN' fileName=STRING
		public Group getGroup() { return cGroup; }
		
		//'EXPORT_CSV'
		public Keyword getEXPORT_CSVKeyword_0() { return cEXPORT_CSVKeyword_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }
		
		//'IN'
		public Keyword getINKeyword_2() { return cINKeyword_2; }
		
		//fileName=STRING
		public Assignment getFileNameAssignment_3() { return cFileNameAssignment_3; }
		
		//STRING
		public RuleCall getFileNameSTRINGTerminalRuleCall_3_0() { return cFileNameSTRINGTerminalRuleCall_3_0; }
	}
	public class ProcCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JsonDsl.ProcCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPRINTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//ProcCall:
		//	'PRINT' expression=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//'PRINT' expression=Expression
		public Group getGroup() { return cGroup; }
		
		//'PRINT'
		public Keyword getPRINTKeyword_0() { return cPRINTKeyword_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }
	}
	public class DepthElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JsonDsl.Depth");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGET_DEPTHKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//Depth:
		//	'GET_DEPTH' expression=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//'GET_DEPTH' expression=Expression
		public Group getGroup() { return cGroup; }
		
		//'GET_DEPTH'
		public Keyword getGET_DEPTHKeyword_0() { return cGET_DEPTHKeyword_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }
	}
	public class FieldInfoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JsonDsl.FieldInfo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGET_INFOSKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//FieldInfo:
		//	'GET_INFOS' expression=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//'GET_INFOS' expression=Expression
		public Group getGroup() { return cGroup; }
		
		//'GET_INFOS'
		public Keyword getGET_INFOSKeyword_0() { return cGET_INFOSKeyword_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }
	}
	public class ExtractElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JsonDsl.Extract");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEXTRACTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueExpressionParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Assignment cAuxiliarAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAuxiliarArithmeticAuxiliarParserRuleCall_2_0 = (RuleCall)cAuxiliarAssignment_2.eContents().get(0);
		
		//Extract:
		//	'EXTRACT' value=Expression auxiliar=ArithmeticAuxiliar;
		@Override public ParserRule getRule() { return rule; }
		
		//'EXTRACT' value=Expression auxiliar=ArithmeticAuxiliar
		public Group getGroup() { return cGroup; }
		
		//'EXTRACT'
		public Keyword getEXTRACTKeyword_0() { return cEXTRACTKeyword_0; }
		
		//value=Expression
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//Expression
		public RuleCall getValueExpressionParserRuleCall_1_0() { return cValueExpressionParserRuleCall_1_0; }
		
		//auxiliar=ArithmeticAuxiliar
		public Assignment getAuxiliarAssignment_2() { return cAuxiliarAssignment_2; }
		
		//ArithmeticAuxiliar
		public RuleCall getAuxiliarArithmeticAuxiliarParserRuleCall_2_0() { return cAuxiliarArithmeticAuxiliarParserRuleCall_2_0; }
	}
	public class SelectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JsonDsl.Select");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSELECTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFieldsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFieldsFIELD_NAMETerminalRuleCall_1_0 = (RuleCall)cFieldsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cFieldsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cFieldsFIELD_NAMETerminalRuleCall_2_1_0 = (RuleCall)cFieldsAssignment_2_1.eContents().get(0);
		private final Keyword cFROMKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFromAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFromExpressionParserRuleCall_4_0 = (RuleCall)cFromAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cWHEREKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cConditionAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cConditionExpressionParserRuleCall_5_1_0 = (RuleCall)cConditionAssignment_5_1.eContents().get(0);
		
		//Select:
		//	'SELECT' fields+=FIELD_NAME (',' fields+=FIELD_NAME)* 'FROM' from=Expression ('WHERE' condition=Expression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'SELECT' fields+=FIELD_NAME (',' fields+=FIELD_NAME)* 'FROM' from=Expression ('WHERE' condition=Expression)?
		public Group getGroup() { return cGroup; }
		
		//'SELECT'
		public Keyword getSELECTKeyword_0() { return cSELECTKeyword_0; }
		
		//fields+=FIELD_NAME
		public Assignment getFieldsAssignment_1() { return cFieldsAssignment_1; }
		
		//FIELD_NAME
		public RuleCall getFieldsFIELD_NAMETerminalRuleCall_1_0() { return cFieldsFIELD_NAMETerminalRuleCall_1_0; }
		
		//(',' fields+=FIELD_NAME)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//fields+=FIELD_NAME
		public Assignment getFieldsAssignment_2_1() { return cFieldsAssignment_2_1; }
		
		//FIELD_NAME
		public RuleCall getFieldsFIELD_NAMETerminalRuleCall_2_1_0() { return cFieldsFIELD_NAMETerminalRuleCall_2_1_0; }
		
		//'FROM'
		public Keyword getFROMKeyword_3() { return cFROMKeyword_3; }
		
		//from=Expression
		public Assignment getFromAssignment_4() { return cFromAssignment_4; }
		
		//Expression
		public RuleCall getFromExpressionParserRuleCall_4_0() { return cFromExpressionParserRuleCall_4_0; }
		
		//('WHERE' condition=Expression)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'WHERE'
		public Keyword getWHEREKeyword_5_0() { return cWHEREKeyword_5_0; }
		
		//condition=Expression
		public Assignment getConditionAssignment_5_1() { return cConditionAssignment_5_1; }
		
		//Expression
		public RuleCall getConditionExpressionParserRuleCall_5_1_0() { return cConditionExpressionParserRuleCall_5_1_0; }
	}
	public class ConcatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JsonDsl.Concat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCONCATKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFirstAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFirstExpressionParserRuleCall_1_0 = (RuleCall)cFirstAssignment_1.eContents().get(0);
		private final Keyword cWITHKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSecondAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSecondExpressionParserRuleCall_3_0 = (RuleCall)cSecondAssignment_3.eContents().get(0);
		
		//Concat:
		//	'CONCAT' first=Expression 'WITH' second=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//'CONCAT' first=Expression 'WITH' second=Expression
		public Group getGroup() { return cGroup; }
		
		//'CONCAT'
		public Keyword getCONCATKeyword_0() { return cCONCATKeyword_0; }
		
		//first=Expression
		public Assignment getFirstAssignment_1() { return cFirstAssignment_1; }
		
		//Expression
		public RuleCall getFirstExpressionParserRuleCall_1_0() { return cFirstExpressionParserRuleCall_1_0; }
		
		//'WITH'
		public Keyword getWITHKeyword_2() { return cWITHKeyword_2; }
		
		//second=Expression
		public Assignment getSecondAssignment_3() { return cSecondAssignment_3; }
		
		//Expression
		public RuleCall getSecondExpressionParserRuleCall_3_0() { return cSecondExpressionParserRuleCall_3_0; }
	}
	public class SumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JsonDsl.Sum");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSUMKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Assignment cAuxiliarAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAuxiliarArithmeticAuxiliarParserRuleCall_2_0 = (RuleCall)cAuxiliarAssignment_2.eContents().get(0);
		
		//Sum:
		//	'SUM' expression=Expression auxiliar=ArithmeticAuxiliar;
		@Override public ParserRule getRule() { return rule; }
		
		//'SUM' expression=Expression auxiliar=ArithmeticAuxiliar
		public Group getGroup() { return cGroup; }
		
		//'SUM'
		public Keyword getSUMKeyword_0() { return cSUMKeyword_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }
		
		//auxiliar=ArithmeticAuxiliar
		public Assignment getAuxiliarAssignment_2() { return cAuxiliarAssignment_2; }
		
		//ArithmeticAuxiliar
		public RuleCall getAuxiliarArithmeticAuxiliarParserRuleCall_2_0() { return cAuxiliarArithmeticAuxiliarParserRuleCall_2_0; }
	}
	public class ProductElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JsonDsl.Product");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPRODUCTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Assignment cAuxiliarAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAuxiliarArithmeticAuxiliarParserRuleCall_2_0 = (RuleCall)cAuxiliarAssignment_2.eContents().get(0);
		
		//Product:
		//	'PRODUCT' expression=Expression auxiliar=ArithmeticAuxiliar;
		@Override public ParserRule getRule() { return rule; }
		
		//'PRODUCT' expression=Expression auxiliar=ArithmeticAuxiliar
		public Group getGroup() { return cGroup; }
		
		//'PRODUCT'
		public Keyword getPRODUCTKeyword_0() { return cPRODUCTKeyword_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }
		
		//auxiliar=ArithmeticAuxiliar
		public Assignment getAuxiliarAssignment_2() { return cAuxiliarAssignment_2; }
		
		//ArithmeticAuxiliar
		public RuleCall getAuxiliarArithmeticAuxiliarParserRuleCall_2_0() { return cAuxiliarArithmeticAuxiliarParserRuleCall_2_0; }
	}
	public class MeanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JsonDsl.Mean");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMEANKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Assignment cAuxiliarAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAuxiliarArithmeticAuxiliarParserRuleCall_2_0 = (RuleCall)cAuxiliarAssignment_2.eContents().get(0);
		
		//Mean:
		//	'MEAN' expression=Expression auxiliar=ArithmeticAuxiliar;
		@Override public ParserRule getRule() { return rule; }
		
		//'MEAN' expression=Expression auxiliar=ArithmeticAuxiliar
		public Group getGroup() { return cGroup; }
		
		//'MEAN'
		public Keyword getMEANKeyword_0() { return cMEANKeyword_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }
		
		//auxiliar=ArithmeticAuxiliar
		public Assignment getAuxiliarAssignment_2() { return cAuxiliarAssignment_2; }
		
		//ArithmeticAuxiliar
		public RuleCall getAuxiliarArithmeticAuxiliarParserRuleCall_2_0() { return cAuxiliarArithmeticAuxiliarParserRuleCall_2_0; }
	}
	public class ArithmeticAuxiliarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JsonDsl.ArithmeticAuxiliar");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cArithmeticAuxiliarAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cONKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cFieldsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cFieldsFIELD_NAMETerminalRuleCall_1_1_0 = (RuleCall)cFieldsAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cFieldsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cFieldsFIELD_NAMETerminalRuleCall_1_2_1_0 = (RuleCall)cFieldsAssignment_1_2_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cWHEREKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cConditionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cConditionExpressionParserRuleCall_2_1_0 = (RuleCall)cConditionAssignment_2_1.eContents().get(0);
		
		//ArithmeticAuxiliar:
		//	{ArithmeticAuxiliar} ('ON' fields+=FIELD_NAME (',' fields+=FIELD_NAME)*)? ('WHERE' condition=Expression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{ArithmeticAuxiliar} ('ON' fields+=FIELD_NAME (',' fields+=FIELD_NAME)*)? ('WHERE' condition=Expression)?
		public Group getGroup() { return cGroup; }
		
		//{ArithmeticAuxiliar}
		public Action getArithmeticAuxiliarAction_0() { return cArithmeticAuxiliarAction_0; }
		
		//('ON' fields+=FIELD_NAME (',' fields+=FIELD_NAME)*)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'ON'
		public Keyword getONKeyword_1_0() { return cONKeyword_1_0; }
		
		//fields+=FIELD_NAME
		public Assignment getFieldsAssignment_1_1() { return cFieldsAssignment_1_1; }
		
		//FIELD_NAME
		public RuleCall getFieldsFIELD_NAMETerminalRuleCall_1_1_0() { return cFieldsFIELD_NAMETerminalRuleCall_1_1_0; }
		
		//(',' fields+=FIELD_NAME)*
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//','
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }
		
		//fields+=FIELD_NAME
		public Assignment getFieldsAssignment_1_2_1() { return cFieldsAssignment_1_2_1; }
		
		//FIELD_NAME
		public RuleCall getFieldsFIELD_NAMETerminalRuleCall_1_2_1_0() { return cFieldsFIELD_NAMETerminalRuleCall_1_2_1_0; }
		
		//('WHERE' condition=Expression)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'WHERE'
		public Keyword getWHEREKeyword_2_0() { return cWHEREKeyword_2_0; }
		
		//condition=Expression
		public Assignment getConditionAssignment_2_1() { return cConditionAssignment_2_1; }
		
		//Expression
		public RuleCall getConditionExpressionParserRuleCall_2_1_0() { return cConditionExpressionParserRuleCall_2_1_0; }
	}
	public class AddElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JsonDsl.Add");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cADDKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueExpressionParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Keyword cINKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVariableAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVariableExpressionParserRuleCall_3_0 = (RuleCall)cVariableAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cONKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cFieldsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cFieldsFIELD_NAMETerminalRuleCall_4_1_0 = (RuleCall)cFieldsAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cFieldsAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cFieldsFIELD_NAMETerminalRuleCall_4_2_1_0 = (RuleCall)cFieldsAssignment_4_2_1.eContents().get(0);
		
		//Add:
		//	'ADD' value=Expression 'IN' variable=Expression ('ON' fields+=FIELD_NAME (',' fields+=FIELD_NAME)*)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'ADD' value=Expression 'IN' variable=Expression ('ON' fields+=FIELD_NAME (',' fields+=FIELD_NAME)*)?
		public Group getGroup() { return cGroup; }
		
		//'ADD'
		public Keyword getADDKeyword_0() { return cADDKeyword_0; }
		
		//value=Expression
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//Expression
		public RuleCall getValueExpressionParserRuleCall_1_0() { return cValueExpressionParserRuleCall_1_0; }
		
		//'IN'
		public Keyword getINKeyword_2() { return cINKeyword_2; }
		
		//variable=Expression
		public Assignment getVariableAssignment_3() { return cVariableAssignment_3; }
		
		//Expression
		public RuleCall getVariableExpressionParserRuleCall_3_0() { return cVariableExpressionParserRuleCall_3_0; }
		
		//('ON' fields+=FIELD_NAME (',' fields+=FIELD_NAME)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'ON'
		public Keyword getONKeyword_4_0() { return cONKeyword_4_0; }
		
		//fields+=FIELD_NAME
		public Assignment getFieldsAssignment_4_1() { return cFieldsAssignment_4_1; }
		
		//FIELD_NAME
		public RuleCall getFieldsFIELD_NAMETerminalRuleCall_4_1_0() { return cFieldsFIELD_NAMETerminalRuleCall_4_1_0; }
		
		//(',' fields+=FIELD_NAME)*
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//','
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }
		
		//fields+=FIELD_NAME
		public Assignment getFieldsAssignment_4_2_1() { return cFieldsAssignment_4_2_1; }
		
		//FIELD_NAME
		public RuleCall getFieldsFIELD_NAMETerminalRuleCall_4_2_1_0() { return cFieldsFIELD_NAMETerminalRuleCall_4_2_1_0; }
	}
	public class InsertElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JsonDsl.Insert");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cINSERTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueExpressionParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Keyword cINKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVariableAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVariableExpressionParserRuleCall_3_0 = (RuleCall)cVariableAssignment_3.eContents().get(0);
		private final Assignment cSpecifierAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSpecifierArraySpecifierParserRuleCall_4_0 = (RuleCall)cSpecifierAssignment_4.eContents().get(0);
		
		//Insert:
		//	'INSERT' value=Expression 'IN' variable=Expression specifier=ArraySpecifier;
		@Override public ParserRule getRule() { return rule; }
		
		//'INSERT' value=Expression 'IN' variable=Expression specifier=ArraySpecifier
		public Group getGroup() { return cGroup; }
		
		//'INSERT'
		public Keyword getINSERTKeyword_0() { return cINSERTKeyword_0; }
		
		//value=Expression
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//Expression
		public RuleCall getValueExpressionParserRuleCall_1_0() { return cValueExpressionParserRuleCall_1_0; }
		
		//'IN'
		public Keyword getINKeyword_2() { return cINKeyword_2; }
		
		//variable=Expression
		public Assignment getVariableAssignment_3() { return cVariableAssignment_3; }
		
		//Expression
		public RuleCall getVariableExpressionParserRuleCall_3_0() { return cVariableExpressionParserRuleCall_3_0; }
		
		//specifier=ArraySpecifier
		public Assignment getSpecifierAssignment_4() { return cSpecifierAssignment_4; }
		
		//ArraySpecifier
		public RuleCall getSpecifierArraySpecifierParserRuleCall_4_0() { return cSpecifierArraySpecifierParserRuleCall_4_0; }
	}
	public class RenameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JsonDsl.Rename");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRENAMEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCallAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCallVariableCallParserRuleCall_1_0 = (RuleCall)cCallAssignment_1.eContents().get(0);
		private final Keyword cONKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFieldsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFieldsFIELD_NAMETerminalRuleCall_3_0 = (RuleCall)cFieldsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cFieldsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cFieldsFIELD_NAMETerminalRuleCall_4_1_0 = (RuleCall)cFieldsAssignment_4_1.eContents().get(0);
		private final Keyword cTOKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cNfieldsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cNfieldsFIELD_NAMETerminalRuleCall_6_0 = (RuleCall)cNfieldsAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cCommaKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cNfieldsAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cNfieldsFIELD_NAMETerminalRuleCall_7_1_0 = (RuleCall)cNfieldsAssignment_7_1.eContents().get(0);
		
		//Rename:
		//	'RENAME' call=VariableCall 'ON' fields+=FIELD_NAME (',' fields+=FIELD_NAME)* 'TO' nfields+=FIELD_NAME (','
		//	nfields+=FIELD_NAME)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'RENAME' call=VariableCall 'ON' fields+=FIELD_NAME (',' fields+=FIELD_NAME)* 'TO' nfields+=FIELD_NAME (','
		//nfields+=FIELD_NAME)*
		public Group getGroup() { return cGroup; }
		
		//'RENAME'
		public Keyword getRENAMEKeyword_0() { return cRENAMEKeyword_0; }
		
		//call=VariableCall
		public Assignment getCallAssignment_1() { return cCallAssignment_1; }
		
		//VariableCall
		public RuleCall getCallVariableCallParserRuleCall_1_0() { return cCallVariableCallParserRuleCall_1_0; }
		
		//'ON'
		public Keyword getONKeyword_2() { return cONKeyword_2; }
		
		//fields+=FIELD_NAME
		public Assignment getFieldsAssignment_3() { return cFieldsAssignment_3; }
		
		//FIELD_NAME
		public RuleCall getFieldsFIELD_NAMETerminalRuleCall_3_0() { return cFieldsFIELD_NAMETerminalRuleCall_3_0; }
		
		//(',' fields+=FIELD_NAME)*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//fields+=FIELD_NAME
		public Assignment getFieldsAssignment_4_1() { return cFieldsAssignment_4_1; }
		
		//FIELD_NAME
		public RuleCall getFieldsFIELD_NAMETerminalRuleCall_4_1_0() { return cFieldsFIELD_NAMETerminalRuleCall_4_1_0; }
		
		//'TO'
		public Keyword getTOKeyword_5() { return cTOKeyword_5; }
		
		//nfields+=FIELD_NAME
		public Assignment getNfieldsAssignment_6() { return cNfieldsAssignment_6; }
		
		//FIELD_NAME
		public RuleCall getNfieldsFIELD_NAMETerminalRuleCall_6_0() { return cNfieldsFIELD_NAMETerminalRuleCall_6_0; }
		
		//(',' nfields+=FIELD_NAME)*
		public Group getGroup_7() { return cGroup_7; }
		
		//','
		public Keyword getCommaKeyword_7_0() { return cCommaKeyword_7_0; }
		
		//nfields+=FIELD_NAME
		public Assignment getNfieldsAssignment_7_1() { return cNfieldsAssignment_7_1; }
		
		//FIELD_NAME
		public RuleCall getNfieldsFIELD_NAMETerminalRuleCall_7_1_0() { return cNfieldsFIELD_NAMETerminalRuleCall_7_1_0; }
	}
	public class EraseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JsonDsl.Erase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cERASEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueExpressionParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cONKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cFieldsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cFieldsFIELD_NAMETerminalRuleCall_2_1_0 = (RuleCall)cFieldsAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cFieldsAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cFieldsFIELD_NAMETerminalRuleCall_2_2_1_0 = (RuleCall)cFieldsAssignment_2_2_1.eContents().get(0);
		
		//Erase:
		//	'ERASE' value=Expression ('ON' fields+=FIELD_NAME (',' fields+=FIELD_NAME)*)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'ERASE' value=Expression ('ON' fields+=FIELD_NAME (',' fields+=FIELD_NAME)*)?
		public Group getGroup() { return cGroup; }
		
		//'ERASE'
		public Keyword getERASEKeyword_0() { return cERASEKeyword_0; }
		
		//value=Expression
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//Expression
		public RuleCall getValueExpressionParserRuleCall_1_0() { return cValueExpressionParserRuleCall_1_0; }
		
		//('ON' fields+=FIELD_NAME (',' fields+=FIELD_NAME)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'ON'
		public Keyword getONKeyword_2_0() { return cONKeyword_2_0; }
		
		//fields+=FIELD_NAME
		public Assignment getFieldsAssignment_2_1() { return cFieldsAssignment_2_1; }
		
		//FIELD_NAME
		public RuleCall getFieldsFIELD_NAMETerminalRuleCall_2_1_0() { return cFieldsFIELD_NAMETerminalRuleCall_2_1_0; }
		
		//(',' fields+=FIELD_NAME)*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//fields+=FIELD_NAME
		public Assignment getFieldsAssignment_2_2_1() { return cFieldsAssignment_2_2_1; }
		
		//FIELD_NAME
		public RuleCall getFieldsFIELD_NAMETerminalRuleCall_2_2_1_0() { return cFieldsFIELD_NAMETerminalRuleCall_2_2_1_0; }
	}
	public class DeleteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JsonDsl.Delete");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDELETEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFieldsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFieldsFIELD_NAMETerminalRuleCall_1_0 = (RuleCall)cFieldsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cFieldsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cFieldsFIELD_NAMETerminalRuleCall_2_1_0 = (RuleCall)cFieldsAssignment_2_1.eContents().get(0);
		private final Keyword cFROMKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFromAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFromExpressionParserRuleCall_4_0 = (RuleCall)cFromAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cWHEREKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cConditionAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cConditionExpressionParserRuleCall_5_2_0 = (RuleCall)cConditionAssignment_5_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		
		//Delete:
		//	'DELETE' fields+=FIELD_NAME (',' fields+=FIELD_NAME)* 'FROM' from=Expression ('WHERE' '(' condition=Expression ')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'DELETE' fields+=FIELD_NAME (',' fields+=FIELD_NAME)* 'FROM' from=Expression ('WHERE' '(' condition=Expression ')')?
		public Group getGroup() { return cGroup; }
		
		//'DELETE'
		public Keyword getDELETEKeyword_0() { return cDELETEKeyword_0; }
		
		//fields+=FIELD_NAME
		public Assignment getFieldsAssignment_1() { return cFieldsAssignment_1; }
		
		//FIELD_NAME
		public RuleCall getFieldsFIELD_NAMETerminalRuleCall_1_0() { return cFieldsFIELD_NAMETerminalRuleCall_1_0; }
		
		//(',' fields+=FIELD_NAME)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//fields+=FIELD_NAME
		public Assignment getFieldsAssignment_2_1() { return cFieldsAssignment_2_1; }
		
		//FIELD_NAME
		public RuleCall getFieldsFIELD_NAMETerminalRuleCall_2_1_0() { return cFieldsFIELD_NAMETerminalRuleCall_2_1_0; }
		
		//'FROM'
		public Keyword getFROMKeyword_3() { return cFROMKeyword_3; }
		
		//from=Expression
		public Assignment getFromAssignment_4() { return cFromAssignment_4; }
		
		//Expression
		public RuleCall getFromExpressionParserRuleCall_4_0() { return cFromExpressionParserRuleCall_4_0; }
		
		//('WHERE' '(' condition=Expression ')')?
		public Group getGroup_5() { return cGroup_5; }
		
		//'WHERE'
		public Keyword getWHEREKeyword_5_0() { return cWHEREKeyword_5_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5_1() { return cLeftParenthesisKeyword_5_1; }
		
		//condition=Expression
		public Assignment getConditionAssignment_5_2() { return cConditionAssignment_5_2; }
		
		//Expression
		public RuleCall getConditionExpressionParserRuleCall_5_2_0() { return cConditionExpressionParserRuleCall_5_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5_3() { return cRightParenthesisKeyword_5_3; }
	}
	public class RemoveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JsonDsl.Remove");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cREMOVEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariableVariableCallParserRuleCall_1_0 = (RuleCall)cVariableAssignment_1.eContents().get(0);
		private final Assignment cSpecifierAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSpecifierArraySpecifierParserRuleCall_2_0 = (RuleCall)cSpecifierAssignment_2.eContents().get(0);
		
		//Remove:
		//	'REMOVE' variable=VariableCall specifier=ArraySpecifier;
		@Override public ParserRule getRule() { return rule; }
		
		//'REMOVE' variable=VariableCall specifier=ArraySpecifier
		public Group getGroup() { return cGroup; }
		
		//'REMOVE'
		public Keyword getREMOVEKeyword_0() { return cREMOVEKeyword_0; }
		
		//variable=VariableCall
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }
		
		//VariableCall
		public RuleCall getVariableVariableCallParserRuleCall_1_0() { return cVariableVariableCallParserRuleCall_1_0; }
		
		//specifier=ArraySpecifier
		public Assignment getSpecifierAssignment_2() { return cSpecifierAssignment_2; }
		
		//ArraySpecifier
		public RuleCall getSpecifierArraySpecifierParserRuleCall_2_0() { return cSpecifierArraySpecifierParserRuleCall_2_0; }
	}
	public class ArraySpecifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JsonDsl.ArraySpecifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cArraySpecifierAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cATKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cIndexAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cIndexExpressionParserRuleCall_1_1_0 = (RuleCall)cIndexAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cFieldsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cFieldsExpressionParserRuleCall_1_2_1_0 = (RuleCall)cFieldsAssignment_1_2_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cWHEREKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cConditionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cConditionExpressionParserRuleCall_2_1_0 = (RuleCall)cConditionAssignment_2_1.eContents().get(0);
		
		//ArraySpecifier:
		//	{ArraySpecifier} ('AT' index+=Expression (',' fields+=Expression)*)? ('WHERE' condition=Expression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{ArraySpecifier} ('AT' index+=Expression (',' fields+=Expression)*)? ('WHERE' condition=Expression)?
		public Group getGroup() { return cGroup; }
		
		//{ArraySpecifier}
		public Action getArraySpecifierAction_0() { return cArraySpecifierAction_0; }
		
		//('AT' index+=Expression (',' fields+=Expression)*)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'AT'
		public Keyword getATKeyword_1_0() { return cATKeyword_1_0; }
		
		//index+=Expression
		public Assignment getIndexAssignment_1_1() { return cIndexAssignment_1_1; }
		
		//Expression
		public RuleCall getIndexExpressionParserRuleCall_1_1_0() { return cIndexExpressionParserRuleCall_1_1_0; }
		
		//(',' fields+=Expression)*
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//','
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }
		
		//fields+=Expression
		public Assignment getFieldsAssignment_1_2_1() { return cFieldsAssignment_1_2_1; }
		
		//Expression
		public RuleCall getFieldsExpressionParserRuleCall_1_2_1_0() { return cFieldsExpressionParserRuleCall_1_2_1_0; }
		
		//('WHERE' condition=Expression)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'WHERE'
		public Keyword getWHEREKeyword_2_0() { return cWHEREKeyword_2_0; }
		
		//condition=Expression
		public Assignment getConditionAssignment_2_1() { return cConditionAssignment_2_1; }
		
		//Expression
		public RuleCall getConditionExpressionParserRuleCall_2_1_0() { return cConditionExpressionParserRuleCall_2_1_0; }
	}
	public class ConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JsonDsl.Constant");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cConstantAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final RuleCall cPrimitiveParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cArrayParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cObjectParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Constant:
		//	{Constant} Primitive | Array | Object;
		@Override public ParserRule getRule() { return rule; }
		
		//{Constant} Primitive | Array | Object
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Constant} Primitive
		public Group getGroup_0() { return cGroup_0; }
		
		//{Constant}
		public Action getConstantAction_0_0() { return cConstantAction_0_0; }
		
		//Primitive
		public RuleCall getPrimitiveParserRuleCall_0_1() { return cPrimitiveParserRuleCall_0_1; }
		
		//Array
		public RuleCall getArrayParserRuleCall_1() { return cArrayParserRuleCall_1; }
		
		//Object
		public RuleCall getObjectParserRuleCall_2() { return cObjectParserRuleCall_2; }
	}
	public class PrimitiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JsonDsl.Primitive");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNUMBERTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBOOLTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cNULLTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Primitive:
		//	STRING | NUMBER | BOOL | NULL;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | NUMBER | BOOL | NULL
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//NUMBER
		public RuleCall getNUMBERTerminalRuleCall_1() { return cNUMBERTerminalRuleCall_1; }
		
		//BOOL
		public RuleCall getBOOLTerminalRuleCall_2() { return cBOOLTerminalRuleCall_2; }
		
		//NULL
		public RuleCall getNULLTerminalRuleCall_3() { return cNULLTerminalRuleCall_3; }
	}
	public class ArrayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JsonDsl.Array");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cArrayAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cValuesAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cValuesExpressionParserRuleCall_2_0_0 = (RuleCall)cValuesAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cValuesAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cValuesExpressionParserRuleCall_2_1_1_0 = (RuleCall)cValuesAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Array:
		//	{Array} '[' (values+=Expression (',' values+=Expression)*)? ']';
		@Override public ParserRule getRule() { return rule; }
		
		//{Array} '[' (values+=Expression (',' values+=Expression)*)? ']'
		public Group getGroup() { return cGroup; }
		
		//{Array}
		public Action getArrayAction_0() { return cArrayAction_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//(values+=Expression (',' values+=Expression)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//values+=Expression
		public Assignment getValuesAssignment_2_0() { return cValuesAssignment_2_0; }
		
		//Expression
		public RuleCall getValuesExpressionParserRuleCall_2_0_0() { return cValuesExpressionParserRuleCall_2_0_0; }
		
		//(',' values+=Expression)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//values+=Expression
		public Assignment getValuesAssignment_2_1_1() { return cValuesAssignment_2_1_1; }
		
		//Expression
		public RuleCall getValuesExpressionParserRuleCall_2_1_1_0() { return cValuesExpressionParserRuleCall_2_1_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class ObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JsonDsl.Object");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cObjectAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cFieldsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cFieldsFieldParserRuleCall_2_0_0 = (RuleCall)cFieldsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cFieldsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cFieldsFieldParserRuleCall_2_1_1_0 = (RuleCall)cFieldsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Object:
		//	{Object} '{' (fields+=Field (',' fields+=Field)*)? '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Object} '{' (fields+=Field (',' fields+=Field)*)? '}'
		public Group getGroup() { return cGroup; }
		
		//{Object}
		public Action getObjectAction_0() { return cObjectAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(fields+=Field (',' fields+=Field)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//fields+=Field
		public Assignment getFieldsAssignment_2_0() { return cFieldsAssignment_2_0; }
		
		//Field
		public RuleCall getFieldsFieldParserRuleCall_2_0_0() { return cFieldsFieldParserRuleCall_2_0_0; }
		
		//(',' fields+=Field)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//fields+=Field
		public Assignment getFieldsAssignment_2_1_1() { return cFieldsAssignment_2_1_1; }
		
		//Field
		public RuleCall getFieldsFieldParserRuleCall_2_1_1_0() { return cFieldsFieldParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class FieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JsonDsl.Field");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyFIELD_NAMETerminalRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueExpressionParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Field:
		//	key=FIELD_NAME ':' value=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//key=FIELD_NAME ':' value=Expression
		public Group getGroup() { return cGroup; }
		
		//key=FIELD_NAME
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//FIELD_NAME
		public RuleCall getKeyFIELD_NAMETerminalRuleCall_0_0() { return cKeyFIELD_NAMETerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//value=Expression
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//Expression
		public RuleCall getValueExpressionParserRuleCall_2_0() { return cValueExpressionParserRuleCall_2_0; }
	}
	
	
	private final ModelElements pModel;
	private final SimpleStatementElements pSimpleStatement;
	private final AssignmentElements pAssignment;
	private final ExpressionElements pExpression;
	private final BinaryExpressionElements pBinaryExpression;
	private final OrExpressionElements pOrExpression;
	private final AndExpressionElements pAndExpression;
	private final EqExpressionElements pEqExpression;
	private final CompExpressionElements pCompExpression;
	private final AddExpressionElements pAddExpression;
	private final MultExpressionElements pMultExpression;
	private final UnaryMinusExpressionElements pUnaryMinusExpression;
	private final NegationExpressionElements pNegationExpression;
	private final PrimaryExpressionElements pPrimaryExpression;
	private final FieldInvoquerElements pFieldInvoquer;
	private final PointerElements pPointer;
	private final VariableCallElements pVariableCall;
	private final AuxiliarCallerElements pAuxiliarCaller;
	private final FieldCallerElements pFieldCaller;
	private final ArrayCallerElements pArrayCaller;
	private final FunctionCallElements pFunctionCall;
	private final LoadElements pLoad;
	private final StoreElements pStore;
	private final ExportElements pExport;
	private final ProcCallElements pProcCall;
	private final DepthElements pDepth;
	private final FieldInfoElements pFieldInfo;
	private final ExtractElements pExtract;
	private final SelectElements pSelect;
	private final ConcatElements pConcat;
	private final SumElements pSum;
	private final ProductElements pProduct;
	private final MeanElements pMean;
	private final ArithmeticAuxiliarElements pArithmeticAuxiliar;
	private final AddElements pAdd;
	private final InsertElements pInsert;
	private final RenameElements pRename;
	private final EraseElements pErase;
	private final DeleteElements pDelete;
	private final RemoveElements pRemove;
	private final ArraySpecifierElements pArraySpecifier;
	private final ConstantElements pConstant;
	private final PrimitiveElements pPrimitive;
	private final ArrayElements pArray;
	private final ObjectElements pObject;
	private final FieldElements pField;
	private final TerminalRule tFIELD_NAME;
	private final TerminalRule tNULL;
	private final TerminalRule tBOOL;
	private final TerminalRule tNUMBER;
	private final TerminalRule tDOUBLE;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public JsonDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pSimpleStatement = new SimpleStatementElements();
		this.pAssignment = new AssignmentElements();
		this.pExpression = new ExpressionElements();
		this.pBinaryExpression = new BinaryExpressionElements();
		this.pOrExpression = new OrExpressionElements();
		this.pAndExpression = new AndExpressionElements();
		this.pEqExpression = new EqExpressionElements();
		this.pCompExpression = new CompExpressionElements();
		this.pAddExpression = new AddExpressionElements();
		this.pMultExpression = new MultExpressionElements();
		this.pUnaryMinusExpression = new UnaryMinusExpressionElements();
		this.pNegationExpression = new NegationExpressionElements();
		this.pPrimaryExpression = new PrimaryExpressionElements();
		this.pFieldInvoquer = new FieldInvoquerElements();
		this.pPointer = new PointerElements();
		this.pVariableCall = new VariableCallElements();
		this.pAuxiliarCaller = new AuxiliarCallerElements();
		this.pFieldCaller = new FieldCallerElements();
		this.pArrayCaller = new ArrayCallerElements();
		this.pFunctionCall = new FunctionCallElements();
		this.pLoad = new LoadElements();
		this.pStore = new StoreElements();
		this.pExport = new ExportElements();
		this.pProcCall = new ProcCallElements();
		this.pDepth = new DepthElements();
		this.pFieldInfo = new FieldInfoElements();
		this.pExtract = new ExtractElements();
		this.pSelect = new SelectElements();
		this.pConcat = new ConcatElements();
		this.pSum = new SumElements();
		this.pProduct = new ProductElements();
		this.pMean = new MeanElements();
		this.pArithmeticAuxiliar = new ArithmeticAuxiliarElements();
		this.pAdd = new AddElements();
		this.pInsert = new InsertElements();
		this.pRename = new RenameElements();
		this.pErase = new EraseElements();
		this.pDelete = new DeleteElements();
		this.pRemove = new RemoveElements();
		this.pArraySpecifier = new ArraySpecifierElements();
		this.pConstant = new ConstantElements();
		this.pPrimitive = new PrimitiveElements();
		this.pArray = new ArrayElements();
		this.pObject = new ObjectElements();
		this.pField = new FieldElements();
		this.tFIELD_NAME = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JsonDsl.FIELD_NAME");
		this.tNULL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JsonDsl.NULL");
		this.tBOOL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JsonDsl.BOOL");
		this.tNUMBER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JsonDsl.NUMBER");
		this.tDOUBLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JsonDsl.DOUBLE");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.JsonDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	stmts+=SimpleStatement*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	///*Statement:
	//	(OpenStatement | ClosedStatement) ';'
	//;
	//
	//OpenStatement:
	//	OpenIf | OpenIfElse | OpenWhile
	//;
	//
	//OpenIf:
	//	'IF' condition=Expression 'THEN' (then=SimpleStatement | then=OpenStatement)
	//;
	//
	//OpenIfElse:
	//	'IF' condition=Expression 'THEN' then=ClosedStatement 'ELSE' else=OpenStatement
	//;
	//
	//OpenWhile:
	//	'WHILE' condition=Expression 'DO' loop=OpenStatement
	//;
	//
	//ClosedStatement:
	//	SimpleStatement | IfElseClosed | WhileClosed
	//;
	//
	//IfElseClosed:
	//	'IF' condition=Expression 'THEN' then=ClosedStatement 'ELSE' else=ClosedStatement
	//;
	//
	//WhileClosed:
	//	'WHILE' condition=Expression 'DO' loop=ClosedStatement
	//;*/ SimpleStatement:
	//	(Assignment | Expression | ProcCall) ';';
	public SimpleStatementElements getSimpleStatementAccess() {
		return pSimpleStatement;
	}
	
	public ParserRule getSimpleStatementRule() {
		return getSimpleStatementAccess().getRule();
	}
	
	//Assignment:
	//	leftHandSide=VariableCall '=' rightHandSide=Expression;
	public AssignmentElements getAssignmentAccess() {
		return pAssignment;
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}
	
	//Expression:
	//	BinaryExpression;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//BinaryExpression:
	//	OrExpression;
	public BinaryExpressionElements getBinaryExpressionAccess() {
		return pBinaryExpression;
	}
	
	public ParserRule getBinaryExpressionRule() {
		return getBinaryExpressionAccess().getRule();
	}
	
	//OrExpression:
	//	values+=AndExpression ('OR' values+=AndExpression)*;
	public OrExpressionElements getOrExpressionAccess() {
		return pOrExpression;
	}
	
	public ParserRule getOrExpressionRule() {
		return getOrExpressionAccess().getRule();
	}
	
	//AndExpression:
	//	values+=EqExpression ('AND' values+=EqExpression)*;
	public AndExpressionElements getAndExpressionAccess() {
		return pAndExpression;
	}
	
	public ParserRule getAndExpressionRule() {
		return getAndExpressionAccess().getRule();
	}
	
	//EqExpression:
	//	values+=CompExpression (('==' | '!=') values+=CompExpression)*;
	public EqExpressionElements getEqExpressionAccess() {
		return pEqExpression;
	}
	
	public ParserRule getEqExpressionRule() {
		return getEqExpressionAccess().getRule();
	}
	
	//CompExpression:
	//	values+=AddExpression (('>' | '>=' | '<' | '<=') values+=AddExpression)*;
	public CompExpressionElements getCompExpressionAccess() {
		return pCompExpression;
	}
	
	public ParserRule getCompExpressionRule() {
		return getCompExpressionAccess().getRule();
	}
	
	//AddExpression:
	//	values+=MultExpression (('+' | '-') values+=MultExpression)*;
	public AddExpressionElements getAddExpressionAccess() {
		return pAddExpression;
	}
	
	public ParserRule getAddExpressionRule() {
		return getAddExpressionAccess().getRule();
	}
	
	//MultExpression:
	//	values+=UnaryMinusExpression (('*' | '/' | '%') values+=UnaryMinusExpression)*;
	public MultExpressionElements getMultExpressionAccess() {
		return pMultExpression;
	}
	
	public ParserRule getMultExpressionRule() {
		return getMultExpressionAccess().getRule();
	}
	
	//UnaryMinusExpression:
	//	'-' value=UnaryMinusExpression | value=NegationExpression;
	public UnaryMinusExpressionElements getUnaryMinusExpressionAccess() {
		return pUnaryMinusExpression;
	}
	
	public ParserRule getUnaryMinusExpressionRule() {
		return getUnaryMinusExpressionAccess().getRule();
	}
	
	//NegationExpression:
	//	'!' value=NegationExpression | value=PrimaryExpression;
	public NegationExpressionElements getNegationExpressionAccess() {
		return pNegationExpression;
	}
	
	public ParserRule getNegationExpressionRule() {
		return getNegationExpressionAccess().getRule();
	}
	
	//PrimaryExpression:
	//	VariableCall | Constant | FunctionCall | '(' Expression ')' | FieldInvoquer | {PrimaryExpression} Pointer;
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return pPrimaryExpression;
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}
	
	//FieldInvoquer:
	//	field=FIELD_NAME;
	public FieldInvoquerElements getFieldInvoquerAccess() {
		return pFieldInvoquer;
	}
	
	public ParserRule getFieldInvoquerRule() {
		return getFieldInvoquerAccess().getRule();
	}
	
	//Pointer:
	//	'?';
	public PointerElements getPointerAccess() {
		return pPointer;
	}
	
	public ParserRule getPointerRule() {
		return getPointerAccess().getRule();
	}
	
	//VariableCall:
	//	name=ID caller+=AuxiliarCaller*;
	public VariableCallElements getVariableCallAccess() {
		return pVariableCall;
	}
	
	public ParserRule getVariableCallRule() {
		return getVariableCallAccess().getRule();
	}
	
	//AuxiliarCaller:
	//	FieldCaller | ArrayCaller;
	public AuxiliarCallerElements getAuxiliarCallerAccess() {
		return pAuxiliarCaller;
	}
	
	public ParserRule getAuxiliarCallerRule() {
		return getAuxiliarCallerAccess().getRule();
	}
	
	//FieldCaller:
	//	'~' key=FIELD_NAME;
	public FieldCallerElements getFieldCallerAccess() {
		return pFieldCaller;
	}
	
	public ParserRule getFieldCallerRule() {
		return getFieldCallerAccess().getRule();
	}
	
	//ArrayCaller:
	//	'[' index+=NUMBER (',' index+=NUMBER)* ']';
	public ArrayCallerElements getArrayCallerAccess() {
		return pArrayCaller;
	}
	
	public ParserRule getArrayCallerRule() {
		return getArrayCallerAccess().getRule();
	}
	
	//FunctionCall:
	//	Load | Store | Export | Depth | FieldInfo | Extract | Select | Concat | Sum | Product | Mean | Add | Insert | Rename |
	//	Remove | Erase | Delete;
	public FunctionCallElements getFunctionCallAccess() {
		return pFunctionCall;
	}
	
	public ParserRule getFunctionCallRule() {
		return getFunctionCallAccess().getRule();
	}
	
	//Load:
	//	'LOAD' fileName=STRING;
	public LoadElements getLoadAccess() {
		return pLoad;
	}
	
	public ParserRule getLoadRule() {
		return getLoadAccess().getRule();
	}
	
	//Store:
	//	'STORE' expression=Expression 'IN' fileName=STRING;
	public StoreElements getStoreAccess() {
		return pStore;
	}
	
	public ParserRule getStoreRule() {
		return getStoreAccess().getRule();
	}
	
	//Export:
	//	'EXPORT_CSV' expression=Expression 'IN' fileName=STRING;
	public ExportElements getExportAccess() {
		return pExport;
	}
	
	public ParserRule getExportRule() {
		return getExportAccess().getRule();
	}
	
	//ProcCall:
	//	'PRINT' expression=Expression;
	public ProcCallElements getProcCallAccess() {
		return pProcCall;
	}
	
	public ParserRule getProcCallRule() {
		return getProcCallAccess().getRule();
	}
	
	//Depth:
	//	'GET_DEPTH' expression=Expression;
	public DepthElements getDepthAccess() {
		return pDepth;
	}
	
	public ParserRule getDepthRule() {
		return getDepthAccess().getRule();
	}
	
	//FieldInfo:
	//	'GET_INFOS' expression=Expression;
	public FieldInfoElements getFieldInfoAccess() {
		return pFieldInfo;
	}
	
	public ParserRule getFieldInfoRule() {
		return getFieldInfoAccess().getRule();
	}
	
	//Extract:
	//	'EXTRACT' value=Expression auxiliar=ArithmeticAuxiliar;
	public ExtractElements getExtractAccess() {
		return pExtract;
	}
	
	public ParserRule getExtractRule() {
		return getExtractAccess().getRule();
	}
	
	//Select:
	//	'SELECT' fields+=FIELD_NAME (',' fields+=FIELD_NAME)* 'FROM' from=Expression ('WHERE' condition=Expression)?;
	public SelectElements getSelectAccess() {
		return pSelect;
	}
	
	public ParserRule getSelectRule() {
		return getSelectAccess().getRule();
	}
	
	//Concat:
	//	'CONCAT' first=Expression 'WITH' second=Expression;
	public ConcatElements getConcatAccess() {
		return pConcat;
	}
	
	public ParserRule getConcatRule() {
		return getConcatAccess().getRule();
	}
	
	//Sum:
	//	'SUM' expression=Expression auxiliar=ArithmeticAuxiliar;
	public SumElements getSumAccess() {
		return pSum;
	}
	
	public ParserRule getSumRule() {
		return getSumAccess().getRule();
	}
	
	//Product:
	//	'PRODUCT' expression=Expression auxiliar=ArithmeticAuxiliar;
	public ProductElements getProductAccess() {
		return pProduct;
	}
	
	public ParserRule getProductRule() {
		return getProductAccess().getRule();
	}
	
	//Mean:
	//	'MEAN' expression=Expression auxiliar=ArithmeticAuxiliar;
	public MeanElements getMeanAccess() {
		return pMean;
	}
	
	public ParserRule getMeanRule() {
		return getMeanAccess().getRule();
	}
	
	//ArithmeticAuxiliar:
	//	{ArithmeticAuxiliar} ('ON' fields+=FIELD_NAME (',' fields+=FIELD_NAME)*)? ('WHERE' condition=Expression)?;
	public ArithmeticAuxiliarElements getArithmeticAuxiliarAccess() {
		return pArithmeticAuxiliar;
	}
	
	public ParserRule getArithmeticAuxiliarRule() {
		return getArithmeticAuxiliarAccess().getRule();
	}
	
	//Add:
	//	'ADD' value=Expression 'IN' variable=Expression ('ON' fields+=FIELD_NAME (',' fields+=FIELD_NAME)*)?;
	public AddElements getAddAccess() {
		return pAdd;
	}
	
	public ParserRule getAddRule() {
		return getAddAccess().getRule();
	}
	
	//Insert:
	//	'INSERT' value=Expression 'IN' variable=Expression specifier=ArraySpecifier;
	public InsertElements getInsertAccess() {
		return pInsert;
	}
	
	public ParserRule getInsertRule() {
		return getInsertAccess().getRule();
	}
	
	//Rename:
	//	'RENAME' call=VariableCall 'ON' fields+=FIELD_NAME (',' fields+=FIELD_NAME)* 'TO' nfields+=FIELD_NAME (','
	//	nfields+=FIELD_NAME)*;
	public RenameElements getRenameAccess() {
		return pRename;
	}
	
	public ParserRule getRenameRule() {
		return getRenameAccess().getRule();
	}
	
	//Erase:
	//	'ERASE' value=Expression ('ON' fields+=FIELD_NAME (',' fields+=FIELD_NAME)*)?;
	public EraseElements getEraseAccess() {
		return pErase;
	}
	
	public ParserRule getEraseRule() {
		return getEraseAccess().getRule();
	}
	
	//Delete:
	//	'DELETE' fields+=FIELD_NAME (',' fields+=FIELD_NAME)* 'FROM' from=Expression ('WHERE' '(' condition=Expression ')')?;
	public DeleteElements getDeleteAccess() {
		return pDelete;
	}
	
	public ParserRule getDeleteRule() {
		return getDeleteAccess().getRule();
	}
	
	//Remove:
	//	'REMOVE' variable=VariableCall specifier=ArraySpecifier;
	public RemoveElements getRemoveAccess() {
		return pRemove;
	}
	
	public ParserRule getRemoveRule() {
		return getRemoveAccess().getRule();
	}
	
	//ArraySpecifier:
	//	{ArraySpecifier} ('AT' index+=Expression (',' fields+=Expression)*)? ('WHERE' condition=Expression)?;
	public ArraySpecifierElements getArraySpecifierAccess() {
		return pArraySpecifier;
	}
	
	public ParserRule getArraySpecifierRule() {
		return getArraySpecifierAccess().getRule();
	}
	
	//Constant:
	//	{Constant} Primitive | Array | Object;
	public ConstantElements getConstantAccess() {
		return pConstant;
	}
	
	public ParserRule getConstantRule() {
		return getConstantAccess().getRule();
	}
	
	//Primitive:
	//	STRING | NUMBER | BOOL | NULL;
	public PrimitiveElements getPrimitiveAccess() {
		return pPrimitive;
	}
	
	public ParserRule getPrimitiveRule() {
		return getPrimitiveAccess().getRule();
	}
	
	//Array:
	//	{Array} '[' (values+=Expression (',' values+=Expression)*)? ']';
	public ArrayElements getArrayAccess() {
		return pArray;
	}
	
	public ParserRule getArrayRule() {
		return getArrayAccess().getRule();
	}
	
	//Object:
	//	{Object} '{' (fields+=Field (',' fields+=Field)*)? '}';
	public ObjectElements getObjectAccess() {
		return pObject;
	}
	
	public ParserRule getObjectRule() {
		return getObjectAccess().getRule();
	}
	
	//Field:
	//	key=FIELD_NAME ':' value=Expression;
	public FieldElements getFieldAccess() {
		return pField;
	}
	
	public ParserRule getFieldRule() {
		return getFieldAccess().getRule();
	}
	
	//terminal FIELD_NAME:
	//	'$' ID;
	public TerminalRule getFIELD_NAMERule() {
		return tFIELD_NAME;
	}
	
	//terminal NULL:
	//	'null';
	public TerminalRule getNULLRule() {
		return tNULL;
	}
	
	//terminal BOOL:
	//	'true' | 'false';
	public TerminalRule getBOOLRule() {
		return tBOOL;
	}
	
	//terminal NUMBER:
	//	INT | DOUBLE;
	public TerminalRule getNUMBERRule() {
		return tNUMBER;
	}
	
	//terminal DOUBLE:
	//	INT+ '.' INT*;
	public TerminalRule getDOUBLERule() {
		return tDOUBLE;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
