/*
 * generated by Xtext 2.23.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class JsonDslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JsonDsl.Model");
		private final Assignment cStmtsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cStmtsSimpleStatementParserRuleCall_0 = (RuleCall)cStmtsAssignment.eContents().get(0);
		
		//Model:
		//	stmts+=SimpleStatement*;
		@Override public ParserRule getRule() { return rule; }
		
		//stmts+=SimpleStatement*
		public Assignment getStmtsAssignment() { return cStmtsAssignment; }
		
		//SimpleStatement
		public RuleCall getStmtsSimpleStatementParserRuleCall_0() { return cStmtsSimpleStatementParserRuleCall_0; }
	}
	public class SimpleStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JsonDsl.SimpleStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cAssignmentParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cProcCallParserRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//SimpleStatement:
		//	(Assignment | Expression | ProcCall) ';';
		@Override public ParserRule getRule() { return rule; }
		
		//(Assignment | Expression | ProcCall) ';'
		public Group getGroup() { return cGroup; }
		
		//(Assignment | Expression | ProcCall)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//Assignment
		public RuleCall getAssignmentParserRuleCall_0_0() { return cAssignmentParserRuleCall_0_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_0_1() { return cExpressionParserRuleCall_0_1; }
		
		//ProcCall
		public RuleCall getProcCallParserRuleCall_0_2() { return cProcCallParserRuleCall_0_2; }
		
		//';'
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}
	public class AssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JsonDsl.Assignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftHandSideAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftHandSideVariableCallParserRuleCall_0_0 = (RuleCall)cLeftHandSideAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRightHandSideAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightHandSideExpressionParserRuleCall_2_0 = (RuleCall)cRightHandSideAssignment_2.eContents().get(0);
		
		//Assignment:
		//	leftHandSide=VariableCall '=' rightHandSide=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//leftHandSide=VariableCall '=' rightHandSide=Expression
		public Group getGroup() { return cGroup; }
		
		//leftHandSide=VariableCall
		public Assignment getLeftHandSideAssignment_0() { return cLeftHandSideAssignment_0; }
		
		//VariableCall
		public RuleCall getLeftHandSideVariableCallParserRuleCall_0_0() { return cLeftHandSideVariableCallParserRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//rightHandSide=Expression
		public Assignment getRightHandSideAssignment_2() { return cRightHandSideAssignment_2; }
		
		//Expression
		public RuleCall getRightHandSideExpressionParserRuleCall_2_0() { return cRightHandSideExpressionParserRuleCall_2_0; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JsonDsl.Expression");
		private final RuleCall cExpressionLvl1ParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Expression:
		//	ExpressionLvl1;
		@Override public ParserRule getRule() { return rule; }
		
		//ExpressionLvl1
		public RuleCall getExpressionLvl1ParserRuleCall() { return cExpressionLvl1ParserRuleCall; }
	}
	public class ExpressionLvl1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JsonDsl.ExpressionLvl1");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpressionLvl2ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cDisjunctionExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cORKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExpressionLvl2ParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//ExpressionLvl1 Expression:
		//	ExpressionLvl2 ({DisjunctionExpression.left=current} 'OR' right=ExpressionLvl2)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ExpressionLvl2 ({DisjunctionExpression.left=current} 'OR' right=ExpressionLvl2)*
		public Group getGroup() { return cGroup; }
		
		//ExpressionLvl2
		public RuleCall getExpressionLvl2ParserRuleCall_0() { return cExpressionLvl2ParserRuleCall_0; }
		
		//({DisjunctionExpression.left=current} 'OR' right=ExpressionLvl2)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{DisjunctionExpression.left=current}
		public Action getDisjunctionExpressionLeftAction_1_0() { return cDisjunctionExpressionLeftAction_1_0; }
		
		//'OR'
		public Keyword getORKeyword_1_1() { return cORKeyword_1_1; }
		
		//right=ExpressionLvl2
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//ExpressionLvl2
		public RuleCall getRightExpressionLvl2ParserRuleCall_1_2_0() { return cRightExpressionLvl2ParserRuleCall_1_2_0; }
	}
	public class ExpressionLvl2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JsonDsl.ExpressionLvl2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpressionLvl3ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cConjunctionExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cANDKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExpressionLvl3ParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//ExpressionLvl2 Expression:
		//	ExpressionLvl3 ({ConjunctionExpression.left=current} 'AND' right=ExpressionLvl3)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ExpressionLvl3 ({ConjunctionExpression.left=current} 'AND' right=ExpressionLvl3)*
		public Group getGroup() { return cGroup; }
		
		//ExpressionLvl3
		public RuleCall getExpressionLvl3ParserRuleCall_0() { return cExpressionLvl3ParserRuleCall_0; }
		
		//({ConjunctionExpression.left=current} 'AND' right=ExpressionLvl3)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{ConjunctionExpression.left=current}
		public Action getConjunctionExpressionLeftAction_1_0() { return cConjunctionExpressionLeftAction_1_0; }
		
		//'AND'
		public Keyword getANDKeyword_1_1() { return cANDKeyword_1_1; }
		
		//right=ExpressionLvl3
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//ExpressionLvl3
		public RuleCall getRightExpressionLvl3ParserRuleCall_1_2_0() { return cRightExpressionLvl3ParserRuleCall_1_2_0; }
	}
	public class ExpressionLvl3Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JsonDsl.ExpressionLvl3");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpressionLvl4ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cEqualityExpressionLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRightExpressionLvl4ParserRuleCall_1_0_2_0 = (RuleCall)cRightAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cInequalityExpressionLeftAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cRightExpressionLvl4ParserRuleCall_1_1_2_0 = (RuleCall)cRightAssignment_1_1_2.eContents().get(0);
		
		//ExpressionLvl3 Expression:
		//	ExpressionLvl4 ({EqualityExpression.left=current} '==' right=ExpressionLvl4 | {InequalityExpression.left=current} '!='
		//	right=ExpressionLvl4)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ExpressionLvl4 ({EqualityExpression.left=current} '==' right=ExpressionLvl4 | {InequalityExpression.left=current} '!='
		//right=ExpressionLvl4)*
		public Group getGroup() { return cGroup; }
		
		//ExpressionLvl4
		public RuleCall getExpressionLvl4ParserRuleCall_0() { return cExpressionLvl4ParserRuleCall_0; }
		
		//({EqualityExpression.left=current} '==' right=ExpressionLvl4 | {InequalityExpression.left=current} '!='
		//right=ExpressionLvl4)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//{EqualityExpression.left=current} '==' right=ExpressionLvl4
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{EqualityExpression.left=current}
		public Action getEqualityExpressionLeftAction_1_0_0() { return cEqualityExpressionLeftAction_1_0_0; }
		
		//'=='
		public Keyword getEqualsSignEqualsSignKeyword_1_0_1() { return cEqualsSignEqualsSignKeyword_1_0_1; }
		
		//right=ExpressionLvl4
		public Assignment getRightAssignment_1_0_2() { return cRightAssignment_1_0_2; }
		
		//ExpressionLvl4
		public RuleCall getRightExpressionLvl4ParserRuleCall_1_0_2_0() { return cRightExpressionLvl4ParserRuleCall_1_0_2_0; }
		
		//{InequalityExpression.left=current} '!=' right=ExpressionLvl4
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//{InequalityExpression.left=current}
		public Action getInequalityExpressionLeftAction_1_1_0() { return cInequalityExpressionLeftAction_1_1_0; }
		
		//'!='
		public Keyword getExclamationMarkEqualsSignKeyword_1_1_1() { return cExclamationMarkEqualsSignKeyword_1_1_1; }
		
		//right=ExpressionLvl4
		public Assignment getRightAssignment_1_1_2() { return cRightAssignment_1_1_2; }
		
		//ExpressionLvl4
		public RuleCall getRightExpressionLvl4ParserRuleCall_1_1_2_0() { return cRightExpressionLvl4ParserRuleCall_1_1_2_0; }
	}
	public class ExpressionLvl4Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JsonDsl.ExpressionLvl4");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpressionLvl5ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cSuperiExpressionLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRightExpressionLvl5ParserRuleCall_1_0_2_0 = (RuleCall)cRightAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cSuperiorOrEqualExpressionLeftAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Keyword cGreaterThanSignEqualsSignKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cRightExpressionLvl5ParserRuleCall_1_1_2_0 = (RuleCall)cRightAssignment_1_1_2.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Action cInferiExpressionLeftAction_1_2_0 = (Action)cGroup_1_2.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1_2_1 = (Keyword)cGroup_1_2.eContents().get(1);
		private final Assignment cRightAssignment_1_2_2 = (Assignment)cGroup_1_2.eContents().get(2);
		private final RuleCall cRightExpressionLvl5ParserRuleCall_1_2_2_0 = (RuleCall)cRightAssignment_1_2_2.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cAlternatives_1.eContents().get(3);
		private final Action cInferiorOrEqualExpressionLeftAction_1_3_0 = (Action)cGroup_1_3.eContents().get(0);
		private final Keyword cLessThanSignEqualsSignKeyword_1_3_1 = (Keyword)cGroup_1_3.eContents().get(1);
		private final Assignment cRightAssignment_1_3_2 = (Assignment)cGroup_1_3.eContents().get(2);
		private final RuleCall cRightExpressionLvl5ParserRuleCall_1_3_2_0 = (RuleCall)cRightAssignment_1_3_2.eContents().get(0);
		
		//ExpressionLvl4 Expression:
		//	ExpressionLvl5 ({SuperiExpression.left=current} '>' right=ExpressionLvl5 | {SuperiorOrEqualExpression.left=current}
		//	'>=' right=ExpressionLvl5 | {InferiExpression.left=current} '<' right=ExpressionLvl5 |
		//	{InferiorOrEqualExpression.left=current} '<=' right=ExpressionLvl5)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ExpressionLvl5 ({SuperiExpression.left=current} '>' right=ExpressionLvl5 | {SuperiorOrEqualExpression.left=current} '>='
		//right=ExpressionLvl5 | {InferiExpression.left=current} '<' right=ExpressionLvl5 |
		//{InferiorOrEqualExpression.left=current} '<=' right=ExpressionLvl5)*
		public Group getGroup() { return cGroup; }
		
		//ExpressionLvl5
		public RuleCall getExpressionLvl5ParserRuleCall_0() { return cExpressionLvl5ParserRuleCall_0; }
		
		//({SuperiExpression.left=current} '>' right=ExpressionLvl5 | {SuperiorOrEqualExpression.left=current} '>='
		//right=ExpressionLvl5 | {InferiExpression.left=current} '<' right=ExpressionLvl5 |
		//{InferiorOrEqualExpression.left=current} '<=' right=ExpressionLvl5)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//{SuperiExpression.left=current} '>' right=ExpressionLvl5
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{SuperiExpression.left=current}
		public Action getSuperiExpressionLeftAction_1_0_0() { return cSuperiExpressionLeftAction_1_0_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_1_0_1() { return cGreaterThanSignKeyword_1_0_1; }
		
		//right=ExpressionLvl5
		public Assignment getRightAssignment_1_0_2() { return cRightAssignment_1_0_2; }
		
		//ExpressionLvl5
		public RuleCall getRightExpressionLvl5ParserRuleCall_1_0_2_0() { return cRightExpressionLvl5ParserRuleCall_1_0_2_0; }
		
		//{SuperiorOrEqualExpression.left=current} '>=' right=ExpressionLvl5
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//{SuperiorOrEqualExpression.left=current}
		public Action getSuperiorOrEqualExpressionLeftAction_1_1_0() { return cSuperiorOrEqualExpressionLeftAction_1_1_0; }
		
		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword_1_1_1() { return cGreaterThanSignEqualsSignKeyword_1_1_1; }
		
		//right=ExpressionLvl5
		public Assignment getRightAssignment_1_1_2() { return cRightAssignment_1_1_2; }
		
		//ExpressionLvl5
		public RuleCall getRightExpressionLvl5ParserRuleCall_1_1_2_0() { return cRightExpressionLvl5ParserRuleCall_1_1_2_0; }
		
		//{InferiExpression.left=current} '<' right=ExpressionLvl5
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//{InferiExpression.left=current}
		public Action getInferiExpressionLeftAction_1_2_0() { return cInferiExpressionLeftAction_1_2_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1_2_1() { return cLessThanSignKeyword_1_2_1; }
		
		//right=ExpressionLvl5
		public Assignment getRightAssignment_1_2_2() { return cRightAssignment_1_2_2; }
		
		//ExpressionLvl5
		public RuleCall getRightExpressionLvl5ParserRuleCall_1_2_2_0() { return cRightExpressionLvl5ParserRuleCall_1_2_2_0; }
		
		//{InferiorOrEqualExpression.left=current} '<=' right=ExpressionLvl5
		public Group getGroup_1_3() { return cGroup_1_3; }
		
		//{InferiorOrEqualExpression.left=current}
		public Action getInferiorOrEqualExpressionLeftAction_1_3_0() { return cInferiorOrEqualExpressionLeftAction_1_3_0; }
		
		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_1_3_1() { return cLessThanSignEqualsSignKeyword_1_3_1; }
		
		//right=ExpressionLvl5
		public Assignment getRightAssignment_1_3_2() { return cRightAssignment_1_3_2; }
		
		//ExpressionLvl5
		public RuleCall getRightExpressionLvl5ParserRuleCall_1_3_2_0() { return cRightExpressionLvl5ParserRuleCall_1_3_2_0; }
	}
	public class ExpressionLvl5Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JsonDsl.ExpressionLvl5");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpressionLvl6ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cAdditionExpressionLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRightExpressionLvl6ParserRuleCall_1_0_2_0 = (RuleCall)cRightAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cSubstractionExpressionLeftAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cRightExpressionLvl6ParserRuleCall_1_1_2_0 = (RuleCall)cRightAssignment_1_1_2.eContents().get(0);
		
		//ExpressionLvl5 Expression:
		//	ExpressionLvl6 ({AdditionExpression.left=current} '+' right=ExpressionLvl6 | {SubstractionExpression.left=current} '-'
		//	right=ExpressionLvl6)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ExpressionLvl6 ({AdditionExpression.left=current} '+' right=ExpressionLvl6 | {SubstractionExpression.left=current} '-'
		//right=ExpressionLvl6)*
		public Group getGroup() { return cGroup; }
		
		//ExpressionLvl6
		public RuleCall getExpressionLvl6ParserRuleCall_0() { return cExpressionLvl6ParserRuleCall_0; }
		
		//({AdditionExpression.left=current} '+' right=ExpressionLvl6 | {SubstractionExpression.left=current} '-'
		//right=ExpressionLvl6)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//{AdditionExpression.left=current} '+' right=ExpressionLvl6
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{AdditionExpression.left=current}
		public Action getAdditionExpressionLeftAction_1_0_0() { return cAdditionExpressionLeftAction_1_0_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_0_1() { return cPlusSignKeyword_1_0_1; }
		
		//right=ExpressionLvl6
		public Assignment getRightAssignment_1_0_2() { return cRightAssignment_1_0_2; }
		
		//ExpressionLvl6
		public RuleCall getRightExpressionLvl6ParserRuleCall_1_0_2_0() { return cRightExpressionLvl6ParserRuleCall_1_0_2_0; }
		
		//{SubstractionExpression.left=current} '-' right=ExpressionLvl6
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//{SubstractionExpression.left=current}
		public Action getSubstractionExpressionLeftAction_1_1_0() { return cSubstractionExpressionLeftAction_1_1_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_1_1() { return cHyphenMinusKeyword_1_1_1; }
		
		//right=ExpressionLvl6
		public Assignment getRightAssignment_1_1_2() { return cRightAssignment_1_1_2; }
		
		//ExpressionLvl6
		public RuleCall getRightExpressionLvl6ParserRuleCall_1_1_2_0() { return cRightExpressionLvl6ParserRuleCall_1_1_2_0; }
	}
	public class ExpressionLvl6Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JsonDsl.ExpressionLvl6");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpressionLvl7ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cMultiplicationExpressionLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRightExpressionLvl7ParserRuleCall_1_0_2_0 = (RuleCall)cRightAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cDivisionExpressionLeftAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Keyword cSolidusKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cRightExpressionLvl7ParserRuleCall_1_1_2_0 = (RuleCall)cRightAssignment_1_1_2.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Action cModuloExpressionLeftAction_1_2_0 = (Action)cGroup_1_2.eContents().get(0);
		private final Keyword cPercentSignKeyword_1_2_1 = (Keyword)cGroup_1_2.eContents().get(1);
		private final Assignment cRightAssignment_1_2_2 = (Assignment)cGroup_1_2.eContents().get(2);
		private final RuleCall cRightExpressionLvl7ParserRuleCall_1_2_2_0 = (RuleCall)cRightAssignment_1_2_2.eContents().get(0);
		
		//ExpressionLvl6 Expression:
		//	ExpressionLvl7 ({MultiplicationExpression.left=current} '*' right=ExpressionLvl7 | {DivisionExpression.left=current}
		//	'/' right=ExpressionLvl7 | {ModuloExpression.left=current} '%' right=ExpressionLvl7)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ExpressionLvl7 ({MultiplicationExpression.left=current} '*' right=ExpressionLvl7 | {DivisionExpression.left=current} '/'
		//right=ExpressionLvl7 | {ModuloExpression.left=current} '%' right=ExpressionLvl7)*
		public Group getGroup() { return cGroup; }
		
		//ExpressionLvl7
		public RuleCall getExpressionLvl7ParserRuleCall_0() { return cExpressionLvl7ParserRuleCall_0; }
		
		//({MultiplicationExpression.left=current} '*' right=ExpressionLvl7 | {DivisionExpression.left=current} '/'
		//right=ExpressionLvl7 | {ModuloExpression.left=current} '%' right=ExpressionLvl7)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//{MultiplicationExpression.left=current} '*' right=ExpressionLvl7
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{MultiplicationExpression.left=current}
		public Action getMultiplicationExpressionLeftAction_1_0_0() { return cMultiplicationExpressionLeftAction_1_0_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_1_0_1() { return cAsteriskKeyword_1_0_1; }
		
		//right=ExpressionLvl7
		public Assignment getRightAssignment_1_0_2() { return cRightAssignment_1_0_2; }
		
		//ExpressionLvl7
		public RuleCall getRightExpressionLvl7ParserRuleCall_1_0_2_0() { return cRightExpressionLvl7ParserRuleCall_1_0_2_0; }
		
		//{DivisionExpression.left=current} '/' right=ExpressionLvl7
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//{DivisionExpression.left=current}
		public Action getDivisionExpressionLeftAction_1_1_0() { return cDivisionExpressionLeftAction_1_1_0; }
		
		//'/'
		public Keyword getSolidusKeyword_1_1_1() { return cSolidusKeyword_1_1_1; }
		
		//right=ExpressionLvl7
		public Assignment getRightAssignment_1_1_2() { return cRightAssignment_1_1_2; }
		
		//ExpressionLvl7
		public RuleCall getRightExpressionLvl7ParserRuleCall_1_1_2_0() { return cRightExpressionLvl7ParserRuleCall_1_1_2_0; }
		
		//{ModuloExpression.left=current} '%' right=ExpressionLvl7
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//{ModuloExpression.left=current}
		public Action getModuloExpressionLeftAction_1_2_0() { return cModuloExpressionLeftAction_1_2_0; }
		
		//'%'
		public Keyword getPercentSignKeyword_1_2_1() { return cPercentSignKeyword_1_2_1; }
		
		//right=ExpressionLvl7
		public Assignment getRightAssignment_1_2_2() { return cRightAssignment_1_2_2; }
		
		//ExpressionLvl7
		public RuleCall getRightExpressionLvl7ParserRuleCall_1_2_2_0() { return cRightExpressionLvl7ParserRuleCall_1_2_2_0; }
	}
	public class ExpressionLvl7Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JsonDsl.ExpressionLvl7");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUnaryMinusExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUnaryPlusExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cExpressionLvl8ParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ExpressionLvl7 Expression:
		//	UnaryMinusExpression | UnaryPlusExpression | ExpressionLvl8;
		@Override public ParserRule getRule() { return rule; }
		
		//UnaryMinusExpression | UnaryPlusExpression | ExpressionLvl8
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//UnaryMinusExpression
		public RuleCall getUnaryMinusExpressionParserRuleCall_0() { return cUnaryMinusExpressionParserRuleCall_0; }
		
		//UnaryPlusExpression
		public RuleCall getUnaryPlusExpressionParserRuleCall_1() { return cUnaryPlusExpressionParserRuleCall_1; }
		
		//ExpressionLvl8
		public RuleCall getExpressionLvl8ParserRuleCall_2() { return cExpressionLvl8ParserRuleCall_2; }
	}
	public class UnaryMinusExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JsonDsl.UnaryMinusExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSubAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSubExpressionLvl7ParserRuleCall_1_0 = (RuleCall)cSubAssignment_1.eContents().get(0);
		
		//UnaryMinusExpression:
		//	'-' sub=ExpressionLvl7;
		@Override public ParserRule getRule() { return rule; }
		
		//'-' sub=ExpressionLvl7
		public Group getGroup() { return cGroup; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//sub=ExpressionLvl7
		public Assignment getSubAssignment_1() { return cSubAssignment_1; }
		
		//ExpressionLvl7
		public RuleCall getSubExpressionLvl7ParserRuleCall_1_0() { return cSubExpressionLvl7ParserRuleCall_1_0; }
	}
	public class UnaryPlusExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JsonDsl.UnaryPlusExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSubAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSubExpressionLvl7ParserRuleCall_1_0 = (RuleCall)cSubAssignment_1.eContents().get(0);
		
		//UnaryPlusExpression:
		//	'+' sub=ExpressionLvl7;
		@Override public ParserRule getRule() { return rule; }
		
		//'+' sub=ExpressionLvl7
		public Group getGroup() { return cGroup; }
		
		//'+'
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }
		
		//sub=ExpressionLvl7
		public Assignment getSubAssignment_1() { return cSubAssignment_1; }
		
		//ExpressionLvl7
		public RuleCall getSubExpressionLvl7ParserRuleCall_1_0() { return cSubExpressionLvl7ParserRuleCall_1_0; }
	}
	public class ExpressionLvl8Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JsonDsl.ExpressionLvl8");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLogicalNegationExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPrimaryExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ExpressionLvl8 Expression:
		//	LogicalNegationExpression | PrimaryExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//LogicalNegationExpression | PrimaryExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LogicalNegationExpression
		public RuleCall getLogicalNegationExpressionParserRuleCall_0() { return cLogicalNegationExpressionParserRuleCall_0; }
		
		//PrimaryExpression
		public RuleCall getPrimaryExpressionParserRuleCall_1() { return cPrimaryExpressionParserRuleCall_1; }
	}
	public class LogicalNegationExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JsonDsl.LogicalNegationExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSubAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSubExpressionLvl8ParserRuleCall_1_0 = (RuleCall)cSubAssignment_1.eContents().get(0);
		
		//LogicalNegationExpression:
		//	'!' sub=ExpressionLvl8;
		@Override public ParserRule getRule() { return rule; }
		
		//'!' sub=ExpressionLvl8
		public Group getGroup() { return cGroup; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_0() { return cExclamationMarkKeyword_0; }
		
		//sub=ExpressionLvl8
		public Assignment getSubAssignment_1() { return cSubAssignment_1; }
		
		//ExpressionLvl8
		public RuleCall getSubExpressionLvl8ParserRuleCall_1_0() { return cSubExpressionLvl8ParserRuleCall_1_0; }
	}
	public class PrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JsonDsl.PrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVariableCallParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConstantParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFunctionCallParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cBracketExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cPrimaryExpressionAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final RuleCall cPointerParserRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		
		//PrimaryExpression Expression:
		//	VariableCall | Constant | FunctionCall | BracketExpression | {PrimaryExpression} Pointer;
		@Override public ParserRule getRule() { return rule; }
		
		//VariableCall | Constant | FunctionCall | BracketExpression | {PrimaryExpression} Pointer
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//VariableCall
		public RuleCall getVariableCallParserRuleCall_0() { return cVariableCallParserRuleCall_0; }
		
		//Constant
		public RuleCall getConstantParserRuleCall_1() { return cConstantParserRuleCall_1; }
		
		//FunctionCall
		public RuleCall getFunctionCallParserRuleCall_2() { return cFunctionCallParserRuleCall_2; }
		
		//BracketExpression
		public RuleCall getBracketExpressionParserRuleCall_3() { return cBracketExpressionParserRuleCall_3; }
		
		//{PrimaryExpression} Pointer
		public Group getGroup_4() { return cGroup_4; }
		
		//{PrimaryExpression}
		public Action getPrimaryExpressionAction_4_0() { return cPrimaryExpressionAction_4_0; }
		
		//Pointer
		public RuleCall getPointerParserRuleCall_4_1() { return cPointerParserRuleCall_4_1; }
	}
	public class BracketExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JsonDsl.BracketExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSubAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSubExpressionParserRuleCall_1_0 = (RuleCall)cSubAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//BracketExpression:
		//	'(' sub=Expression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' sub=Expression ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//sub=Expression
		public Assignment getSubAssignment_1() { return cSubAssignment_1; }
		
		//Expression
		public RuleCall getSubExpressionParserRuleCall_1_0() { return cSubExpressionParserRuleCall_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class PointerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JsonDsl.Pointer");
		private final Keyword cQuestionMarkKeyword = (Keyword)rule.eContents().get(1);
		
		//Pointer:
		//	'?';
		@Override public ParserRule getRule() { return rule; }
		
		//'?'
		public Keyword getQuestionMarkKeyword() { return cQuestionMarkKeyword; }
	}
	public class VariableCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JsonDsl.VariableCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cCallerAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCallerAuxiliarCallerParserRuleCall_1_0 = (RuleCall)cCallerAssignment_1.eContents().get(0);
		
		//VariableCall:
		//	name=ID caller+=AuxiliarCaller*;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID caller+=AuxiliarCaller*
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//caller+=AuxiliarCaller*
		public Assignment getCallerAssignment_1() { return cCallerAssignment_1; }
		
		//AuxiliarCaller
		public RuleCall getCallerAuxiliarCallerParserRuleCall_1_0() { return cCallerAuxiliarCallerParserRuleCall_1_0; }
	}
	public class AuxiliarCallerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JsonDsl.AuxiliarCaller");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFieldCallerParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cArrayCallerParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AuxiliarCaller:
		//	FieldCaller | ArrayCaller;
		@Override public ParserRule getRule() { return rule; }
		
		//FieldCaller | ArrayCaller
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FieldCaller
		public RuleCall getFieldCallerParserRuleCall_0() { return cFieldCallerParserRuleCall_0; }
		
		//ArrayCaller
		public RuleCall getArrayCallerParserRuleCall_1() { return cArrayCallerParserRuleCall_1; }
	}
	public class FieldCallerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JsonDsl.FieldCaller");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTildeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cKeyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cKeySTRINGTerminalRuleCall_1_0 = (RuleCall)cKeyAssignment_1.eContents().get(0);
		
		//FieldCaller:
		//	'~' key=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'~' key=STRING
		public Group getGroup() { return cGroup; }
		
		//'~'
		public Keyword getTildeKeyword_0() { return cTildeKeyword_0; }
		
		//key=STRING
		public Assignment getKeyAssignment_1() { return cKeyAssignment_1; }
		
		//STRING
		public RuleCall getKeySTRINGTerminalRuleCall_1_0() { return cKeySTRINGTerminalRuleCall_1_0; }
	}
	public class ArrayCallerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JsonDsl.ArrayCaller");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIndexAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIndexINTTerminalRuleCall_1_0 = (RuleCall)cIndexAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cIndexAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cIndexINTTerminalRuleCall_2_1_0 = (RuleCall)cIndexAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ArrayCaller:
		//	'[' index+=INT (',' index+=INT)* ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'[' index+=INT (',' index+=INT)* ']'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//index+=INT
		public Assignment getIndexAssignment_1() { return cIndexAssignment_1; }
		
		//INT
		public RuleCall getIndexINTTerminalRuleCall_1_0() { return cIndexINTTerminalRuleCall_1_0; }
		
		//(',' index+=INT)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//index+=INT
		public Assignment getIndexAssignment_2_1() { return cIndexAssignment_2_1; }
		
		//INT
		public RuleCall getIndexINTTerminalRuleCall_2_1_0() { return cIndexINTTerminalRuleCall_2_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class FunctionCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JsonDsl.FunctionCall");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIOFunctionsParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInfoFunctionsParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cManipFunctionsParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cArithFunctionsParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cAlterFunctionsParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//FunctionCall Expression:
		//	IOFunctions | InfoFunctions | ManipFunctions | ArithFunctions | AlterFunctions;
		@Override public ParserRule getRule() { return rule; }
		
		//IOFunctions | InfoFunctions | ManipFunctions | ArithFunctions | AlterFunctions
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IOFunctions
		public RuleCall getIOFunctionsParserRuleCall_0() { return cIOFunctionsParserRuleCall_0; }
		
		//InfoFunctions
		public RuleCall getInfoFunctionsParserRuleCall_1() { return cInfoFunctionsParserRuleCall_1; }
		
		//ManipFunctions
		public RuleCall getManipFunctionsParserRuleCall_2() { return cManipFunctionsParserRuleCall_2; }
		
		//ArithFunctions
		public RuleCall getArithFunctionsParserRuleCall_3() { return cArithFunctionsParserRuleCall_3; }
		
		//AlterFunctions
		public RuleCall getAlterFunctionsParserRuleCall_4() { return cAlterFunctionsParserRuleCall_4; }
	}
	public class IOFunctionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JsonDsl.IOFunctions");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLoadParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStoreParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cExportParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//IOFunctions:
		//	Load | Store | Export;
		@Override public ParserRule getRule() { return rule; }
		
		//Load | Store | Export
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Load
		public RuleCall getLoadParserRuleCall_0() { return cLoadParserRuleCall_0; }
		
		//Store
		public RuleCall getStoreParserRuleCall_1() { return cStoreParserRuleCall_1; }
		
		//Export
		public RuleCall getExportParserRuleCall_2() { return cExportParserRuleCall_2; }
	}
	public class InfoFunctionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JsonDsl.InfoFunctions");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDepthParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFieldInfoParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cContainsParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//InfoFunctions:
		//	Depth | FieldInfo | Contains;
		@Override public ParserRule getRule() { return rule; }
		
		//Depth | FieldInfo | Contains
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Depth
		public RuleCall getDepthParserRuleCall_0() { return cDepthParserRuleCall_0; }
		
		//FieldInfo
		public RuleCall getFieldInfoParserRuleCall_1() { return cFieldInfoParserRuleCall_1; }
		
		//Contains
		public RuleCall getContainsParserRuleCall_2() { return cContainsParserRuleCall_2; }
	}
	public class ManipFunctionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JsonDsl.ManipFunctions");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSelectParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConcatParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ManipFunctions:
		//	Select | Concat;
		@Override public ParserRule getRule() { return rule; }
		
		//Select | Concat
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Select
		public RuleCall getSelectParserRuleCall_0() { return cSelectParserRuleCall_0; }
		
		//Concat
		public RuleCall getConcatParserRuleCall_1() { return cConcatParserRuleCall_1; }
	}
	public class ArithFunctionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JsonDsl.ArithFunctions");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSumParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cProductParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMeanParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ArithFunctions:
		//	Sum | Product | Mean;
		@Override public ParserRule getRule() { return rule; }
		
		//Sum | Product | Mean
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Sum
		public RuleCall getSumParserRuleCall_0() { return cSumParserRuleCall_0; }
		
		//Product
		public RuleCall getProductParserRuleCall_1() { return cProductParserRuleCall_1; }
		
		//Mean
		public RuleCall getMeanParserRuleCall_2() { return cMeanParserRuleCall_2; }
	}
	public class AlterFunctionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JsonDsl.AlterFunctions");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAddParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInsertParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRenameParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cRemoveParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cDeleteParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//AlterFunctions:
		//	Add | Insert | Rename | Remove | Delete;
		@Override public ParserRule getRule() { return rule; }
		
		//Add | Insert | Rename | Remove | Delete
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Add
		public RuleCall getAddParserRuleCall_0() { return cAddParserRuleCall_0; }
		
		//Insert
		public RuleCall getInsertParserRuleCall_1() { return cInsertParserRuleCall_1; }
		
		//Rename
		public RuleCall getRenameParserRuleCall_2() { return cRenameParserRuleCall_2; }
		
		//Remove
		public RuleCall getRemoveParserRuleCall_3() { return cRemoveParserRuleCall_3; }
		
		//Delete
		public RuleCall getDeleteParserRuleCall_4() { return cDeleteParserRuleCall_4; }
	}
	public class LoadElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JsonDsl.Load");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLOADKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFileNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFileNameExpressionParserRuleCall_2_0 = (RuleCall)cFileNameAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//// IO FUNCTIONS
		//Load:
		//	'LOAD' '(' fileName=Expression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'LOAD' '(' fileName=Expression ')'
		public Group getGroup() { return cGroup; }
		
		//'LOAD'
		public Keyword getLOADKeyword_0() { return cLOADKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//fileName=Expression
		public Assignment getFileNameAssignment_2() { return cFileNameAssignment_2; }
		
		//Expression
		public RuleCall getFileNameExpressionParserRuleCall_2_0() { return cFileNameExpressionParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class StoreElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JsonDsl.Store");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSTOREKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cINKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cFileNameAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cFileNameExpressionParserRuleCall_6_0 = (RuleCall)cFileNameAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Store:
		//	'STORE' '(' expression=Expression ')' 'IN' '(' fileName=Expression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'STORE' '(' expression=Expression ')' 'IN' '(' fileName=Expression ')'
		public Group getGroup() { return cGroup; }
		
		//'STORE'
		public Keyword getSTOREKeyword_0() { return cSTOREKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//'IN'
		public Keyword getINKeyword_4() { return cINKeyword_4; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5() { return cLeftParenthesisKeyword_5; }
		
		//fileName=Expression
		public Assignment getFileNameAssignment_6() { return cFileNameAssignment_6; }
		
		//Expression
		public RuleCall getFileNameExpressionParserRuleCall_6_0() { return cFileNameExpressionParserRuleCall_6_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}
	public class ExportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JsonDsl.Export");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEXPORT_CSVKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cINKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cFileNameAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cFileNameExpressionParserRuleCall_6_0 = (RuleCall)cFileNameAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Export:
		//	'EXPORT_CSV' '(' expression=Expression ')' 'IN' '(' fileName=Expression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'EXPORT_CSV' '(' expression=Expression ')' 'IN' '(' fileName=Expression ')'
		public Group getGroup() { return cGroup; }
		
		//'EXPORT_CSV'
		public Keyword getEXPORT_CSVKeyword_0() { return cEXPORT_CSVKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//'IN'
		public Keyword getINKeyword_4() { return cINKeyword_4; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5() { return cLeftParenthesisKeyword_5; }
		
		//fileName=Expression
		public Assignment getFileNameAssignment_6() { return cFileNameAssignment_6; }
		
		//Expression
		public RuleCall getFileNameExpressionParserRuleCall_6_0() { return cFileNameExpressionParserRuleCall_6_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}
	public class ProcCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JsonDsl.ProcCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPRINTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ProcCall:
		//	'PRINT' '(' expression=Expression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'PRINT' '(' expression=Expression ')'
		public Group getGroup() { return cGroup; }
		
		//'PRINT'
		public Keyword getPRINTKeyword_0() { return cPRINTKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class DepthElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JsonDsl.Depth");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGET_DEPTHKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//// INFO FUNCTIONS
		//Depth:
		//	'GET_DEPTH' '(' expression=Expression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'GET_DEPTH' '(' expression=Expression ')'
		public Group getGroup() { return cGroup; }
		
		//'GET_DEPTH'
		public Keyword getGET_DEPTHKeyword_0() { return cGET_DEPTHKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class FieldInfoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JsonDsl.FieldInfo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGET_INFOSKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//FieldInfo:
		//	'GET_INFOS' '(' expression=Expression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'GET_INFOS' '(' expression=Expression ')'
		public Group getGroup() { return cGroup; }
		
		//'GET_INFOS'
		public Keyword getGET_INFOSKeyword_0() { return cGET_INFOSKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ContainsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JsonDsl.Contains");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cISKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cKeysAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cKeysExpressionParserRuleCall_2_0 = (RuleCall)cKeysAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cKeysAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cKeysExpressionParserRuleCall_3_1_0 = (RuleCall)cKeysAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cINKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cRightAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cRightExpressionParserRuleCall_7_0 = (RuleCall)cRightAssignment_7.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Contains:
		//	'IS' '(' keys+=Expression (',' keys+=Expression)* ')' 'IN' '(' right=Expression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'IS' '(' keys+=Expression (',' keys+=Expression)* ')' 'IN' '(' right=Expression ')'
		public Group getGroup() { return cGroup; }
		
		//'IS'
		public Keyword getISKeyword_0() { return cISKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//keys+=Expression
		public Assignment getKeysAssignment_2() { return cKeysAssignment_2; }
		
		//Expression
		public RuleCall getKeysExpressionParserRuleCall_2_0() { return cKeysExpressionParserRuleCall_2_0; }
		
		//(',' keys+=Expression)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//keys+=Expression
		public Assignment getKeysAssignment_3_1() { return cKeysAssignment_3_1; }
		
		//Expression
		public RuleCall getKeysExpressionParserRuleCall_3_1_0() { return cKeysExpressionParserRuleCall_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//'IN'
		public Keyword getINKeyword_5() { return cINKeyword_5; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_6() { return cLeftParenthesisKeyword_6; }
		
		//right=Expression
		public Assignment getRightAssignment_7() { return cRightAssignment_7; }
		
		//Expression
		public RuleCall getRightExpressionParserRuleCall_7_0() { return cRightExpressionParserRuleCall_7_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }
	}
	public class SelectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JsonDsl.Select");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSELECTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cAsteriskKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Assignment cFieldsAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cFieldsExpressionParserRuleCall_2_1_0_0 = (RuleCall)cFieldsAssignment_2_1_0.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cGroup_2_1.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_1_0 = (Keyword)cGroup_2_1_1.eContents().get(0);
		private final Assignment cFieldsAssignment_2_1_1_1 = (Assignment)cGroup_2_1_1.eContents().get(1);
		private final RuleCall cFieldsExpressionParserRuleCall_2_1_1_1_0 = (RuleCall)cFieldsAssignment_2_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cFROMKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cFromExpressionAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cFromExpressionExpressionParserRuleCall_6_0 = (RuleCall)cFromExpressionAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cWHEREKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Assignment cWhereExpressionAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final RuleCall cWhereExpressionExpressionParserRuleCall_8_2_0 = (RuleCall)cWhereExpressionAssignment_8_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8_3 = (Keyword)cGroup_8.eContents().get(3);
		
		//// MANIP
		//Select:
		//	'SELECT' '(' ('*' | (fields+=Expression (',' fields+=Expression)*)?) ')' 'FROM' '(' fromExpression=Expression ')' (=>
		//	'WHERE' '(' whereExpression=Expression ')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'SELECT' '(' ('*' | (fields+=Expression (',' fields+=Expression)*)?) ')' 'FROM' '(' fromExpression=Expression ')' (=>
		//'WHERE' '(' whereExpression=Expression ')')?
		public Group getGroup() { return cGroup; }
		
		//'SELECT'
		public Keyword getSELECTKeyword_0() { return cSELECTKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//('*' | (fields+=Expression (',' fields+=Expression)*)?)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//'*'
		public Keyword getAsteriskKeyword_2_0() { return cAsteriskKeyword_2_0; }
		
		//(fields+=Expression (',' fields+=Expression)*)?
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//fields+=Expression
		public Assignment getFieldsAssignment_2_1_0() { return cFieldsAssignment_2_1_0; }
		
		//Expression
		public RuleCall getFieldsExpressionParserRuleCall_2_1_0_0() { return cFieldsExpressionParserRuleCall_2_1_0_0; }
		
		//(',' fields+=Expression)*
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_1_0() { return cCommaKeyword_2_1_1_0; }
		
		//fields+=Expression
		public Assignment getFieldsAssignment_2_1_1_1() { return cFieldsAssignment_2_1_1_1; }
		
		//Expression
		public RuleCall getFieldsExpressionParserRuleCall_2_1_1_1_0() { return cFieldsExpressionParserRuleCall_2_1_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//'FROM'
		public Keyword getFROMKeyword_4() { return cFROMKeyword_4; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5() { return cLeftParenthesisKeyword_5; }
		
		//fromExpression=Expression
		public Assignment getFromExpressionAssignment_6() { return cFromExpressionAssignment_6; }
		
		//Expression
		public RuleCall getFromExpressionExpressionParserRuleCall_6_0() { return cFromExpressionExpressionParserRuleCall_6_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
		
		//(=> 'WHERE' '(' whereExpression=Expression ')')?
		public Group getGroup_8() { return cGroup_8; }
		
		//=> 'WHERE'
		public Keyword getWHEREKeyword_8_0() { return cWHEREKeyword_8_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_8_1() { return cLeftParenthesisKeyword_8_1; }
		
		//whereExpression=Expression
		public Assignment getWhereExpressionAssignment_8_2() { return cWhereExpressionAssignment_8_2; }
		
		//Expression
		public RuleCall getWhereExpressionExpressionParserRuleCall_8_2_0() { return cWhereExpressionExpressionParserRuleCall_8_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_8_3() { return cRightParenthesisKeyword_8_3; }
	}
	public class ConcatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JsonDsl.Concat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCONCATKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionsExpressionParserRuleCall_2_0 = (RuleCall)cExpressionsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cExpressionsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cExpressionsExpressionParserRuleCall_3_1_0 = (RuleCall)cExpressionsAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Concat:
		//	'CONCAT' '(' expressions+=Expression (',' expressions+=Expression) ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'CONCAT' '(' expressions+=Expression (',' expressions+=Expression) ')'
		public Group getGroup() { return cGroup; }
		
		//'CONCAT'
		public Keyword getCONCATKeyword_0() { return cCONCATKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//expressions+=Expression
		public Assignment getExpressionsAssignment_2() { return cExpressionsAssignment_2; }
		
		//Expression
		public RuleCall getExpressionsExpressionParserRuleCall_2_0() { return cExpressionsExpressionParserRuleCall_2_0; }
		
		//(',' expressions+=Expression)
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//expressions+=Expression
		public Assignment getExpressionsAssignment_3_1() { return cExpressionsAssignment_3_1; }
		
		//Expression
		public RuleCall getExpressionsExpressionParserRuleCall_3_1_0() { return cExpressionsExpressionParserRuleCall_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class SumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JsonDsl.Sum");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSUMKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cONKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cFieldsAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cFieldsExpressionParserRuleCall_4_2_0 = (RuleCall)cFieldsAssignment_4_2.eContents().get(0);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cCommaKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cFieldsAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final RuleCall cFieldsExpressionParserRuleCall_4_3_1_0 = (RuleCall)cFieldsAssignment_4_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cWHEREKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cWhereExpressionAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cWhereExpressionExpressionParserRuleCall_5_2_0 = (RuleCall)cWhereExpressionAssignment_5_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		
		//Sum:
		//	'SUM' '(' expression=Expression ')' ('ON' '(' fields+=Expression (',' fields+=Expression)* ')')? (=> 'WHERE' '('
		//	whereExpression=Expression ')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'SUM' '(' expression=Expression ')' ('ON' '(' fields+=Expression (',' fields+=Expression)* ')')? (=> 'WHERE' '('
		//whereExpression=Expression ')')?
		public Group getGroup() { return cGroup; }
		
		//'SUM'
		public Keyword getSUMKeyword_0() { return cSUMKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//('ON' '(' fields+=Expression (',' fields+=Expression)* ')')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'ON'
		public Keyword getONKeyword_4_0() { return cONKeyword_4_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4_1() { return cLeftParenthesisKeyword_4_1; }
		
		//fields+=Expression
		public Assignment getFieldsAssignment_4_2() { return cFieldsAssignment_4_2; }
		
		//Expression
		public RuleCall getFieldsExpressionParserRuleCall_4_2_0() { return cFieldsExpressionParserRuleCall_4_2_0; }
		
		//(',' fields+=Expression)*
		public Group getGroup_4_3() { return cGroup_4_3; }
		
		//','
		public Keyword getCommaKeyword_4_3_0() { return cCommaKeyword_4_3_0; }
		
		//fields+=Expression
		public Assignment getFieldsAssignment_4_3_1() { return cFieldsAssignment_4_3_1; }
		
		//Expression
		public RuleCall getFieldsExpressionParserRuleCall_4_3_1_0() { return cFieldsExpressionParserRuleCall_4_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_4() { return cRightParenthesisKeyword_4_4; }
		
		//(=> 'WHERE' '(' whereExpression=Expression ')')?
		public Group getGroup_5() { return cGroup_5; }
		
		//=> 'WHERE'
		public Keyword getWHEREKeyword_5_0() { return cWHEREKeyword_5_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5_1() { return cLeftParenthesisKeyword_5_1; }
		
		//whereExpression=Expression
		public Assignment getWhereExpressionAssignment_5_2() { return cWhereExpressionAssignment_5_2; }
		
		//Expression
		public RuleCall getWhereExpressionExpressionParserRuleCall_5_2_0() { return cWhereExpressionExpressionParserRuleCall_5_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5_3() { return cRightParenthesisKeyword_5_3; }
	}
	public class ProductElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JsonDsl.Product");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPRODUCTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cONKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cFieldsAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cFieldsExpressionParserRuleCall_4_2_0 = (RuleCall)cFieldsAssignment_4_2.eContents().get(0);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cCommaKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cFieldsAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final RuleCall cFieldsExpressionParserRuleCall_4_3_1_0 = (RuleCall)cFieldsAssignment_4_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cWHEREKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cWhereExpressionAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cWhereExpressionExpressionParserRuleCall_5_2_0 = (RuleCall)cWhereExpressionAssignment_5_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		
		//Product:
		//	'PRODUCT' '(' expression=Expression ')' ('ON' '(' fields+=Expression (',' fields+=Expression)* ')')? (=> 'WHERE' '('
		//	whereExpression=Expression ')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'PRODUCT' '(' expression=Expression ')' ('ON' '(' fields+=Expression (',' fields+=Expression)* ')')? (=> 'WHERE' '('
		//whereExpression=Expression ')')?
		public Group getGroup() { return cGroup; }
		
		//'PRODUCT'
		public Keyword getPRODUCTKeyword_0() { return cPRODUCTKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//('ON' '(' fields+=Expression (',' fields+=Expression)* ')')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'ON'
		public Keyword getONKeyword_4_0() { return cONKeyword_4_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4_1() { return cLeftParenthesisKeyword_4_1; }
		
		//fields+=Expression
		public Assignment getFieldsAssignment_4_2() { return cFieldsAssignment_4_2; }
		
		//Expression
		public RuleCall getFieldsExpressionParserRuleCall_4_2_0() { return cFieldsExpressionParserRuleCall_4_2_0; }
		
		//(',' fields+=Expression)*
		public Group getGroup_4_3() { return cGroup_4_3; }
		
		//','
		public Keyword getCommaKeyword_4_3_0() { return cCommaKeyword_4_3_0; }
		
		//fields+=Expression
		public Assignment getFieldsAssignment_4_3_1() { return cFieldsAssignment_4_3_1; }
		
		//Expression
		public RuleCall getFieldsExpressionParserRuleCall_4_3_1_0() { return cFieldsExpressionParserRuleCall_4_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_4() { return cRightParenthesisKeyword_4_4; }
		
		//(=> 'WHERE' '(' whereExpression=Expression ')')?
		public Group getGroup_5() { return cGroup_5; }
		
		//=> 'WHERE'
		public Keyword getWHEREKeyword_5_0() { return cWHEREKeyword_5_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5_1() { return cLeftParenthesisKeyword_5_1; }
		
		//whereExpression=Expression
		public Assignment getWhereExpressionAssignment_5_2() { return cWhereExpressionAssignment_5_2; }
		
		//Expression
		public RuleCall getWhereExpressionExpressionParserRuleCall_5_2_0() { return cWhereExpressionExpressionParserRuleCall_5_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5_3() { return cRightParenthesisKeyword_5_3; }
	}
	public class MeanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JsonDsl.Mean");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMEANKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cONKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cFieldsAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cFieldsExpressionParserRuleCall_4_2_0 = (RuleCall)cFieldsAssignment_4_2.eContents().get(0);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cCommaKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cFieldsAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final RuleCall cFieldsExpressionParserRuleCall_4_3_1_0 = (RuleCall)cFieldsAssignment_4_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cWHEREKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cWhereExpressionAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cWhereExpressionExpressionParserRuleCall_5_2_0 = (RuleCall)cWhereExpressionAssignment_5_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		
		//Mean:
		//	'MEAN' '(' expression=Expression ')' ('ON' '(' fields+=Expression (',' fields+=Expression)* ')')? (=> 'WHERE' '('
		//	whereExpression=Expression ')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'MEAN' '(' expression=Expression ')' ('ON' '(' fields+=Expression (',' fields+=Expression)* ')')? (=> 'WHERE' '('
		//whereExpression=Expression ')')?
		public Group getGroup() { return cGroup; }
		
		//'MEAN'
		public Keyword getMEANKeyword_0() { return cMEANKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//('ON' '(' fields+=Expression (',' fields+=Expression)* ')')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'ON'
		public Keyword getONKeyword_4_0() { return cONKeyword_4_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4_1() { return cLeftParenthesisKeyword_4_1; }
		
		//fields+=Expression
		public Assignment getFieldsAssignment_4_2() { return cFieldsAssignment_4_2; }
		
		//Expression
		public RuleCall getFieldsExpressionParserRuleCall_4_2_0() { return cFieldsExpressionParserRuleCall_4_2_0; }
		
		//(',' fields+=Expression)*
		public Group getGroup_4_3() { return cGroup_4_3; }
		
		//','
		public Keyword getCommaKeyword_4_3_0() { return cCommaKeyword_4_3_0; }
		
		//fields+=Expression
		public Assignment getFieldsAssignment_4_3_1() { return cFieldsAssignment_4_3_1; }
		
		//Expression
		public RuleCall getFieldsExpressionParserRuleCall_4_3_1_0() { return cFieldsExpressionParserRuleCall_4_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_4() { return cRightParenthesisKeyword_4_4; }
		
		//(=> 'WHERE' '(' whereExpression=Expression ')')?
		public Group getGroup_5() { return cGroup_5; }
		
		//=> 'WHERE'
		public Keyword getWHEREKeyword_5_0() { return cWHEREKeyword_5_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5_1() { return cLeftParenthesisKeyword_5_1; }
		
		//whereExpression=Expression
		public Assignment getWhereExpressionAssignment_5_2() { return cWhereExpressionAssignment_5_2; }
		
		//Expression
		public RuleCall getWhereExpressionExpressionParserRuleCall_5_2_0() { return cWhereExpressionExpressionParserRuleCall_5_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5_3() { return cRightParenthesisKeyword_5_3; }
	}
	public class AddElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JsonDsl.Add");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cADDKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cINKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cVariableAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cVariableExpressionParserRuleCall_6_0 = (RuleCall)cVariableAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cONKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Assignment cFieldsAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final RuleCall cFieldsExpressionParserRuleCall_8_2_0 = (RuleCall)cFieldsAssignment_8_2.eContents().get(0);
		private final Group cGroup_8_3 = (Group)cGroup_8.eContents().get(3);
		private final Keyword cCommaKeyword_8_3_0 = (Keyword)cGroup_8_3.eContents().get(0);
		private final Assignment cFieldsAssignment_8_3_1 = (Assignment)cGroup_8_3.eContents().get(1);
		private final RuleCall cFieldsExpressionParserRuleCall_8_3_1_0 = (RuleCall)cFieldsAssignment_8_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8_4 = (Keyword)cGroup_8.eContents().get(4);
		
		//Add:
		//	'ADD' '(' expression=Expression ')' 'IN' '(' variable=Expression ')' ('ON' '(' fields+=Expression (','
		//	fields+=Expression)* ')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'ADD' '(' expression=Expression ')' 'IN' '(' variable=Expression ')' ('ON' '(' fields+=Expression (','
		//fields+=Expression)* ')')?
		public Group getGroup() { return cGroup; }
		
		//'ADD'
		public Keyword getADDKeyword_0() { return cADDKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//'IN'
		public Keyword getINKeyword_4() { return cINKeyword_4; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5() { return cLeftParenthesisKeyword_5; }
		
		//variable=Expression
		public Assignment getVariableAssignment_6() { return cVariableAssignment_6; }
		
		//Expression
		public RuleCall getVariableExpressionParserRuleCall_6_0() { return cVariableExpressionParserRuleCall_6_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
		
		//('ON' '(' fields+=Expression (',' fields+=Expression)* ')')?
		public Group getGroup_8() { return cGroup_8; }
		
		//'ON'
		public Keyword getONKeyword_8_0() { return cONKeyword_8_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_8_1() { return cLeftParenthesisKeyword_8_1; }
		
		//fields+=Expression
		public Assignment getFieldsAssignment_8_2() { return cFieldsAssignment_8_2; }
		
		//Expression
		public RuleCall getFieldsExpressionParserRuleCall_8_2_0() { return cFieldsExpressionParserRuleCall_8_2_0; }
		
		//(',' fields+=Expression)*
		public Group getGroup_8_3() { return cGroup_8_3; }
		
		//','
		public Keyword getCommaKeyword_8_3_0() { return cCommaKeyword_8_3_0; }
		
		//fields+=Expression
		public Assignment getFieldsAssignment_8_3_1() { return cFieldsAssignment_8_3_1; }
		
		//Expression
		public RuleCall getFieldsExpressionParserRuleCall_8_3_1_0() { return cFieldsExpressionParserRuleCall_8_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_8_4() { return cRightParenthesisKeyword_8_4; }
	}
	public class InsertElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JsonDsl.Insert");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cINSERTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueExpressionParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cINKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cVariableAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cVariableExpressionParserRuleCall_6_0 = (RuleCall)cVariableAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cLeftParenthesisKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Keyword cWHEREKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Assignment cWhereExpressionAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final RuleCall cWhereExpressionExpressionParserRuleCall_8_2_0 = (RuleCall)cWhereExpressionAssignment_8_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8_3 = (Keyword)cGroup_8.eContents().get(3);
		
		//Insert:
		//	'INSERT' '(' value=Expression ')' 'IN' '(' variable=Expression ')' ('(' 'WHERE' whereExpression=Expression ')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'INSERT' '(' value=Expression ')' 'IN' '(' variable=Expression ')' ('(' 'WHERE' whereExpression=Expression ')')?
		public Group getGroup() { return cGroup; }
		
		//'INSERT'
		public Keyword getINSERTKeyword_0() { return cINSERTKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//value=Expression
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//Expression
		public RuleCall getValueExpressionParserRuleCall_2_0() { return cValueExpressionParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//'IN'
		public Keyword getINKeyword_4() { return cINKeyword_4; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5() { return cLeftParenthesisKeyword_5; }
		
		//variable=Expression
		public Assignment getVariableAssignment_6() { return cVariableAssignment_6; }
		
		//Expression
		public RuleCall getVariableExpressionParserRuleCall_6_0() { return cVariableExpressionParserRuleCall_6_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
		
		//('(' 'WHERE' whereExpression=Expression ')')?
		public Group getGroup_8() { return cGroup_8; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_8_0() { return cLeftParenthesisKeyword_8_0; }
		
		//'WHERE'
		public Keyword getWHEREKeyword_8_1() { return cWHEREKeyword_8_1; }
		
		//whereExpression=Expression
		public Assignment getWhereExpressionAssignment_8_2() { return cWhereExpressionAssignment_8_2; }
		
		//Expression
		public RuleCall getWhereExpressionExpressionParserRuleCall_8_2_0() { return cWhereExpressionExpressionParserRuleCall_8_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_8_3() { return cRightParenthesisKeyword_8_3; }
	}
	public class RenameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JsonDsl.Rename");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRENAMEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCallAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCallVariableCallParserRuleCall_2_0 = (RuleCall)cCallAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cONKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cFieldsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cFieldsExpressionParserRuleCall_6_0 = (RuleCall)cFieldsAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cCommaKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cFieldsAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cFieldsExpressionParserRuleCall_7_1_0 = (RuleCall)cFieldsAssignment_7_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cTOKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cLeftParenthesisKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cNfieldsAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cNfieldsExpressionParserRuleCall_11_0 = (RuleCall)cNfieldsAssignment_11.eContents().get(0);
		private final Group cGroup_12 = (Group)cGroup.eContents().get(12);
		private final Keyword cCommaKeyword_12_0 = (Keyword)cGroup_12.eContents().get(0);
		private final Assignment cNfieldsAssignment_12_1 = (Assignment)cGroup_12.eContents().get(1);
		private final RuleCall cNfieldsExpressionParserRuleCall_12_1_0 = (RuleCall)cNfieldsAssignment_12_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_13 = (Keyword)cGroup.eContents().get(13);
		
		//Rename:
		//	'RENAME' '(' call=VariableCall ')' 'ON' '(' fields+=Expression (',' fields+=Expression)* ')' 'TO' '('
		//	nfields+=Expression (',' nfields+=Expression)* ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'RENAME' '(' call=VariableCall ')' 'ON' '(' fields+=Expression (',' fields+=Expression)* ')' 'TO' '('
		//nfields+=Expression (',' nfields+=Expression)* ')'
		public Group getGroup() { return cGroup; }
		
		//'RENAME'
		public Keyword getRENAMEKeyword_0() { return cRENAMEKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//call=VariableCall
		public Assignment getCallAssignment_2() { return cCallAssignment_2; }
		
		//VariableCall
		public RuleCall getCallVariableCallParserRuleCall_2_0() { return cCallVariableCallParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//'ON'
		public Keyword getONKeyword_4() { return cONKeyword_4; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5() { return cLeftParenthesisKeyword_5; }
		
		//fields+=Expression
		public Assignment getFieldsAssignment_6() { return cFieldsAssignment_6; }
		
		//Expression
		public RuleCall getFieldsExpressionParserRuleCall_6_0() { return cFieldsExpressionParserRuleCall_6_0; }
		
		//(',' fields+=Expression)*
		public Group getGroup_7() { return cGroup_7; }
		
		//','
		public Keyword getCommaKeyword_7_0() { return cCommaKeyword_7_0; }
		
		//fields+=Expression
		public Assignment getFieldsAssignment_7_1() { return cFieldsAssignment_7_1; }
		
		//Expression
		public RuleCall getFieldsExpressionParserRuleCall_7_1_0() { return cFieldsExpressionParserRuleCall_7_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }
		
		//'TO'
		public Keyword getTOKeyword_9() { return cTOKeyword_9; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_10() { return cLeftParenthesisKeyword_10; }
		
		//nfields+=Expression
		public Assignment getNfieldsAssignment_11() { return cNfieldsAssignment_11; }
		
		//Expression
		public RuleCall getNfieldsExpressionParserRuleCall_11_0() { return cNfieldsExpressionParserRuleCall_11_0; }
		
		//(',' nfields+=Expression)*
		public Group getGroup_12() { return cGroup_12; }
		
		//','
		public Keyword getCommaKeyword_12_0() { return cCommaKeyword_12_0; }
		
		//nfields+=Expression
		public Assignment getNfieldsAssignment_12_1() { return cNfieldsAssignment_12_1; }
		
		//Expression
		public RuleCall getNfieldsExpressionParserRuleCall_12_1_0() { return cNfieldsExpressionParserRuleCall_12_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_13() { return cRightParenthesisKeyword_13; }
	}
	public class DeleteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JsonDsl.Delete");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDELETEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cAsteriskKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Assignment cFieldsAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cFieldsExpressionParserRuleCall_2_1_0_0 = (RuleCall)cFieldsAssignment_2_1_0.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cGroup_2_1.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_1_0 = (Keyword)cGroup_2_1_1.eContents().get(0);
		private final Assignment cFieldsAssignment_2_1_1_1 = (Assignment)cGroup_2_1_1.eContents().get(1);
		private final RuleCall cFieldsExpressionParserRuleCall_2_1_1_1_0 = (RuleCall)cFieldsAssignment_2_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cFROMKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cFromExpressionAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cFromExpressionExpressionParserRuleCall_6_0 = (RuleCall)cFromExpressionAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cWHEREKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Assignment cWhereExpressionAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final RuleCall cWhereExpressionExpressionParserRuleCall_8_2_0 = (RuleCall)cWhereExpressionAssignment_8_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8_3 = (Keyword)cGroup_8.eContents().get(3);
		
		//Delete:
		//	'DELETE' '(' ('*' | (fields+=Expression (',' fields+=Expression)*)?) ')' 'FROM' '(' fromExpression=Expression ')' (=>
		//	'WHERE' '(' whereExpression=Expression ')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'DELETE' '(' ('*' | (fields+=Expression (',' fields+=Expression)*)?) ')' 'FROM' '(' fromExpression=Expression ')' (=>
		//'WHERE' '(' whereExpression=Expression ')')?
		public Group getGroup() { return cGroup; }
		
		//'DELETE'
		public Keyword getDELETEKeyword_0() { return cDELETEKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//('*' | (fields+=Expression (',' fields+=Expression)*)?)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//'*'
		public Keyword getAsteriskKeyword_2_0() { return cAsteriskKeyword_2_0; }
		
		//(fields+=Expression (',' fields+=Expression)*)?
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//fields+=Expression
		public Assignment getFieldsAssignment_2_1_0() { return cFieldsAssignment_2_1_0; }
		
		//Expression
		public RuleCall getFieldsExpressionParserRuleCall_2_1_0_0() { return cFieldsExpressionParserRuleCall_2_1_0_0; }
		
		//(',' fields+=Expression)*
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_1_0() { return cCommaKeyword_2_1_1_0; }
		
		//fields+=Expression
		public Assignment getFieldsAssignment_2_1_1_1() { return cFieldsAssignment_2_1_1_1; }
		
		//Expression
		public RuleCall getFieldsExpressionParserRuleCall_2_1_1_1_0() { return cFieldsExpressionParserRuleCall_2_1_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//'FROM'
		public Keyword getFROMKeyword_4() { return cFROMKeyword_4; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5() { return cLeftParenthesisKeyword_5; }
		
		//fromExpression=Expression
		public Assignment getFromExpressionAssignment_6() { return cFromExpressionAssignment_6; }
		
		//Expression
		public RuleCall getFromExpressionExpressionParserRuleCall_6_0() { return cFromExpressionExpressionParserRuleCall_6_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
		
		//(=> 'WHERE' '(' whereExpression=Expression ')')?
		public Group getGroup_8() { return cGroup_8; }
		
		//=> 'WHERE'
		public Keyword getWHEREKeyword_8_0() { return cWHEREKeyword_8_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_8_1() { return cLeftParenthesisKeyword_8_1; }
		
		//whereExpression=Expression
		public Assignment getWhereExpressionAssignment_8_2() { return cWhereExpressionAssignment_8_2; }
		
		//Expression
		public RuleCall getWhereExpressionExpressionParserRuleCall_8_2_0() { return cWhereExpressionExpressionParserRuleCall_8_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_8_3() { return cRightParenthesisKeyword_8_3; }
	}
	public class RemoveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JsonDsl.Remove");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cREMOVEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueExpressionParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cINKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cVariableAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cVariableExpressionParserRuleCall_6_0 = (RuleCall)cVariableAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cLeftParenthesisKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Keyword cWHEREKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Assignment cWhereExpressionAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final RuleCall cWhereExpressionExpressionParserRuleCall_8_2_0 = (RuleCall)cWhereExpressionAssignment_8_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8_3 = (Keyword)cGroup_8.eContents().get(3);
		
		//Remove:
		//	'REMOVE' '(' value=Expression ')' 'IN' '(' variable=Expression ')' ('(' 'WHERE' whereExpression=Expression ')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'REMOVE' '(' value=Expression ')' 'IN' '(' variable=Expression ')' ('(' 'WHERE' whereExpression=Expression ')')?
		public Group getGroup() { return cGroup; }
		
		//'REMOVE'
		public Keyword getREMOVEKeyword_0() { return cREMOVEKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//value=Expression
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//Expression
		public RuleCall getValueExpressionParserRuleCall_2_0() { return cValueExpressionParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//'IN'
		public Keyword getINKeyword_4() { return cINKeyword_4; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5() { return cLeftParenthesisKeyword_5; }
		
		//variable=Expression
		public Assignment getVariableAssignment_6() { return cVariableAssignment_6; }
		
		//Expression
		public RuleCall getVariableExpressionParserRuleCall_6_0() { return cVariableExpressionParserRuleCall_6_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
		
		//('(' 'WHERE' whereExpression=Expression ')')?
		public Group getGroup_8() { return cGroup_8; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_8_0() { return cLeftParenthesisKeyword_8_0; }
		
		//'WHERE'
		public Keyword getWHEREKeyword_8_1() { return cWHEREKeyword_8_1; }
		
		//whereExpression=Expression
		public Assignment getWhereExpressionAssignment_8_2() { return cWhereExpressionAssignment_8_2; }
		
		//Expression
		public RuleCall getWhereExpressionExpressionParserRuleCall_8_2_0() { return cWhereExpressionExpressionParserRuleCall_8_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_8_3() { return cRightParenthesisKeyword_8_3; }
	}
	public class ConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JsonDsl.Constant");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrimitiveParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cArrayParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cJSonObjectParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Constant:
		//	Primitive | Array | JSonObject;
		@Override public ParserRule getRule() { return rule; }
		
		//Primitive | Array | JSonObject
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Primitive
		public RuleCall getPrimitiveParserRuleCall_0() { return cPrimitiveParserRuleCall_0; }
		
		//Array
		public RuleCall getArrayParserRuleCall_1() { return cArrayParserRuleCall_1; }
		
		//JSonObject
		public RuleCall getJSonObjectParserRuleCall_2() { return cJSonObjectParserRuleCall_2; }
	}
	public class PrimitiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JsonDsl.Primitive");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cStrAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cStrSTRINGTerminalRuleCall_0_0 = (RuleCall)cStrAssignment_0.eContents().get(0);
		private final Assignment cNumAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cNumNUMBERParserRuleCall_1_0 = (RuleCall)cNumAssignment_1.eContents().get(0);
		private final Assignment cBoolAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cBoolBOOLTerminalRuleCall_2_0 = (RuleCall)cBoolAssignment_2.eContents().get(0);
		private final Assignment cNilAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cNilNULLTerminalRuleCall_3_0 = (RuleCall)cNilAssignment_3.eContents().get(0);
		
		//Primitive:
		//	str=STRING | num=NUMBER | bool=BOOL | nil=NULL;
		@Override public ParserRule getRule() { return rule; }
		
		//str=STRING | num=NUMBER | bool=BOOL | nil=NULL
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//str=STRING
		public Assignment getStrAssignment_0() { return cStrAssignment_0; }
		
		//STRING
		public RuleCall getStrSTRINGTerminalRuleCall_0_0() { return cStrSTRINGTerminalRuleCall_0_0; }
		
		//num=NUMBER
		public Assignment getNumAssignment_1() { return cNumAssignment_1; }
		
		//NUMBER
		public RuleCall getNumNUMBERParserRuleCall_1_0() { return cNumNUMBERParserRuleCall_1_0; }
		
		//bool=BOOL
		public Assignment getBoolAssignment_2() { return cBoolAssignment_2; }
		
		//BOOL
		public RuleCall getBoolBOOLTerminalRuleCall_2_0() { return cBoolBOOLTerminalRuleCall_2_0; }
		
		//nil=NULL
		public Assignment getNilAssignment_3() { return cNilAssignment_3; }
		
		//NULL
		public RuleCall getNilNULLTerminalRuleCall_3_0() { return cNilNULLTerminalRuleCall_3_0; }
	}
	public class ArrayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JsonDsl.Array");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cArrayAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cValuesAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cValuesExpressionParserRuleCall_2_0_0 = (RuleCall)cValuesAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cValuesAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cValuesExpressionParserRuleCall_2_1_1_0 = (RuleCall)cValuesAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Array:
		//	{Array} '[' (values+=Expression (',' values+=Expression)*)? ']';
		@Override public ParserRule getRule() { return rule; }
		
		//{Array} '[' (values+=Expression (',' values+=Expression)*)? ']'
		public Group getGroup() { return cGroup; }
		
		//{Array}
		public Action getArrayAction_0() { return cArrayAction_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//(values+=Expression (',' values+=Expression)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//values+=Expression
		public Assignment getValuesAssignment_2_0() { return cValuesAssignment_2_0; }
		
		//Expression
		public RuleCall getValuesExpressionParserRuleCall_2_0_0() { return cValuesExpressionParserRuleCall_2_0_0; }
		
		//(',' values+=Expression)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//values+=Expression
		public Assignment getValuesAssignment_2_1_1() { return cValuesAssignment_2_1_1; }
		
		//Expression
		public RuleCall getValuesExpressionParserRuleCall_2_1_1_0() { return cValuesExpressionParserRuleCall_2_1_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class JSonObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JsonDsl.JSonObject");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cJSonObjectAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cFieldsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cFieldsFieldParserRuleCall_2_0_0 = (RuleCall)cFieldsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cFieldsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cFieldsFieldParserRuleCall_2_1_1_0 = (RuleCall)cFieldsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//JSonObject:
		//	{JSonObject} '{' (fields+=Field (',' fields+=Field)*)? '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{JSonObject} '{' (fields+=Field (',' fields+=Field)*)? '}'
		public Group getGroup() { return cGroup; }
		
		//{JSonObject}
		public Action getJSonObjectAction_0() { return cJSonObjectAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(fields+=Field (',' fields+=Field)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//fields+=Field
		public Assignment getFieldsAssignment_2_0() { return cFieldsAssignment_2_0; }
		
		//Field
		public RuleCall getFieldsFieldParserRuleCall_2_0_0() { return cFieldsFieldParserRuleCall_2_0_0; }
		
		//(',' fields+=Field)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//fields+=Field
		public Assignment getFieldsAssignment_2_1_1() { return cFieldsAssignment_2_1_1; }
		
		//Field
		public RuleCall getFieldsFieldParserRuleCall_2_1_1_0() { return cFieldsFieldParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class FieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JsonDsl.Field");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyExpressionParserRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueExpressionParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Field:
		//	key=Expression ':' value=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//key=Expression ':' value=Expression
		public Group getGroup() { return cGroup; }
		
		//key=Expression
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//Expression
		public RuleCall getKeyExpressionParserRuleCall_0_0() { return cKeyExpressionParserRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//value=Expression
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//Expression
		public RuleCall getValueExpressionParserRuleCall_2_0() { return cValueExpressionParserRuleCall_2_0; }
	}
	public class NUMBERElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JsonDsl.NUMBER");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDOUBLETerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//NUMBER:
		//	INT | DOUBLE;
		@Override public ParserRule getRule() { return rule; }
		
		//INT | DOUBLE
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//DOUBLE
		public RuleCall getDOUBLETerminalRuleCall_1() { return cDOUBLETerminalRuleCall_1; }
	}
	
	
	private final ModelElements pModel;
	private final SimpleStatementElements pSimpleStatement;
	private final AssignmentElements pAssignment;
	private final ExpressionElements pExpression;
	private final ExpressionLvl1Elements pExpressionLvl1;
	private final ExpressionLvl2Elements pExpressionLvl2;
	private final ExpressionLvl3Elements pExpressionLvl3;
	private final ExpressionLvl4Elements pExpressionLvl4;
	private final ExpressionLvl5Elements pExpressionLvl5;
	private final ExpressionLvl6Elements pExpressionLvl6;
	private final ExpressionLvl7Elements pExpressionLvl7;
	private final UnaryMinusExpressionElements pUnaryMinusExpression;
	private final UnaryPlusExpressionElements pUnaryPlusExpression;
	private final ExpressionLvl8Elements pExpressionLvl8;
	private final LogicalNegationExpressionElements pLogicalNegationExpression;
	private final PrimaryExpressionElements pPrimaryExpression;
	private final BracketExpressionElements pBracketExpression;
	private final PointerElements pPointer;
	private final VariableCallElements pVariableCall;
	private final AuxiliarCallerElements pAuxiliarCaller;
	private final FieldCallerElements pFieldCaller;
	private final ArrayCallerElements pArrayCaller;
	private final FunctionCallElements pFunctionCall;
	private final IOFunctionsElements pIOFunctions;
	private final InfoFunctionsElements pInfoFunctions;
	private final ManipFunctionsElements pManipFunctions;
	private final ArithFunctionsElements pArithFunctions;
	private final AlterFunctionsElements pAlterFunctions;
	private final LoadElements pLoad;
	private final StoreElements pStore;
	private final ExportElements pExport;
	private final ProcCallElements pProcCall;
	private final DepthElements pDepth;
	private final FieldInfoElements pFieldInfo;
	private final ContainsElements pContains;
	private final SelectElements pSelect;
	private final ConcatElements pConcat;
	private final SumElements pSum;
	private final ProductElements pProduct;
	private final MeanElements pMean;
	private final AddElements pAdd;
	private final InsertElements pInsert;
	private final RenameElements pRename;
	private final DeleteElements pDelete;
	private final RemoveElements pRemove;
	private final ConstantElements pConstant;
	private final PrimitiveElements pPrimitive;
	private final ArrayElements pArray;
	private final JSonObjectElements pJSonObject;
	private final FieldElements pField;
	private final NUMBERElements pNUMBER;
	private final TerminalRule tNULL;
	private final TerminalRule tBOOL;
	private final TerminalRule tDOUBLE;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public JsonDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pSimpleStatement = new SimpleStatementElements();
		this.pAssignment = new AssignmentElements();
		this.pExpression = new ExpressionElements();
		this.pExpressionLvl1 = new ExpressionLvl1Elements();
		this.pExpressionLvl2 = new ExpressionLvl2Elements();
		this.pExpressionLvl3 = new ExpressionLvl3Elements();
		this.pExpressionLvl4 = new ExpressionLvl4Elements();
		this.pExpressionLvl5 = new ExpressionLvl5Elements();
		this.pExpressionLvl6 = new ExpressionLvl6Elements();
		this.pExpressionLvl7 = new ExpressionLvl7Elements();
		this.pUnaryMinusExpression = new UnaryMinusExpressionElements();
		this.pUnaryPlusExpression = new UnaryPlusExpressionElements();
		this.pExpressionLvl8 = new ExpressionLvl8Elements();
		this.pLogicalNegationExpression = new LogicalNegationExpressionElements();
		this.pPrimaryExpression = new PrimaryExpressionElements();
		this.pBracketExpression = new BracketExpressionElements();
		this.pPointer = new PointerElements();
		this.pVariableCall = new VariableCallElements();
		this.pAuxiliarCaller = new AuxiliarCallerElements();
		this.pFieldCaller = new FieldCallerElements();
		this.pArrayCaller = new ArrayCallerElements();
		this.pFunctionCall = new FunctionCallElements();
		this.pIOFunctions = new IOFunctionsElements();
		this.pInfoFunctions = new InfoFunctionsElements();
		this.pManipFunctions = new ManipFunctionsElements();
		this.pArithFunctions = new ArithFunctionsElements();
		this.pAlterFunctions = new AlterFunctionsElements();
		this.pLoad = new LoadElements();
		this.pStore = new StoreElements();
		this.pExport = new ExportElements();
		this.pProcCall = new ProcCallElements();
		this.pDepth = new DepthElements();
		this.pFieldInfo = new FieldInfoElements();
		this.pContains = new ContainsElements();
		this.pSelect = new SelectElements();
		this.pConcat = new ConcatElements();
		this.pSum = new SumElements();
		this.pProduct = new ProductElements();
		this.pMean = new MeanElements();
		this.pAdd = new AddElements();
		this.pInsert = new InsertElements();
		this.pRename = new RenameElements();
		this.pDelete = new DeleteElements();
		this.pRemove = new RemoveElements();
		this.pConstant = new ConstantElements();
		this.pPrimitive = new PrimitiveElements();
		this.pArray = new ArrayElements();
		this.pJSonObject = new JSonObjectElements();
		this.pField = new FieldElements();
		this.pNUMBER = new NUMBERElements();
		this.tNULL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JsonDsl.NULL");
		this.tBOOL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JsonDsl.BOOL");
		this.tDOUBLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JsonDsl.DOUBLE");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.JsonDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	stmts+=SimpleStatement*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//SimpleStatement:
	//	(Assignment | Expression | ProcCall) ';';
	public SimpleStatementElements getSimpleStatementAccess() {
		return pSimpleStatement;
	}
	
	public ParserRule getSimpleStatementRule() {
		return getSimpleStatementAccess().getRule();
	}
	
	//Assignment:
	//	leftHandSide=VariableCall '=' rightHandSide=Expression;
	public AssignmentElements getAssignmentAccess() {
		return pAssignment;
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}
	
	//Expression:
	//	ExpressionLvl1;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//ExpressionLvl1 Expression:
	//	ExpressionLvl2 ({DisjunctionExpression.left=current} 'OR' right=ExpressionLvl2)*;
	public ExpressionLvl1Elements getExpressionLvl1Access() {
		return pExpressionLvl1;
	}
	
	public ParserRule getExpressionLvl1Rule() {
		return getExpressionLvl1Access().getRule();
	}
	
	//ExpressionLvl2 Expression:
	//	ExpressionLvl3 ({ConjunctionExpression.left=current} 'AND' right=ExpressionLvl3)*;
	public ExpressionLvl2Elements getExpressionLvl2Access() {
		return pExpressionLvl2;
	}
	
	public ParserRule getExpressionLvl2Rule() {
		return getExpressionLvl2Access().getRule();
	}
	
	//ExpressionLvl3 Expression:
	//	ExpressionLvl4 ({EqualityExpression.left=current} '==' right=ExpressionLvl4 | {InequalityExpression.left=current} '!='
	//	right=ExpressionLvl4)*;
	public ExpressionLvl3Elements getExpressionLvl3Access() {
		return pExpressionLvl3;
	}
	
	public ParserRule getExpressionLvl3Rule() {
		return getExpressionLvl3Access().getRule();
	}
	
	//ExpressionLvl4 Expression:
	//	ExpressionLvl5 ({SuperiExpression.left=current} '>' right=ExpressionLvl5 | {SuperiorOrEqualExpression.left=current}
	//	'>=' right=ExpressionLvl5 | {InferiExpression.left=current} '<' right=ExpressionLvl5 |
	//	{InferiorOrEqualExpression.left=current} '<=' right=ExpressionLvl5)*;
	public ExpressionLvl4Elements getExpressionLvl4Access() {
		return pExpressionLvl4;
	}
	
	public ParserRule getExpressionLvl4Rule() {
		return getExpressionLvl4Access().getRule();
	}
	
	//ExpressionLvl5 Expression:
	//	ExpressionLvl6 ({AdditionExpression.left=current} '+' right=ExpressionLvl6 | {SubstractionExpression.left=current} '-'
	//	right=ExpressionLvl6)*;
	public ExpressionLvl5Elements getExpressionLvl5Access() {
		return pExpressionLvl5;
	}
	
	public ParserRule getExpressionLvl5Rule() {
		return getExpressionLvl5Access().getRule();
	}
	
	//ExpressionLvl6 Expression:
	//	ExpressionLvl7 ({MultiplicationExpression.left=current} '*' right=ExpressionLvl7 | {DivisionExpression.left=current}
	//	'/' right=ExpressionLvl7 | {ModuloExpression.left=current} '%' right=ExpressionLvl7)*;
	public ExpressionLvl6Elements getExpressionLvl6Access() {
		return pExpressionLvl6;
	}
	
	public ParserRule getExpressionLvl6Rule() {
		return getExpressionLvl6Access().getRule();
	}
	
	//ExpressionLvl7 Expression:
	//	UnaryMinusExpression | UnaryPlusExpression | ExpressionLvl8;
	public ExpressionLvl7Elements getExpressionLvl7Access() {
		return pExpressionLvl7;
	}
	
	public ParserRule getExpressionLvl7Rule() {
		return getExpressionLvl7Access().getRule();
	}
	
	//UnaryMinusExpression:
	//	'-' sub=ExpressionLvl7;
	public UnaryMinusExpressionElements getUnaryMinusExpressionAccess() {
		return pUnaryMinusExpression;
	}
	
	public ParserRule getUnaryMinusExpressionRule() {
		return getUnaryMinusExpressionAccess().getRule();
	}
	
	//UnaryPlusExpression:
	//	'+' sub=ExpressionLvl7;
	public UnaryPlusExpressionElements getUnaryPlusExpressionAccess() {
		return pUnaryPlusExpression;
	}
	
	public ParserRule getUnaryPlusExpressionRule() {
		return getUnaryPlusExpressionAccess().getRule();
	}
	
	//ExpressionLvl8 Expression:
	//	LogicalNegationExpression | PrimaryExpression;
	public ExpressionLvl8Elements getExpressionLvl8Access() {
		return pExpressionLvl8;
	}
	
	public ParserRule getExpressionLvl8Rule() {
		return getExpressionLvl8Access().getRule();
	}
	
	//LogicalNegationExpression:
	//	'!' sub=ExpressionLvl8;
	public LogicalNegationExpressionElements getLogicalNegationExpressionAccess() {
		return pLogicalNegationExpression;
	}
	
	public ParserRule getLogicalNegationExpressionRule() {
		return getLogicalNegationExpressionAccess().getRule();
	}
	
	//PrimaryExpression Expression:
	//	VariableCall | Constant | FunctionCall | BracketExpression | {PrimaryExpression} Pointer;
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return pPrimaryExpression;
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}
	
	//BracketExpression:
	//	'(' sub=Expression ')';
	public BracketExpressionElements getBracketExpressionAccess() {
		return pBracketExpression;
	}
	
	public ParserRule getBracketExpressionRule() {
		return getBracketExpressionAccess().getRule();
	}
	
	//Pointer:
	//	'?';
	public PointerElements getPointerAccess() {
		return pPointer;
	}
	
	public ParserRule getPointerRule() {
		return getPointerAccess().getRule();
	}
	
	//VariableCall:
	//	name=ID caller+=AuxiliarCaller*;
	public VariableCallElements getVariableCallAccess() {
		return pVariableCall;
	}
	
	public ParserRule getVariableCallRule() {
		return getVariableCallAccess().getRule();
	}
	
	//AuxiliarCaller:
	//	FieldCaller | ArrayCaller;
	public AuxiliarCallerElements getAuxiliarCallerAccess() {
		return pAuxiliarCaller;
	}
	
	public ParserRule getAuxiliarCallerRule() {
		return getAuxiliarCallerAccess().getRule();
	}
	
	//FieldCaller:
	//	'~' key=STRING;
	public FieldCallerElements getFieldCallerAccess() {
		return pFieldCaller;
	}
	
	public ParserRule getFieldCallerRule() {
		return getFieldCallerAccess().getRule();
	}
	
	//ArrayCaller:
	//	'[' index+=INT (',' index+=INT)* ']';
	public ArrayCallerElements getArrayCallerAccess() {
		return pArrayCaller;
	}
	
	public ParserRule getArrayCallerRule() {
		return getArrayCallerAccess().getRule();
	}
	
	//FunctionCall Expression:
	//	IOFunctions | InfoFunctions | ManipFunctions | ArithFunctions | AlterFunctions;
	public FunctionCallElements getFunctionCallAccess() {
		return pFunctionCall;
	}
	
	public ParserRule getFunctionCallRule() {
		return getFunctionCallAccess().getRule();
	}
	
	//IOFunctions:
	//	Load | Store | Export;
	public IOFunctionsElements getIOFunctionsAccess() {
		return pIOFunctions;
	}
	
	public ParserRule getIOFunctionsRule() {
		return getIOFunctionsAccess().getRule();
	}
	
	//InfoFunctions:
	//	Depth | FieldInfo | Contains;
	public InfoFunctionsElements getInfoFunctionsAccess() {
		return pInfoFunctions;
	}
	
	public ParserRule getInfoFunctionsRule() {
		return getInfoFunctionsAccess().getRule();
	}
	
	//ManipFunctions:
	//	Select | Concat;
	public ManipFunctionsElements getManipFunctionsAccess() {
		return pManipFunctions;
	}
	
	public ParserRule getManipFunctionsRule() {
		return getManipFunctionsAccess().getRule();
	}
	
	//ArithFunctions:
	//	Sum | Product | Mean;
	public ArithFunctionsElements getArithFunctionsAccess() {
		return pArithFunctions;
	}
	
	public ParserRule getArithFunctionsRule() {
		return getArithFunctionsAccess().getRule();
	}
	
	//AlterFunctions:
	//	Add | Insert | Rename | Remove | Delete;
	public AlterFunctionsElements getAlterFunctionsAccess() {
		return pAlterFunctions;
	}
	
	public ParserRule getAlterFunctionsRule() {
		return getAlterFunctionsAccess().getRule();
	}
	
	//// IO FUNCTIONS
	//Load:
	//	'LOAD' '(' fileName=Expression ')';
	public LoadElements getLoadAccess() {
		return pLoad;
	}
	
	public ParserRule getLoadRule() {
		return getLoadAccess().getRule();
	}
	
	//Store:
	//	'STORE' '(' expression=Expression ')' 'IN' '(' fileName=Expression ')';
	public StoreElements getStoreAccess() {
		return pStore;
	}
	
	public ParserRule getStoreRule() {
		return getStoreAccess().getRule();
	}
	
	//Export:
	//	'EXPORT_CSV' '(' expression=Expression ')' 'IN' '(' fileName=Expression ')';
	public ExportElements getExportAccess() {
		return pExport;
	}
	
	public ParserRule getExportRule() {
		return getExportAccess().getRule();
	}
	
	//ProcCall:
	//	'PRINT' '(' expression=Expression ')';
	public ProcCallElements getProcCallAccess() {
		return pProcCall;
	}
	
	public ParserRule getProcCallRule() {
		return getProcCallAccess().getRule();
	}
	
	//// INFO FUNCTIONS
	//Depth:
	//	'GET_DEPTH' '(' expression=Expression ')';
	public DepthElements getDepthAccess() {
		return pDepth;
	}
	
	public ParserRule getDepthRule() {
		return getDepthAccess().getRule();
	}
	
	//FieldInfo:
	//	'GET_INFOS' '(' expression=Expression ')';
	public FieldInfoElements getFieldInfoAccess() {
		return pFieldInfo;
	}
	
	public ParserRule getFieldInfoRule() {
		return getFieldInfoAccess().getRule();
	}
	
	//Contains:
	//	'IS' '(' keys+=Expression (',' keys+=Expression)* ')' 'IN' '(' right=Expression ')';
	public ContainsElements getContainsAccess() {
		return pContains;
	}
	
	public ParserRule getContainsRule() {
		return getContainsAccess().getRule();
	}
	
	//// MANIP
	//Select:
	//	'SELECT' '(' ('*' | (fields+=Expression (',' fields+=Expression)*)?) ')' 'FROM' '(' fromExpression=Expression ')' (=>
	//	'WHERE' '(' whereExpression=Expression ')')?;
	public SelectElements getSelectAccess() {
		return pSelect;
	}
	
	public ParserRule getSelectRule() {
		return getSelectAccess().getRule();
	}
	
	//Concat:
	//	'CONCAT' '(' expressions+=Expression (',' expressions+=Expression) ')';
	public ConcatElements getConcatAccess() {
		return pConcat;
	}
	
	public ParserRule getConcatRule() {
		return getConcatAccess().getRule();
	}
	
	//Sum:
	//	'SUM' '(' expression=Expression ')' ('ON' '(' fields+=Expression (',' fields+=Expression)* ')')? (=> 'WHERE' '('
	//	whereExpression=Expression ')')?;
	public SumElements getSumAccess() {
		return pSum;
	}
	
	public ParserRule getSumRule() {
		return getSumAccess().getRule();
	}
	
	//Product:
	//	'PRODUCT' '(' expression=Expression ')' ('ON' '(' fields+=Expression (',' fields+=Expression)* ')')? (=> 'WHERE' '('
	//	whereExpression=Expression ')')?;
	public ProductElements getProductAccess() {
		return pProduct;
	}
	
	public ParserRule getProductRule() {
		return getProductAccess().getRule();
	}
	
	//Mean:
	//	'MEAN' '(' expression=Expression ')' ('ON' '(' fields+=Expression (',' fields+=Expression)* ')')? (=> 'WHERE' '('
	//	whereExpression=Expression ')')?;
	public MeanElements getMeanAccess() {
		return pMean;
	}
	
	public ParserRule getMeanRule() {
		return getMeanAccess().getRule();
	}
	
	//Add:
	//	'ADD' '(' expression=Expression ')' 'IN' '(' variable=Expression ')' ('ON' '(' fields+=Expression (','
	//	fields+=Expression)* ')')?;
	public AddElements getAddAccess() {
		return pAdd;
	}
	
	public ParserRule getAddRule() {
		return getAddAccess().getRule();
	}
	
	//Insert:
	//	'INSERT' '(' value=Expression ')' 'IN' '(' variable=Expression ')' ('(' 'WHERE' whereExpression=Expression ')')?;
	public InsertElements getInsertAccess() {
		return pInsert;
	}
	
	public ParserRule getInsertRule() {
		return getInsertAccess().getRule();
	}
	
	//Rename:
	//	'RENAME' '(' call=VariableCall ')' 'ON' '(' fields+=Expression (',' fields+=Expression)* ')' 'TO' '('
	//	nfields+=Expression (',' nfields+=Expression)* ')';
	public RenameElements getRenameAccess() {
		return pRename;
	}
	
	public ParserRule getRenameRule() {
		return getRenameAccess().getRule();
	}
	
	//Delete:
	//	'DELETE' '(' ('*' | (fields+=Expression (',' fields+=Expression)*)?) ')' 'FROM' '(' fromExpression=Expression ')' (=>
	//	'WHERE' '(' whereExpression=Expression ')')?;
	public DeleteElements getDeleteAccess() {
		return pDelete;
	}
	
	public ParserRule getDeleteRule() {
		return getDeleteAccess().getRule();
	}
	
	//Remove:
	//	'REMOVE' '(' value=Expression ')' 'IN' '(' variable=Expression ')' ('(' 'WHERE' whereExpression=Expression ')')?;
	public RemoveElements getRemoveAccess() {
		return pRemove;
	}
	
	public ParserRule getRemoveRule() {
		return getRemoveAccess().getRule();
	}
	
	//Constant:
	//	Primitive | Array | JSonObject;
	public ConstantElements getConstantAccess() {
		return pConstant;
	}
	
	public ParserRule getConstantRule() {
		return getConstantAccess().getRule();
	}
	
	//Primitive:
	//	str=STRING | num=NUMBER | bool=BOOL | nil=NULL;
	public PrimitiveElements getPrimitiveAccess() {
		return pPrimitive;
	}
	
	public ParserRule getPrimitiveRule() {
		return getPrimitiveAccess().getRule();
	}
	
	//Array:
	//	{Array} '[' (values+=Expression (',' values+=Expression)*)? ']';
	public ArrayElements getArrayAccess() {
		return pArray;
	}
	
	public ParserRule getArrayRule() {
		return getArrayAccess().getRule();
	}
	
	//JSonObject:
	//	{JSonObject} '{' (fields+=Field (',' fields+=Field)*)? '}';
	public JSonObjectElements getJSonObjectAccess() {
		return pJSonObject;
	}
	
	public ParserRule getJSonObjectRule() {
		return getJSonObjectAccess().getRule();
	}
	
	//Field:
	//	key=Expression ':' value=Expression;
	public FieldElements getFieldAccess() {
		return pField;
	}
	
	public ParserRule getFieldRule() {
		return getFieldAccess().getRule();
	}
	
	//NUMBER:
	//	INT | DOUBLE;
	public NUMBERElements getNUMBERAccess() {
		return pNUMBER;
	}
	
	public ParserRule getNUMBERRule() {
		return getNUMBERAccess().getRule();
	}
	
	//terminal NULL:
	//	'null';
	public TerminalRule getNULLRule() {
		return tNULL;
	}
	
	//terminal BOOL:
	//	'true' | 'false';
	public TerminalRule getBOOLRule() {
		return tBOOL;
	}
	
	//terminal DOUBLE:
	//	'0'..'9'+ '.' '0'..'9'* ('e' '0'..'9'+);
	public TerminalRule getDOUBLERule() {
		return tDOUBLE;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
