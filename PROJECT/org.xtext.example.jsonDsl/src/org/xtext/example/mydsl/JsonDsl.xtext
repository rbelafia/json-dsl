grammar org.xtext.example.mydsl.JsonDsl with org.eclipse.xtext.common.Terminals

generate jsonDsl "http://www.xtext.org/example/mydsl/JsonDsl"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Model:
	(stmts += SimpleStatement)*;


SimpleStatement:
	(Assignment | Expression | ProcCall) ';'
;


Assignment:
	(leftHandSide=VariableCall) '=' (rightHandSide=Expression)
;

Expression: ExpressionLvl1;


ExpressionLvl1 returns Expression:
	ExpressionLvl2 ({DisjunctionExpression.left = current} 'OR' right = ExpressionLvl2)*
;

ExpressionLvl2 returns Expression:
	ExpressionLvl3 ({ConjunctionExpression.left = current} 'AND' right = ExpressionLvl3)*
;

ExpressionLvl3 returns Expression:
	ExpressionLvl4 (
		({EqualityExpression.left = current} '==' right = ExpressionLvl4)
		|({InequalityExpression.left = current} '!=' right = ExpressionLvl4)
	)*
;


ExpressionLvl4 returns Expression:
	ExpressionLvl5 (
		({SuperiExpression.left = current} '>' right = ExpressionLvl5)
		|({SuperiorOrEqualExpression.left = current} '>=' right = ExpressionLvl5)
		|({InferiExpression.left = current} '<' right = ExpressionLvl5)
		|({InferiorOrEqualExpression.left = current} '<=' right = ExpressionLvl5)
	)*
;

ExpressionLvl5 returns Expression:
	ExpressionLvl6 (
		({AdditionExpression.left = current} '+' right = ExpressionLvl6)
		|({SubstractionExpression.left = current} '-' right = ExpressionLvl6)
	)*
;


ExpressionLvl6 returns Expression:
	ExpressionLvl7 (
		({MultiplicationExpression.left = current} '*' right = ExpressionLvl7)
		|({DivisionExpression.left = current} '/' right = ExpressionLvl7)
		|({ModuloExpression.left = current} '%' right = ExpressionLvl7)
	)*
;

ExpressionLvl7 returns Expression:
	UnaryMinusExpression | UnaryPlusExpression | ExpressionLvl8
;

UnaryMinusExpression:
	'-' sub=ExpressionLvl7
;

UnaryPlusExpression:
	'+' sub=ExpressionLvl7
;

ExpressionLvl8 returns Expression:
	LogicalNegationExpression | PrimaryExpression
;

LogicalNegationExpression:
	'!' sub=ExpressionLvl8
;


PrimaryExpression returns Expression:
	VariableCall | 
	Constant | 
	FunctionCall | 
	BracketExpression |
	{PrimaryExpression} Pointer
;

BracketExpression:
	'(' sub=Expression ')'  
;

Pointer:
	'?'
;

VariableCall:
	name=ID (caller+=AuxiliarCaller)*
;

AuxiliarCaller:
	(FieldCaller | ArrayCaller) /*(caller=AuxiliarCaller)?*/
;

FieldCaller:
	'~' key=STRING
;

ArrayCaller:
	'[' index+=INT (',' index+=INT)* ']'
;

FunctionCall returns Expression:
	IOFunctions |
	InfoFunctions |
	ManipFunctions |
	ArithFunctions | 
	AlterFunctions
;

IOFunctions:
	Load | Store | Export
;

InfoFunctions :
	Depth | FieldInfo | Contains
;

ManipFunctions :
	Select |
	Concat
;

ArithFunctions : Sum | Product | Mean ;

AlterFunctions :
	Add | Insert | Rename | Remove | Delete
;


// IO FUNCTIONS

Load:
	'LOAD' '(' fileName=Expression ')' 
;


Store:
	'STORE' '(' expression=Expression ')' 'IN' '(' fileName=Expression ')' 
;

Export:
	'EXPORT_CSV' '(' expression=Expression ')' 'IN' '(' fileName=Expression ')'
;

ProcCall:
	'PRINT' '(' expression=Expression ')'
;


// INFO FUNCTIONS

Depth:
	'GET_DEPTH' '(' expression=Expression ')'
;

FieldInfo:
	'GET_INFOS' '(' expression=Expression ')'
;

Contains:
	'IS' '(' keys+=Expression (',' keys+=Expression)*')'  'IN' '(' right=Expression ')'  
;


// MANIP

Select:
	'SELECT' '(' ('*' | (fields+=Expression (',' fields+=Expression)*)?) ')' 'FROM' '(' fromExpression=Expression ')' (=> 'WHERE' '(' whereExpression=Expression ')')? 
;

Concat:
	'CONCAT' '(' expressions+=Expression (',' expressions+=Expression) ')'
;

Sum: 
	'SUM' '(' expression=Expression ')' ('ON' '(' fields+= Expression (',' fields+=Expression)* ')')? (=> 'WHERE' '(' whereExpression=Expression ')')?  
;

Product:
	'PRODUCT' '(' expression=Expression ')' ('ON' '(' fields+= Expression (',' fields+=Expression)* ')')? (=> 'WHERE' '(' whereExpression=Expression ')')? 
;

Mean:
	'MEAN' '(' expression=Expression ')' ('ON' '(' fields+= Expression (',' fields+=Expression)* ')')? (=> 'WHERE' '(' whereExpression=Expression ')')? 
;

Add:
	'ADD' '(' expression=Expression ')' 'IN' '(' variable=Expression ')' ('ON' '(' fields+= Expression (',' fields+=Expression)* ')')?
;

Insert:
	'INSERT' '(' value=Expression ')' 'IN' '(' variable=Expression ')' ('(' 'WHERE' whereExpression=Expression ')')? 
;

Rename:
	'RENAME' '(' call=VariableCall ')' 'ON' '(' fields+= Expression (',' fields+=Expression)* ')' 'TO' '(' nfields+=Expression (',' nfields+=Expression)* ')'
;

Delete:
	'DELETE' '(' ('*' | (fields+=Expression (',' fields+=Expression)*)?) ')' 'FROM' '(' fromExpression=Expression ')' (=> 'WHERE' '(' whereExpression=Expression ')')? 
;

Remove:
	'REMOVE' '(' value=Expression ')' 'IN' '(' variable=Expression ')' ('(' 'WHERE' whereExpression=Expression ')')? 
;


Constant:
	Primitive | Array | JSonObject
;

Primitive:
	str=STRING | num=NUMBER | bool=BOOL | nil=NULL
;

Array:
	{Array} '[' (values+=Expression (',' values+=Expression)*)? ']' 
;

JSonObject:
	{JSonObject} '{' (fields+=Field (',' fields+=Field)*)? '}'
;

Field:
	key=Expression ':' value=Expression
;

NUMBER : INT | DOUBLE;

terminal NULL : 'null';

terminal BOOL : 'true' | 'false';

terminal DOUBLE : ('0'..'9')+'.'('0'..'9')*('e'('0'..'9')+);

