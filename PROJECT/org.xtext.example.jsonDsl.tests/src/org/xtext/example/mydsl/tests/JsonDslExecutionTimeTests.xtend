/*
 * generated by Xtext 2.23.0
 */
package org.xtext.example.mydsl.tests

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import org.xtext.example.mydsl.jsonDsl.Model
import org.xtext.example.mydsl.generator.JsonDslGenerator
import static org.junit.Assert.assertEquals
import org.junit.jupiter.api.BeforeAll
import java.io.*
import org.junit.jupiter.api.AfterAll

@ExtendWith(InjectionExtension)
@InjectWith(JsonDslInjectorProvider)
class JsonDslExecutionTimeTests {
	@Inject
	ParseHelper<Model> parseHelper
	
	var JsonDslGenerator generator = new JsonDslGenerator()
	
	@BeforeAll
	def static void buildTmp() {
		var processBuilder = new ProcessBuilder()
		processBuilder.command("bash", "-c", "mkdir ./tmp");
			
		try {
		    var process = processBuilder.start()
		    var output = new StringBuilder();
		    var reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
		
		    var String line
		    while ((line = reader.readLine()) !== null)
		        output.append(line).append("\n");
		
			var exitVal = process.waitFor();
			
			if (exitVal == 0) println("tmp created !")
			else println("A problem occured")
		
		}
		catch (IOException | InterruptedException e) { e.printStackTrace(); }
	}
	
	
	
	private def static void exec(ProcessBuilder processBuilder) {
        try {
            var process = processBuilder.start()
            var output = new StringBuilder();
            var reader = new BufferedReader(new InputStreamReader(process.getInputStream()));

            var String line
            while ((line = reader.readLine()) !== null)
                output.append(line).append("\n");

            var exitVal = process.waitFor();

            if (exitVal == 0) println("Success build!")
            else println("A problem occured")

            println(output);

        }
        catch (IOException | InterruptedException e) { e.printStackTrace(); }
    }
	
	def execPython(String expected, String actual) {
		
		val result = parseHelper.parse(actual)
		
		var compiled_stms = newArrayList()
		for (stmt: result.stmts) compiled_stms.add(generator.compilePython(stmt))
		
		var processBuilder = new ProcessBuilder()
		var command = '''echo "from jz_library import *" > tester.py; echo "" >> tester.py; «FOR compiled : compiled_stms» echo "«compiled»" >> tester.py;«ENDFOR»'''
		println(command)
		processBuilder.command("bash", "-c", command);
		
		exec(processBuilder)
		
		processBuilder.command("bash", "./pyscript.sh");
		
		try {
            var process = processBuilder.start()
            var output = new StringBuilder();
            var reader = new BufferedReader(new InputStreamReader(process.getInputStream()));

            var String line
            while ((line = reader.readLine()) !== null)
                output.append(line).append("\n");

            var exitVal = process.waitFor();

            if (exitVal == 0) println("Success exec!")
            else println("A problem occured")
            
            println(output)
            assertEquals(expected, output.toString)

        }
        catch (IOException | InterruptedException e) { e.printStackTrace(); }
    	
	}
	
	
	// SELECT
	@Test
	def void testExecPythonSelect() {
		val result = parseHelper.parse('''file = LOAD "./jsonGenTestFile.json"; select = SELECT ("name", "age") FROM (file~"array") WHERE (.~"adress" == "Montpellier"); PRINT(select)''')
		
		var compiled_stms = newArrayList()
		for (stmt: result.stmts) compiled_stms.add(generator.compilePython(stmt))
		
		var processBuilder = new ProcessBuilder()
		var command = '''echo "from jz_library import *" > tester.py; echo "" >> tester.py; «FOR compiled : compiled_stms» echo "«compiled»" >> tester.py;«ENDFOR»'''
		println(command)
		processBuilder.command("bash", "-c", command);
		
		exec(processBuilder)
		
		processBuilder.command("bash", "./pyscript.sh");
		
		try {
            var process = processBuilder.start()
            var output = new StringBuilder();
            var reader = new BufferedReader(new InputStreamReader(process.getInputStream()));

            var String line
            while ((line = reader.readLine()) !== null)
                output.append(line).append("\n");

            var exitVal = process.waitFor();

            if (exitVal == 0) println("Success exec!")
            else println("A problem occured")
            
            println(output)

        }
        catch (IOException | InterruptedException e) { e.printStackTrace(); }
	}
	
	// MEAN
	@Test
	def void testExecPythonMean() {
		execPython("38.5\n", '''file = LOAD "./jsonGenTestFile.json"; PRINT((SUM(file~"array") ON ("age")) / (LENGTH(file~"array"));''')
	}
	
	
	// TEST EXEC JQ
	
	def execJQ(String expected, String actual, String filename) {
		
		var result = parseHelper.parse(actual);
		
		var compiled_stms = newArrayList()
		for (stmt: result.stmts) compiled_stms.add(generator.compileJQ(stmt))
		
		println(result.stmts.length)
		
		
		var processBuilder = new ProcessBuilder()
		var String command
		if (filename === null) command = '''jq -r -n  '''
		else command = '''cat «filename» | jq -r '''
		command += ''' 'def depth (obj): obj | if type == "object" then (map(1 + depth(.)) as $rec | if ($rec | length) == 0 then 1 else ($rec | max) end) else 0 end;'''
		command += '''def csv : (map(keys) | add | unique) as $cols | map(. as $row | $cols | map($row[.])) as $rows | $cols, $rows[] | @csv;'''
		command += '''def product: . as $array | reduce $array[] as $item ( ($array[0] | type | if . == "number" then 1 elif . == "string" then 1 elif . == "object" then {} else null end); . * $item);'''
		command += '''. as $in | «FOR stmt : compiled_stms SEPARATOR "|"»«stmt»«ENDFOR»' '''
		
		println(command)
		processBuilder.command("bash", "-c", command);
		
		try {
            var process = processBuilder.start()
            var output = new StringBuilder();
            var reader = new BufferedReader(new InputStreamReader(process.getInputStream()));

            var String line
            while ((line = reader.readLine()) !== null)
                output.append(line).append("\n");

            var exitVal = process.waitFor();

            if (exitVal == 0) println("Success exec!")
            else println("A problem occured")
            
            println(output)
            assertEquals(expected, output.toString)

        }
        catch (IOException | InterruptedException e) { e.printStackTrace(); }
        
	}
	
	// SELECT
	@Test
	def void testExecJQSelect() {
		execJQ('[\n  {\n    "name": "beta",\n    "age": 20\n  },\n  {\n    "name": "delta",\n    "age": 36\n  },\n  {\n    "name": "lambda",\n    "age": 79\n  },\n  {\n    "name": "pi",\n    "age": 31\n  },\n  {\n    "name": "sigma",\n    "age": 68\n  }\n]\n', '''file = LOAD; sel = SELECT ("name", "age") FROM (file~"array") WHERE (.~"adress" == "Montpellier"); sel;''', "./jsonGenTestFile.json")
	}
	
	// MEAN
	@Test
	def void testExecJQMean() {
		execJQ("38.5\n", '''file = LOAD; (SUM(file~"array") ON ("age")) / (LENGTH(file~"array"));''', "./jsonGenTestFile.json")
	}
	
	@Test
	def void testCompileJQOperator() {
		var command = '''jq -r -n '''
		command += ''' 'def depth (obj): obj | if type == "object" then (map(1 + depth(.)) as $rec | if ($rec | length) == 0 then 1 else ($rec | max) end) else 0 end;'''
		command += '''def csv : (map(keys) | add | unique) as $cols | map(. as $row | $cols | map($row[.])) as $rows | $cols, $rows[] | @csv;'''
		command += '''def product: . as $array | reduce $array[] as $item ( ($array[0] | type | if . == "number" then 1 elif . == "string" then 1 elif . == "object" then {} else null end); . * $item);'''
		val String[] possible_values = #["0", "4", "5.2", '""', '"abc"', '"exemple"', "true", "false", "null", '[]', '[3, 4, 5, 7]', '[1, 4, "Hello", {"a": 7, "b": 9}]', '{}', '{"key1": {"a": 1, "b": 3}, "key2": "se"}', '{"a": {"b": {"c": {"d": 4}}}}', '{"key1": {"a": 6, "c": -1} , "key2": {"e": 1}}']
		val String[] possible_operators = #["OR", "AND", "+", "-", "*", "%", ">", "<", ">=", "<=", "==", "!="]
		for (i : possible_values) {
			for (j : possible_values) {
				for (op : possible_operators) {
					println('''«i» «op» «j»''')
					var jqRes = ""
					var result = parseHelper.parse('''«i» «op» «j»''');
		
					var compiled_stms = newArrayList()
					for (stmt: result.stmts) compiled_stms.add(generator.compileJQ(stmt))
					
				}
			}
		}			
	}
	
	@Test
	def void testCompilePythonOperator() {
		val String[] possible_values = #["0", "4", "5.2", '""', '"abc"', '"exemple"', "true", "false", "null", '[]', '[3, 4, 5, 7]', '[1, 4, "Hello", {"a": 7, "b": 9}]', '{}', '{"key1": {"a": 1, "b": 3}, "key2": "se"}', '{"a": {"b": {"c": {"d": 4}}}}', '{"key1": {"a": 6, "c": -1} , "key2": {"e": 1}}']
		val String[] possible_operators = #["OR", "AND", "+", "-", "*", "%", ">", "<", ">=", "<=", "==", "!="]
		for (i : possible_values) {
			for (j : possible_values) {
				for (op : possible_operators) {
					println('''«i» «op» «j»''')
					
					var result = parseHelper.parse('''PRINT(«i» «op» «j»)''')
		
					var compiled_stms = newArrayList()
					for (stmt: result.stmts) compiled_stms.add(generator.compilePython(stmt))
					
					
					var processBuilder = new ProcessBuilder()
			    
		
					compiled_stms = newArrayList()
					for (stmt: result.stmts) compiled_stms.add(generator.compilePython(stmt))
					
					processBuilder = new ProcessBuilder()
					var command = '''echo "from jz_library import *" > tester.py; echo "" >> tester.py; «FOR compiled : compiled_stms» echo "«compiled»" >> tester.py;«ENDFOR»'''
					println(command)
					processBuilder.command("bash", "-c", command);
					
					exec(processBuilder)
			
				}
					
					
			}
		}			
	}
	
	
	//@Test
	def void testExecJQOperator() {
		var command = '''jq -r -n'''
		command += ''' 'def depth (obj): obj | if type == "object" then (map(1 + depth(.)) as $rec | if ($rec | length) == 0 then 1 else ($rec | max) end) else 0 end;'''
		command += '''def csv : (map(keys) | add | unique) as $cols | map(. as $row | $cols | map($row[.])) as $rows | $cols, $rows[] | @csv;'''
		command += '''def product: . as $array | reduce $array[] as $item ( ($array[0] | type | if . == "number" then 1 elif . == "string" then 1 elif . == "object" then {} else null end); . * $item);'''
		val String[] possible_values = #["0", "4", "5.2", '""', '"abc"', '"exemple"', "true", "false", "null", '[]', '[3, 4, 5, 7]', '[1, 4, "Hello", {"a": 7, "b": 9}]', '{}', '{"key1": {"a": 1, "b": 3}, "key2": "se"}', '{"a": {"b": {"c": {"d": 4}}}}', '{"key1": {"a": 6, "c": -1} , "key2": {"e": 1}}']
		val String[] possible_operators = #["OR", "AND", "+", "-", "*", "%", ">", "<", ">=", "<=", "==", "!="]
		for (i : possible_values) {
			for (j : possible_values) {
				for (op : possible_operators) {
					println('''«i» «op» «j»''')
					var jqRes = ""
					var result = parseHelper.parse('''«i» «op» «j»''');
		
					var compiled_stms = newArrayList()
					for (stmt: result.stmts) compiled_stms.add(generator.compileJQ(stmt))
					
					
					var processBuilder = new ProcessBuilder()
					
					var _command = "" + command
					_command += '''«FOR stmt : compiled_stms SEPARATOR "|"»«stmt»«ENDFOR» '''
					if(generator.mustPrint) command += ''' | $printer' '''
					else if(generator.fileToExport !== null) command += ''' | $store' > «generator.fileToExport» '''
					else command += "'"
					
					println(command)
					processBuilder.command("bash", "-c", command);
					
					try {
			            var process = processBuilder.start()
			            var output = new StringBuilder();
			            var reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
			
			            var String line
			            while ((line = reader.readLine()) !== null)
			                output.append(line).append("\n");
			
			            var exitVal = process.waitFor();
			
			            if (exitVal == 0) println("Success exec!")
			            else println("A problem occured")
			            
			            jqRes = output.toString.toLowerCase.replace('"', '')
			
			        }
			        catch (IOException | InterruptedException e) { e.printStackTrace(); }
				}
					
					
			}
		}			
	}
	
	//@Test
	def void testExecPythonOperator() {
		val String[] possible_values = #["0", "4", "5.2", '""', '"abc"', '"exemple"', "true", "false", "null", '[]', '[3, 4, 5, 7]', '[1, 4, "Hello", {"a": 7, "b": 9}]', '{}', '{"key1": {"a": 1, "b": 3}, "key2": "se"}', '{"a": {"b": {"c": {"d": 4}}}}', '{"key1": {"a": 6, "c": -1} , "key2": {"e": 1}}']
		val String[] possible_operators = #["OR", "AND", "+", "-", "*", "%", ">", "<", ">=", "<=", "==", "!="]
		for (i : possible_values) {
			for (j : possible_values) {
				for (op : possible_operators) {
					println('''«i» «op» «j»''')
					
					var result = parseHelper.parse('''PRINT(«i» «op» «j»)''')
		
					var compiled_stms = newArrayList()
					for (stmt: result.stmts) compiled_stms.add(generator.compilePython(stmt))
					
					
					var processBuilder = new ProcessBuilder()
					
			        
			        var pythonRes = ""
			    
		
					compiled_stms = newArrayList()
					for (stmt: result.stmts) compiled_stms.add(generator.compilePython(stmt))
					
					processBuilder = new ProcessBuilder()
					var command = '''echo "from jz_library import *" > tester.py; echo "" >> tester.py; «FOR compiled : compiled_stms» echo "«compiled»" >> tester.py;«ENDFOR»'''
					println(command)
					processBuilder.command("bash", "-c", command);
					
					exec(processBuilder)
					
					processBuilder.command("bash", "./pyscript.sh");
					
					try {
			            var process = processBuilder.start()
			            var output = new StringBuilder();
			            var reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
			
			            var String line
			            while ((line = reader.readLine()) !== null)
			                output.append(line).append("\n");
			
			            var exitVal = process.waitFor();
			
			            if (exitVal == 0) println("Success exec!")
			            else println("A problem occured")
			            
			            println(output)
			            pythonRes = output.toString.toLowerCase
			            if(pythonRes == "none\n") pythonRes = "null\n"
			
			        }
			        catch (IOException | InterruptedException e) { e.printStackTrace(); }
			
				}
					
					
			}
		}			
	}
	
	// BIG SELECT
	@Test
	def void testExecJQBigSelect() {
		var result = parseHelper.parse('''file = LOAD; select = SELECT ("name", "age") FROM (file~"array") WHERE (.~"adress" == "Montpellier"); select;''');
		
		var compiled_stms = newArrayList()
		for (stmt: result.stmts) compiled_stms.add(generator.compileJQ(stmt))
		
		println(result.stmts.length)
		
		
		var processBuilder = new ProcessBuilder()
		var command = '''cat ./jsonBigGenTestFile | jq -r '''
		command += ''' 'def depth (obj): obj | if type == "object" then (map(1 + depth(.)) as $rec | if ($rec | length) == 0 then 1 else ($rec | max) end) else 0 end;'''
		command += '''def csv : (map(keys) | add | unique) as $cols | map(. as $row | $cols | map($row[.])) as $rows | $cols, $rows[] | @csv;'''
		command += '''def product: . as $array | reduce $array[] as $item ( ($array[0] | type | if . == "number" then 1 elif . == "string" then 1 elif . == "object" then {} else null end); . * $item);'''
		command += '''. as $in | «FOR stmt : compiled_stms SEPARATOR "|"»«stmt»«ENDFOR»' '''
		
		println(command)
		processBuilder.command("bash", "-c", command);
		
		try {
            var process = processBuilder.start()
            var output = new StringBuilder();
            var reader = new BufferedReader(new InputStreamReader(process.getInputStream()));

            var String line
            while ((line = reader.readLine()) !== null)
                output.append(line).append("\n");

            var exitVal = process.waitFor();

            if (exitVal == 0) println("Success exec!")
            else println("A problem occured")
            
            println(output)

        }
        catch (IOException | InterruptedException e) { e.printStackTrace(); }
	}
	
	@Test
	def void testExecPythonBigSelect() {
		var result = parseHelper.parse('''file = LOAD "./jsonBigGenTestFile.json"; select = SELECT ("name", "age") FROM (file~"array") WHERE (.~"adress" == "Montpellier"); PRINT(select)''');
		
		var compiled_stms = newArrayList()
		for (stmt: result.stmts) compiled_stms.add(generator.compilePython(stmt))
		
		var processBuilder = new ProcessBuilder()
		var command = '''echo "from jz_library import *" > tester.py; echo "" >> tester.py; «FOR compiled : compiled_stms» echo "«compiled»" >> tester.py;«ENDFOR»'''
		println(command)
		processBuilder.command("bash", "-c", command);
		
		exec(processBuilder)
		
		processBuilder.command("bash", "./pyscript.sh");
		
		try {
            var process = processBuilder.start()
            var output = new StringBuilder();
            var reader = new BufferedReader(new InputStreamReader(process.getInputStream()));

            var String line
            while ((line = reader.readLine()) !== null)
                output.append(line).append("\n");

            var exitVal = process.waitFor();

            if (exitVal == 0) println("Success exec!")
            else println("A problem occured")
            
            println(output)

        }
        catch (IOException | InterruptedException e) { e.printStackTrace(); }
	}
	
	
	@Test
	def void testExecJQBigMean() {
		var result = parseHelper.parse('''file = LOAD; (SUM(file~"array") ON ("age")) / (LENGTH(file~"array");''');
		var compiled_stms = newArrayList()
		for (stmt: result.stmts) compiled_stms.add(generator.compileJQ(stmt))
		
		println(result.stmts.length)
		
		
		var processBuilder = new ProcessBuilder()
		var command = '''cat ./jsonBigGenTestFile | jq -r '''
		command += ''' 'def depth (obj): obj | if type == "object" then (map(1 + depth(.)) as $rec | if ($rec | length) == 0 then 1 else ($rec | max) end) else 0 end;'''
		command += '''def csv : (map(keys) | add | unique) as $cols | map(. as $row | $cols | map($row[.])) as $rows | $cols, $rows[] | @csv;'''
		command += '''def product: . as $array | reduce $array[] as $item ( ($array[0] | type | if . == "number" then 1 elif . == "string" then 1 elif . == "object" then {} else null end); . * $item);'''
		command += '''. as $in | «FOR stmt : compiled_stms SEPARATOR "|"»«stmt»«ENDFOR»' '''
		
		println(command)
		processBuilder.command("bash", "-c", command);
		
		try {
            var process = processBuilder.start()
            var output = new StringBuilder();
            var reader = new BufferedReader(new InputStreamReader(process.getInputStream()));

            var String line
            while ((line = reader.readLine()) !== null)
                output.append(line).append("\n");

            var exitVal = process.waitFor();

            if (exitVal == 0) println("Success exec!")
            else println("A problem occured")
            
            println(output)

        }
        catch (IOException | InterruptedException e) { e.printStackTrace(); }
	}
	
	@Test
	def void testExecPythonBigMean() {
		var result = parseHelper.parse('''file = LOAD "./jsonBigGenTestFile.json"; PRINT((SUM(file~"array") ON ("age")) / (LENGTH(file~"array"));''');
		
		var compiled_stms = newArrayList()
		for (stmt: result.stmts) compiled_stms.add(generator.compilePython(stmt))
		
		var processBuilder = new ProcessBuilder()
		var command = '''echo "from jz_library import *" > tester.py; echo "" >> tester.py; «FOR compiled : compiled_stms» echo "«compiled»" >> tester.py;«ENDFOR»'''
		println(command)
		processBuilder.command("bash", "-c", command);
		
		exec(processBuilder)
		
		processBuilder.command("bash", "./pyscript.sh");
		
		try {
            var process = processBuilder.start()
            var output = new StringBuilder();
            var reader = new BufferedReader(new InputStreamReader(process.getInputStream()));

            var String line
            while ((line = reader.readLine()) !== null)
                output.append(line).append("\n");

            var exitVal = process.waitFor();

            if (exitVal == 0) println("Success exec!")
            else println("A problem occured")
            
            println(output)

        }
        catch (IOException | InterruptedException e) { e.printStackTrace(); }
	}
	
	
	@Test
	def void testExecJQConcat() {
		var result = parseHelper.parse('''file = LOAD; SUM(file~"array");''');
		var compiled_stms = newArrayList()
		for (stmt: result.stmts) compiled_stms.add(generator.compileJQ(stmt))
		
		println(result.stmts.length)
		
		
		var processBuilder = new ProcessBuilder()
		var command = '''cat "jsonGenTestFile.json" | jq -r '''
		command += ''' 'def depth (obj): obj | if type == "object" then (map(1 + depth(.)) as $rec | if ($rec | length) == 0 then 1 else ($rec | max) end) else 0 end;'''
		command += '''def csv : (map(keys) | add | unique) as $cols | map(. as $row | $cols | map($row[.])) as $rows | $cols, $rows[] | @csv;'''
		command += '''def product: . as $array | reduce $array[] as $item ( ($array[0] | type | if . == "number" then 1 elif . == "string" then 1 elif . == "object" then {} else null end); . * $item);'''
		command += '''. as $in | «FOR stmt : compiled_stms SEPARATOR "|"»«stmt»«ENDFOR»' '''
		
		println(command)
		processBuilder.command("bash", "-c", command);
		
		try {
            var process = processBuilder.start()
            var output = new StringBuilder();
            var reader = new BufferedReader(new InputStreamReader(process.getInputStream()));

            var String line
            while ((line = reader.readLine()) !== null)
                output.append(line).append("\n");

            var exitVal = process.waitFor();

            if (exitVal == 0) println("Success exec!")
            else println("A problem occured")
            
            println(output)

        }
        catch (IOException | InterruptedException e) { e.printStackTrace(); }
	}
	
	@Test
	def void testExecJQBigConcat() {
		var result = parseHelper.parse('''file = LOAD; SUM(file~"array");''');
		var compiled_stms = newArrayList()
		for (stmt: result.stmts) compiled_stms.add(generator.compileJQ(stmt))
		
		println(result.stmts.length)
		
		
		var processBuilder = new ProcessBuilder()
		var command = '''cat ./jsonBigGenTestFile.json | jq -r'''
		command += ''' 'def depth (obj): obj | if type == "object" then (map(1 + depth(.)) as $rec | if ($rec | length) == 0 then 1 else ($rec | max) end) else 0 end;'''
		command += '''def csv : (map(keys) | add | unique) as $cols | map(. as $row | $cols | map($row[.])) as $rows | $cols, $rows[] | @csv;'''
		command += '''def product: . as $array | reduce $array[] as $item ( ($array[0] | type | if . == "number" then 1 elif . == "string" then 1 elif . == "object" then {} else null end); . * $item);'''
		command += '''«FOR stmt : compiled_stms SEPARATOR "|"»«stmt»«ENDFOR»' '''
		
		println(command)
		processBuilder.command("bash", "-c", command);
		
		try {
            var process = processBuilder.start()
            var output = new StringBuilder();
            var reader = new BufferedReader(new InputStreamReader(process.getInputStream()));

            var String line
            while ((line = reader.readLine()) !== null)
                output.append(line).append("\n");

            var exitVal = process.waitFor();

            if (exitVal == 0) println("Success exec!")
            else println("A problem occured")
            
            println(output)

        }
        catch (IOException | InterruptedException e) { e.printStackTrace(); }
	}
	
	@Test
	def void testExecPythonConcat() {
		var result = parseHelper.parse('''file = LOAD "./jsonGenTestFile.json"; PRINT(SUM(file~"array"));''');
		
		var compiled_stms = newArrayList()
		for (stmt: result.stmts) compiled_stms.add(generator.compilePython(stmt))
		
		var processBuilder = new ProcessBuilder()
		var command = '''echo "from jz_library import *" > tester.py; echo "" >> tester.py; «FOR compiled : compiled_stms» echo "«compiled»" >> tester.py;«ENDFOR»'''
		println(command)
		processBuilder.command("bash", "-c", command);
		
		exec(processBuilder)
		
		processBuilder.command("bash", "./pyscript.sh");
		
		try {
            var process = processBuilder.start()
            var output = new StringBuilder();
            var reader = new BufferedReader(new InputStreamReader(process.getInputStream()));

            var String line
            while ((line = reader.readLine()) !== null)
                output.append(line).append("\n");

            var exitVal = process.waitFor();

            if (exitVal == 0) println("Success exec!")
            else println("A problem occured")
            
            println(output)

        }
        catch (IOException | InterruptedException e) { e.printStackTrace(); }
	}
	
	@Test
	def void testExecPythonBigConcat() {
		var result = parseHelper.parse('''file = LOAD "./jsonBigGenTestFile.json"; PRINT(SUM(file~"array"));''');
		
		var compiled_stms = newArrayList()
		for (stmt: result.stmts) compiled_stms.add(generator.compilePython(stmt))
		
		var processBuilder = new ProcessBuilder()
		var command = '''echo "from jz_library import *" > tester.py; echo "" >> tester.py; «FOR compiled : compiled_stms» echo "«compiled»" >> tester.py;«ENDFOR»'''
		println(command)
		processBuilder.command("bash", "-c", command);
		
		exec(processBuilder)
		
		processBuilder.command("bash", "./pyscript.sh");
		
		try {
            var process = processBuilder.start()
            var output = new StringBuilder();
            var reader = new BufferedReader(new InputStreamReader(process.getInputStream()));

            var String line
            while ((line = reader.readLine()) !== null)
                output.append(line).append("\n");

            var exitVal = process.waitFor();

            if (exitVal == 0) println("Success exec!")
            else println("A problem occured")
            
            println(output)

        }
        catch (IOException | InterruptedException e) { e.printStackTrace(); }
	}
	
	@AfterAll
	def static void removeTmp() {
		var processBuilder = new ProcessBuilder()
		processBuilder.command("bash", "-c", "rm  -r ./tmp/");
			
		try {
		    var process = processBuilder.start()
		    var output = new StringBuilder();
		    var reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
		
		    var String line
		    while ((line = reader.readLine()) !== null)
		        output.append(line).append("\n");
		
			var exitVal = process.waitFor();
			
			if (exitVal == 0) println("tmp erased!")
			else println("A problem occured")
		
		}
		catch (IOException | InterruptedException e) { e.printStackTrace(); }
	}
	
	
	
}
